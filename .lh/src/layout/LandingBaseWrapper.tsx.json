{
    "sourceFile": "src/layout/LandingBaseWrapper.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1747734383262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747736277220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,12 @@\n import styled from 'styled-components';\n import { Breakpoints } from '@/constants/layoutConstants';\n import ResponsiveView from '@/layout/ResponsiveView';\n import React, { useEffect, useRef, useState } from 'react';\n-import { useRouter } from 'next/navigation'; \n import { ChevronDown, ChevronUp } from 'lucide-react'; // 아이콘 사용\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n-\n-\n interface LandingSection {\n   id?: string;\n   $backgroundColor?: string;\n   content: React.ReactNode;\n@@ -56,12 +53,12 @@\n   $zIndex?: number;\n   $hideAppBar?: boolean;\n }>`\n   width: 100%;\n-  background-color: ${({ $backgroundColor }) => $backgroundColor || 'transparent'};\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n   position: relative;\n-  z-index: ${({ $hideAppBar, $zIndex }) =>\n-    $hideAppBar ? 999 : $zIndex ?? 1};\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     overflow-x: hidden;\n   }\n@@ -104,41 +101,42 @@\n   justify-content: flex-end;\n   padding: 0 20px;\n   pointer-events: auto;\n \n-\n   @media (max-width: ${Breakpoints.mobile}px) {\n     max-width: 100%;\n     min-width: 0; // ✅ 모바일에서 최소 너비 해제\n     padding: 0 34px;\n   }\n `;\n \n-\n const ArrowToggle = styled.div`\n   background-color: #2a2135;\n   border-radius: 50%;\n   padding: 8px;\n   cursor: pointer;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n-  border-color: #727171;;\n+  border-color: #727171;\n   border-width: 1px;\n   border-style: solid;\n `;\n \n-\n-\n-const BottomFloatingBox = styled.div<{ $isCollapsed: boolean; $scrollX: number }>`\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n   position: fixed;\n   bottom: 0;\n   left: 0;\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n   background: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'transparent' : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n@@ -169,12 +167,11 @@\n     gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n   }\n `;\n \n-\n-\n const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')}; // 접힌 상태일 때 숨김\n+  display: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'none' : 'flex'}; // 접힌 상태일 때 숨김\n   flex-direction: column;\n   gap: 20px;\n `;\n \n@@ -182,17 +179,19 @@\n   font-size: 18px;\n   font-weight: 700;\n   color: #fff;\n `;\n-\n const LeftDescription = styled.div`\n   font-size: 16px;\n   line-height: 1.4;\n   white-space: pre-line;\n   color: #fff;\n-\n+ \n   @media (max-width: ${Breakpoints.mobile}px) {\n-    display: none; // ✅ 모바일에서는 숨김\n+    display: -webkit-box;\n+    -webkit-box-orient: vertical;\n+    white-space: normal; /* ✅ pre-line 해제 필요 */\n+    font-size: 12px;\n   }\n `;\n \n const RightRow = styled.div`\n@@ -211,33 +210,33 @@\n     object-fit: contain;\n   }\n `;\n \n-\n-\n-const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({ sections, appBar }) => {\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n   const [scrollX, setScrollX] = useState(0);\n   const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n   const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n \n   const [isCollapsed, setIsCollapsed] = useState(false);\n \n   const { lang } = useLang();\n   const t = dictionary[lang].landingBottomBox;\n-  \n \n-\n-\n   useEffect(() => {\n     const handleScroll = () => {\n       setScrollX(window.scrollX || window.pageXOffset);\n \n       const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n         if (!ref || !sections[i].showFloatingBox) return false;\n         const rect = ref.getBoundingClientRect();\n-        return rect.top  < window.innerHeight && rect.bottom +500 > window.innerHeight;\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n       });\n-      \n \n       setIsFloatingVisible(visibleIndex !== -1);\n     };\n \n@@ -256,25 +255,33 @@\n       )}\n \n       {sections.map(\n         (\n-          { id, $backgroundColor, content, $zIndex, $isOverLayout, isWithAppBar },\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n           idx\n         ) => (\n           <SectionWrapper\n             key={idx}\n             id={id}\n             ref={(el) => {\n               sectionRefs.current[idx] = el;\n             }}\n-            \n             $backgroundColor={$backgroundColor}\n             $zIndex={$zIndex}\n             $hideAppBar={isWithAppBar === false}\n           >\n             <ResponsiveView\n               desktopView={\n-                <ContentWrapper $isOverLayout={$isOverLayout}>{content}</ContentWrapper>\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n               }\n               mobileView={\n                 <div\n                   style={{\n@@ -288,40 +295,41 @@\n             />\n           </SectionWrapper>\n         )\n       )}\n-{isFloatingVisible && (\n-  <>\n-    <FloatingToggleButton $scrollX={scrollX}>\n-  <FloatingToggleButtonInner>\n-    <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n-      {isCollapsed ? <ChevronUp color=\"white\" width={\"32\"} height={\"32\"} /> : <ChevronDown color=\"white\"  width={\"32\"} height={\"32\"} />}\n-    </ArrowToggle>\n-  </FloatingToggleButtonInner>\n-</FloatingToggleButton>\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n \n-<BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n-  <BoxInnerWrapper $isCollapsed={isCollapsed}>\n-    <LeftColumn $isCollapsed={isCollapsed}>\n-      <LeftTitle>{t.title}</LeftTitle>\n-      <LeftDescription>{t.description}</LeftDescription>\n-    </LeftColumn>\n-    <RightRow\n-      onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n-      style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n-    >\n-      {!isCollapsed && <span>{t.aiButton}</span>}\n-      <img src=\"/floating.svg\" alt=\"AI Icon\" />\n-    </RightRow>\n-  </BoxInnerWrapper>\n-</BottomFloatingBox>\n-\n-  </>\n-)}\n-\n-\n-\n-\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <LeftDescription>{t.description}</LeftDescription>\n+              </LeftColumn>\n+              <RightRow\n+                onClick={() =>\n+                  window.open('/ai', '_blank', 'noopener,noreferrer')\n+                }\n+                style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+              >\n+                {!isCollapsed && <span>{t.aiButton}</span>}\n+                <img src=\"/floating.svg\" alt=\"AI Icon\" />\n+              </RightRow>\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n     </>\n   );\n };\n \n"
                },
                {
                    "date": 1747793811366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,20 +3,28 @@\n import styled from 'styled-components';\n import { Breakpoints } from '@/constants/layoutConstants';\n import ResponsiveView from '@/layout/ResponsiveView';\n import React, { useEffect, useRef, useState } from 'react';\n-import { ChevronDown, ChevronUp } from 'lucide-react'; // 아이콘 사용\n+import { ChevronDown, ChevronUp } from 'lucide-react';\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n+import { useMediaQuery } from 'react-responsive';\n \n+// ✅ ResponsiveDescription 컴포넌트\n+const ResponsiveDescription: React.FC<{ text: string }> = ({ text }) => {\n+  const isMobile = useMediaQuery({ maxWidth: Breakpoints.mobile });\n+  const [firstLine] = text.split('\\n');\n+  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n+};\n+\n interface LandingSection {\n   id?: string;\n   $backgroundColor?: string;\n   content: React.ReactNode;\n   $zIndex?: number;\n   $isOverLayout?: boolean;\n   isWithAppBar?: boolean;\n-  showFloatingBox?: boolean; // ✅ 추가\n+  showFloatingBox?: boolean;\n }\n \n interface LandingBaseWrapperProps {\n   sections: LandingSection[];\n@@ -38,15 +46,8 @@\n   width: 100%;\n   max-width: ${Breakpoints.desktop}px;\n   margin: 0 auto;\n   box-sizing: border-box;\n-  /* padding-left: 16px; */\n-  /* padding-right: 16px; */\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    /* padding-left: 12px; */\n-    /* padding-right: 12px; */\n-  }\n `;\n \n const SectionWrapper = styled.section<{\n   $backgroundColor?: string;\n@@ -75,37 +76,38 @@\n     min-width: ${({ $isOverLayout }) =>\n       $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n   }\n `;\n+\n const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n   position: fixed;\n   bottom: 100px;\n   left: 0;\n   width: 100%;\n-  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n   display: flex;\n   justify-content: center;\n   z-index: 1001;\n   pointer-events: none;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%; // ✅ 모바일에서 최소 너비 해제\n+    min-width: 100%;\n   }\n `;\n \n const FloatingToggleButtonInner = styled.div`\n   width: 100%;\n   max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n+  min-width: ${Breakpoints.desktop}px;\n   display: flex;\n   justify-content: flex-end;\n   padding: 0 20px;\n   pointer-events: auto;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     max-width: 100%;\n-    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n+    min-width: 0;\n     padding: 0 34px;\n   }\n `;\n \n@@ -130,9 +132,9 @@\n   bottom: 0;\n   left: 0;\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n   background: ${({ $isCollapsed }) =>\n     $isCollapsed\n       ? 'transparent'\n       : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n@@ -142,19 +144,20 @@\n   align-items: center;\n   padding: 0 32px;\n   overflow: hidden;\n   transition: height 0.3s ease, opacity 0.3s ease;\n-  height: ${({ $isCollapsed }) => ($isCollapsed ? '120px' : '120px')};\n+  height: 120px;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     padding: 0 16px;\n-    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n+    min-width: 0;\n   }\n `;\n+\n const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n   width: 100%;\n   max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑 고정\n+  min-width: ${Breakpoints.desktop}px;\n   display: flex;\n   justify-content: ${({ $isCollapsed }) =>\n     $isCollapsed ? 'center' : 'space-between'};\n   align-items: center;\n@@ -162,16 +165,15 @@\n   padding: 20px;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     max-width: 100%;\n-    min-width: 0; // ✅ 모바일에서 제한 없음\n+    min-width: 0;\n     gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n   }\n `;\n \n const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'none' : 'flex'}; // 접힌 상태일 때 숨김\n+  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n   flex-direction: column;\n   gap: 20px;\n `;\n \n@@ -179,30 +181,27 @@\n   font-size: 18px;\n   font-weight: 700;\n   color: #fff;\n `;\n+\n const LeftDescription = styled.div`\n   font-size: 16px;\n   line-height: 1.4;\n   white-space: pre-line;\n   color: #fff;\n- \n+\n   @media (max-width: ${Breakpoints.mobile}px) {\n-    display: -webkit-box;\n-    -webkit-box-orient: vertical;\n-    white-space: normal; /* ✅ pre-line 해제 필요 */\n+    white-space: normal;\n     font-size: 12px;\n   }\n `;\n \n const RightRow = styled.div`\n   display: flex;\n   align-items: center;\n   gap: 12px;\n-\n   font-size: 18px;\n   font-weight: 700;\n-\n   color: #fff;\n \n   img {\n     width: 50px;\n@@ -217,9 +216,8 @@\n }) => {\n   const [scrollX, setScrollX] = useState(0);\n   const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n   const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n-\n   const [isCollapsed, setIsCollapsed] = useState(false);\n \n   const { lang } = useLang();\n   const t = dictionary[lang].landingBottomBox;\n@@ -240,9 +238,9 @@\n       setIsFloatingVisible(visibleIndex !== -1);\n     };\n \n     window.addEventListener('scroll', handleScroll, { passive: true });\n-    handleScroll(); // 초기 체크\n+    handleScroll();\n \n     return () => window.removeEventListener('scroll', handleScroll);\n   }, [sections]);\n \n@@ -282,21 +280,17 @@\n                   {content}\n                 </ContentWrapper>\n               }\n               mobileView={\n-                <div\n-                  style={{\n-                    width: '100%',\n-                    boxSizing: 'border-box',\n-                  }}\n-                >\n+                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n                   {content}\n                 </div>\n               }\n             />\n           </SectionWrapper>\n         )\n       )}\n+\n       {isFloatingVisible && (\n         <>\n           <FloatingToggleButton $scrollX={scrollX}>\n             <FloatingToggleButtonInner>\n@@ -313,9 +307,9 @@\n           <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n             <BoxInnerWrapper $isCollapsed={isCollapsed}>\n               <LeftColumn $isCollapsed={isCollapsed}>\n                 <LeftTitle>{t.title}</LeftTitle>\n-                <LeftDescription>{t.description}</LeftDescription>\n+                <ResponsiveDescription text={t.description} />\n               </LeftColumn>\n               <RightRow\n                 onClick={() =>\n                   window.open('/ai', '_blank', 'noopener,noreferrer')\n"
                },
                {
                    "date": 1747793914256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,14 @@\n import React, { useEffect, useRef, useState } from 'react';\n import { ChevronDown, ChevronUp } from 'lucide-react';\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n-import { useMediaQuery } from 'react-responsive';\n \n-// ✅ ResponsiveDescription 컴포넌트\n-const ResponsiveDescription: React.FC<{ text: string }> = ({ text }) => {\n-  const isMobile = useMediaQuery({ maxWidth: Breakpoints.mobile });\n+// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n+const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n+  text,\n+  isMobile,\n+}) => {\n   const [firstLine] = text.split('\\n');\n   return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n };\n \n@@ -217,13 +218,23 @@\n   const [scrollX, setScrollX] = useState(0);\n   const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n   const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n   const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n \n   const { lang } = useLang();\n   const t = dictionary[lang].landingBottomBox;\n \n   useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n     const handleScroll = () => {\n       setScrollX(window.scrollX || window.pageXOffset);\n \n       const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n@@ -307,9 +318,9 @@\n           <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n             <BoxInnerWrapper $isCollapsed={isCollapsed}>\n               <LeftColumn $isCollapsed={isCollapsed}>\n                 <LeftTitle>{t.title}</LeftTitle>\n-                <ResponsiveDescription text={t.description} />\n+                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n               </LeftColumn>\n               <RightRow\n                 onClick={() =>\n                   window.open('/ai', '_blank', 'noopener,noreferrer')\n"
                },
                {
                    "date": 1747793945357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n   color: #fff;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     white-space: normal;\n-    font-size: 12px;\n+    /* font-size: 12px; */\n   }\n `;\n \n const RightRow = styled.div`\n"
                },
                {
                    "date": 1748312337885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n `;\n \n const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n   width: 100%;\n-  margin: 0 auto;\n+  /* margin: 0 auto; */\n   box-sizing: border-box;\n \n   @media (min-width: ${Breakpoints.desktop}px) {\n     max-width: ${({ $isOverLayout }) =>\n"
                },
                {
                    "date": 1748331490706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   position: fixed;\n   top: 0;\n   left: 0;\n   width: 100%;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  /* transform: translateX(${({ $scrollX }) => -$scrollX}px); */\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n `;\n@@ -67,9 +67,9 @@\n `;\n \n const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n   width: 100%;\n-  /* margin: 0 auto; */\n+  margin: 0 auto;\n   box-sizing: border-box;\n \n   @media (min-width: ${Breakpoints.desktop}px) {\n     max-width: ${({ $isOverLayout }) =>\n"
                },
                {
                    "date": 1748331504192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n   position: fixed;\n   top: 0;\n   left: 0;\n   width: 100%;\n-  /* transform: translateX(${({ $scrollX }) => -$scrollX}px); */\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n `;\n"
                },
                {
                    "date": 1748416188664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,10 +326,10 @@\n                   window.open('/ai', '_blank', 'noopener,noreferrer')\n                 }\n                 style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n               >\n-                {!isCollapsed && <span>{t.aiButton}</span>}\n-                <img src=\"/floating.svg\" alt=\"AI Icon\" />\n+                {/* {!isCollapsed && <span>{t.aiButton}</span>} */}\n+                <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n               </RightRow>\n             </BoxInnerWrapper>\n           </BottomFloatingBox>\n         </>\n"
                },
                {
                    "date": 1748416201993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,9 +326,9 @@\n                   window.open('/ai', '_blank', 'noopener,noreferrer')\n                 }\n                 style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n               >\n-                {/* {!isCollapsed && <span>{t.aiButton}</span>} */}\n+                {!isCollapsed && <span>{t.aiButton}</span>}\n                 <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n               </RightRow>\n             </BoxInnerWrapper>\n           </BottomFloatingBox>\n"
                },
                {
                    "date": 1748416429883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,41 @@\n 'use client';\n \n-import styled from 'styled-components';\n+import styled, { keyframes } from 'styled-components';\n import { Breakpoints } from '@/constants/layoutConstants';\n import ResponsiveView from '@/layout/ResponsiveView';\n import React, { useEffect, useRef, useState } from 'react';\n import { ChevronDown, ChevronUp } from 'lucide-react';\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n+\n+const skeletonText = keyframes`\n+  0% { color: #5708fb; }\n+  50% { color: #be83ea; }\n+  100% { color: #5708fb; }\n+`;\n+\n+const skeletonBg = keyframes`\n+  0% { background-color: #5708fb; }\n+  50% { background-color: #be83ea; }\n+  100% { background-color: #5708fb; }\n+`;\n+\n+const SkeletonText = styled.span`\n+  animation: ${skeletonText} 1.5s ease-in-out infinite;\n+`;\n+\n+const IconWrapper = styled.div`\n+  width: 100px;\n+  height: 100px;\n+  border-radius: 50%;\n+  animation: ${skeletonBg} 1.5s ease-in-out infinite;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+`;\n+\n // ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n   text,\n   isMobile,\n@@ -137,9 +164,9 @@\n   transform: translateX(${({ $scrollX }) => -$scrollX}px);\n   background: ${({ $isCollapsed }) =>\n     $isCollapsed\n       ? 'transparent'\n-      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n+      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n@@ -321,16 +348,17 @@\n                 <LeftTitle>{t.title}</LeftTitle>\n                 <ResponsiveDescription text={t.description} isMobile={isMobile} />\n               </LeftColumn>\n               <RightRow\n-                onClick={() =>\n-                  window.open('/ai', '_blank', 'noopener,noreferrer')\n-                }\n-                style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n-              >\n-                {!isCollapsed && <span>{t.aiButton}</span>}\n-                <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n-              </RightRow>\n+  onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n+  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+>\n+  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n+  <IconWrapper>\n+    <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 60, height: 60 }} />\n+  </IconWrapper>\n+</RightRow>\n+\n             </BoxInnerWrapper>\n           </BottomFloatingBox>\n         </>\n       )}\n"
                },
                {
                    "date": 1748416512170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,34 +8,55 @@\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n \n-const skeletonText = keyframes`\n-  0% { color: #5708fb; }\n-  50% { color: #be83ea; }\n-  100% { color: #5708fb; }\n+// ✅ animation 추가\n+import styled, { keyframes } from 'styled-components';\n+\n+// 텍스트 그라데이션 스켈레톤 애니메이션\n+const textGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  100% { background-position: 100% 50%; }\n `;\n \n-const skeletonBg = keyframes`\n-  0% { background-color: #5708fb; }\n-  50% { background-color: #be83ea; }\n-  100% { background-color: #5708fb; }\n+// 원형 배경 그라데이션 스켈레톤 애니메이션\n+const bgGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  100% { background-position: 100% 50%; }\n `;\n \n+// 텍스트 스켈레톤 스타일\n const SkeletonText = styled.span`\n-  animation: ${skeletonText} 1.5s ease-in-out infinite;\n+  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 200% 200%;\n+  animation: ${textGradient} 2s linear infinite;\n+  background-clip: text;\n+  -webkit-background-clip: text;\n+  color: transparent;\n+  -webkit-text-fill-color: transparent;\n+  font-weight: 700;\n `;\n \n+// 이미지 감싸는 원형 배경\n const IconWrapper = styled.div`\n   width: 100px;\n   height: 100px;\n   border-radius: 50%;\n-  animation: ${skeletonBg} 1.5s ease-in-out infinite;\n+  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 200% 200%;\n+  animation: ${bgGradient} 2s linear infinite;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n+\n+  img {\n+    width: 60px;\n+    height: 60px;\n+    object-fit: contain;\n+  }\n `;\n \n+\n // ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n   text,\n   isMobile,\n@@ -348,17 +369,20 @@\n                 <LeftTitle>{t.title}</LeftTitle>\n                 <ResponsiveDescription text={t.description} isMobile={isMobile} />\n               </LeftColumn>\n               <RightRow\n-  onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n+  onClick={() =>\n+    window.open('/ai', '_blank', 'noopener,noreferrer')\n+  }\n   style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n >\n   {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n   <IconWrapper>\n-    <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 60, height: 60 }} />\n+    <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n   </IconWrapper>\n </RightRow>\n \n+\n             </BoxInnerWrapper>\n           </BottomFloatingBox>\n         </>\n       )}\n"
                },
                {
                    "date": 1748416525899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,8 @@\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n \n-// ✅ animation 추가\n-import styled, { keyframes } from 'styled-components';\n \n // 텍스트 그라데이션 스켈레톤 애니메이션\n const textGradient = keyframes`\n   0% { background-position: 0% 50%; }\n"
                },
                {
                    "date": 1748416556499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n `;\n \n // 이미지 감싸는 원형 배경\n const IconWrapper = styled.div`\n-  width: 100px;\n-  height: 100px;\n+  width: 60px;\n+  height: 60px;\n   border-radius: 50%;\n   background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n   background-size: 200% 200%;\n   animation: ${bgGradient} 2s linear infinite;\n"
                },
                {
                    "date": 1748416571231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n `;\n \n // 이미지 감싸는 원형 배경\n const IconWrapper = styled.div`\n-  width: 60px;\n-  height: 60px;\n+  width: 50px;\n+  height: 50px;\n   border-radius: 50%;\n   background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n   background-size: 200% 200%;\n   animation: ${bgGradient} 2s linear infinite;\n"
                },
                {
                    "date": 1748416579031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n   align-items: center;\n   justify-content: center;\n \n   img {\n-    width: 60px;\n-    height: 60px;\n+    width: 40px;\n+    height: 40px;\n     object-fit: contain;\n   }\n `;\n \n"
                },
                {
                    "date": 1748416596233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n   align-items: center;\n   justify-content: center;\n \n   img {\n-    width: 40px;\n-    height: 40px;\n+    width: 30px;\n+    height: 30px;\n     object-fit: contain;\n   }\n `;\n \n"
                },
                {
                    "date": 1748416694167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,393 @@\n+'use client';\n+\n+import styled, { keyframes } from 'styled-components';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import React, { useEffect, useRef, useState } from 'react';\n+import { ChevronDown, ChevronUp } from 'lucide-react';\n+import { useLang } from '@/contexts/LangContext';\n+import { dictionary } from '@/lib/i18n/lang';\n+\n+\n+\n+// 텍스트 그라데이션 스켈레톤 애니메이션\n+const textGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+const bgGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+// 텍스트 스켈레톤 스타일\n+const SkeletonText = styled.span`\n+  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${textGradient} 3s ease-in-out infinite;\n+  background-clip: text;\n+  -webkit-background-clip: text;\n+  color: transparent;\n+  -webkit-text-fill-color: transparent;\n+  font-weight: 700;\n+`;\n+\n+// 이미지 감싸는 원형 배경\n+const IconWrapper = styled.div`\n+  width: 50px;\n+  height: 50px;\n+  border-radius: 50%;\n+  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${bgGradient} 3s ease-in-out infinite;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+\n+  img {\n+    width: 30px;\n+    height: 30px;\n+    object-fit: cover;\n+    display: block;\n+  }\n+`;\n+\n+\n+// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n+const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n+  text,\n+  isMobile,\n+}) => {\n+  const [firstLine] = text.split('\\n');\n+  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n+};\n+\n+interface LandingSection {\n+  id?: string;\n+  $backgroundColor?: string;\n+  content: React.ReactNode;\n+  $zIndex?: number;\n+  $isOverLayout?: boolean;\n+  isWithAppBar?: boolean;\n+  showFloatingBox?: boolean;\n+}\n+\n+interface LandingBaseWrapperProps {\n+  sections: LandingSection[];\n+  appBar?: React.ReactNode;\n+}\n+\n+const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+`;\n+\n+const AppBarContentWrapper = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+`;\n+\n+const SectionWrapper = styled.section<{\n+  $backgroundColor?: string;\n+  $zIndex?: number;\n+  $hideAppBar?: boolean;\n+}>`\n+  width: 100%;\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n+  position: relative;\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    overflow-x: hidden;\n+  }\n+`;\n+\n+const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n+  width: 100%;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+\n+  @media (min-width: ${Breakpoints.desktop}px) {\n+    max-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+    min-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+  }\n+`;\n+\n+const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  bottom: 100px;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  display: flex;\n+  justify-content: center;\n+  z-index: 1001;\n+  pointer-events: none;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+\n+const FloatingToggleButtonInner = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: flex-end;\n+  padding: 0 20px;\n+  pointer-events: auto;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    padding: 0 34px;\n+  }\n+`;\n+\n+const ArrowToggle = styled.div`\n+  background-color: #2a2135;\n+  border-radius: 50%;\n+  padding: 8px;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  border-color: #727171;\n+  border-width: 1px;\n+  border-style: solid;\n+`;\n+\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n+  position: fixed;\n+  bottom: 0;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  background: ${({ $isCollapsed }) =>\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  padding: 0 32px;\n+  overflow: hidden;\n+  transition: height 0.3s ease, opacity 0.3s ease;\n+  height: 120px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    padding: 0 16px;\n+    min-width: 0;\n+  }\n+`;\n+\n+const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'center' : 'space-between'};\n+  align-items: center;\n+  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n+  padding: 20px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n+  }\n+`;\n+\n+const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n+  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const LeftTitle = styled.div`\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+`;\n+\n+const LeftDescription = styled.div`\n+  font-size: 16px;\n+  line-height: 1.4;\n+  white-space: pre-line;\n+  color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    white-space: normal;\n+    /* font-size: 12px; */\n+  }\n+`;\n+\n+const RightRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+\n+  img {\n+    width: 50px;\n+    height: 50px;\n+    object-fit: contain;\n+  }\n+`;\n+\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n+  const [scrollX, setScrollX] = useState(0);\n+  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n+  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n+  const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n+\n+  const { lang } = useLang();\n+  const t = dictionary[lang].landingBottomBox;\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleScroll = () => {\n+      setScrollX(window.scrollX || window.pageXOffset);\n+\n+      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n+        if (!ref || !sections[i].showFloatingBox) return false;\n+        const rect = ref.getBoundingClientRect();\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n+      });\n+\n+      setIsFloatingVisible(visibleIndex !== -1);\n+    };\n+\n+    window.addEventListener('scroll', handleScroll, { passive: true });\n+    handleScroll();\n+\n+    return () => window.removeEventListener('scroll', handleScroll);\n+  }, [sections]);\n+\n+  return (\n+    <>\n+      {appBar && (\n+        <FixedAppBarWrapper $scrollX={scrollX}>\n+          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n+        </FixedAppBarWrapper>\n+      )}\n+\n+      {sections.map(\n+        (\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n+          idx\n+        ) => (\n+          <SectionWrapper\n+            key={idx}\n+            id={id}\n+            ref={(el) => {\n+              sectionRefs.current[idx] = el;\n+            }}\n+            $backgroundColor={$backgroundColor}\n+            $zIndex={$zIndex}\n+            $hideAppBar={isWithAppBar === false}\n+          >\n+            <ResponsiveView\n+              desktopView={\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n+              }\n+              mobileView={\n+                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n+                  {content}\n+                </div>\n+              }\n+            />\n+          </SectionWrapper>\n+        )\n+      )}\n+\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n+\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n+              </LeftColumn>\n+              <RightRow\n+  onClick={() =>\n+    window.open('/ai', '_blank', 'noopener,noreferrer')\n+  }\n+  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+>\n+  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n+  <IconWrapper>\n+    <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n+  </IconWrapper>\n+</RightRow>\n+\n+\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748416722389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n   style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n >\n   {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n   <IconWrapper>\n-    <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" width=\"30\" height=\"30\" />\n   </IconWrapper>\n </RightRow>\n \n \n@@ -390,395 +390,4 @@\n   );\n };\n \n export default LandingBaseWrapper;\n-'use client';\n-\n-import styled, { keyframes } from 'styled-components';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import React, { useEffect, useRef, useState } from 'react';\n-import { ChevronDown, ChevronUp } from 'lucide-react';\n-import { useLang } from '@/contexts/LangContext';\n-import { dictionary } from '@/lib/i18n/lang';\n-\n-\n-\n-// 텍스트 그라데이션 스켈레톤 애니메이션\n-const textGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  100% { background-position: 100% 50%; }\n-`;\n-\n-// 원형 배경 그라데이션 스켈레톤 애니메이션\n-const bgGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  100% { background-position: 100% 50%; }\n-`;\n-\n-// 텍스트 스켈레톤 스타일\n-const SkeletonText = styled.span`\n-  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 200% 200%;\n-  animation: ${textGradient} 2s linear infinite;\n-  background-clip: text;\n-  -webkit-background-clip: text;\n-  color: transparent;\n-  -webkit-text-fill-color: transparent;\n-  font-weight: 700;\n-`;\n-\n-// 이미지 감싸는 원형 배경\n-const IconWrapper = styled.div`\n-  width: 50px;\n-  height: 50px;\n-  border-radius: 50%;\n-  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 200% 200%;\n-  animation: ${bgGradient} 2s linear infinite;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-\n-  img {\n-    width: 30px;\n-    height: 30px;\n-    object-fit: contain;\n-  }\n-`;\n-\n-\n-// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n-const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n-  text,\n-  isMobile,\n-}) => {\n-  const [firstLine] = text.split('\\n');\n-  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n-};\n-\n-interface LandingSection {\n-  id?: string;\n-  $backgroundColor?: string;\n-  content: React.ReactNode;\n-  $zIndex?: number;\n-  $isOverLayout?: boolean;\n-  isWithAppBar?: boolean;\n-  showFloatingBox?: boolean;\n-}\n-\n-interface LandingBaseWrapperProps {\n-  sections: LandingSection[];\n-  appBar?: React.ReactNode;\n-}\n-\n-const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  width: 100%;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-`;\n-\n-const AppBarContentWrapper = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-`;\n-\n-const SectionWrapper = styled.section<{\n-  $backgroundColor?: string;\n-  $zIndex?: number;\n-  $hideAppBar?: boolean;\n-}>`\n-  width: 100%;\n-  background-color: ${({ $backgroundColor }) =>\n-    $backgroundColor || 'transparent'};\n-  position: relative;\n-  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    overflow-x: hidden;\n-  }\n-`;\n-\n-const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n-  width: 100%;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-\n-  @media (min-width: ${Breakpoints.desktop}px) {\n-    max-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n-    min-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n-  }\n-`;\n-\n-const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  bottom: 100px;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  display: flex;\n-  justify-content: center;\n-  z-index: 1001;\n-  pointer-events: none;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-`;\n-\n-const FloatingToggleButtonInner = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: flex-end;\n-  padding: 0 20px;\n-  pointer-events: auto;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    padding: 0 34px;\n-  }\n-`;\n-\n-const ArrowToggle = styled.div`\n-  background-color: #2a2135;\n-  border-radius: 50%;\n-  padding: 8px;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  border-color: #727171;\n-  border-width: 1px;\n-  border-style: solid;\n-`;\n-\n-const BottomFloatingBox = styled.div<{\n-  $isCollapsed: boolean;\n-  $scrollX: number;\n-}>`\n-  position: fixed;\n-  bottom: 0;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  background: ${({ $isCollapsed }) =>\n-    $isCollapsed\n-      ? 'transparent'\n-      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  padding: 0 32px;\n-  overflow: hidden;\n-  transition: height 0.3s ease, opacity 0.3s ease;\n-  height: 120px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    padding: 0 16px;\n-    min-width: 0;\n-  }\n-`;\n-\n-const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'center' : 'space-between'};\n-  align-items: center;\n-  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n-  padding: 20px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n-  }\n-`;\n-\n-const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n-  flex-direction: column;\n-  gap: 20px;\n-`;\n-\n-const LeftTitle = styled.div`\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-`;\n-\n-const LeftDescription = styled.div`\n-  font-size: 16px;\n-  line-height: 1.4;\n-  white-space: pre-line;\n-  color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    white-space: normal;\n-    /* font-size: 12px; */\n-  }\n-`;\n-\n-const RightRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 12px;\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-\n-  img {\n-    width: 50px;\n-    height: 50px;\n-    object-fit: contain;\n-  }\n-`;\n-\n-const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n-  sections,\n-  appBar,\n-}) => {\n-  const [scrollX, setScrollX] = useState(0);\n-  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n-  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n-  const [isCollapsed, setIsCollapsed] = useState(false);\n-  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n-\n-  const { lang } = useLang();\n-  const t = dictionary[lang].landingBottomBox;\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    const handleScroll = () => {\n-      setScrollX(window.scrollX || window.pageXOffset);\n-\n-      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n-        if (!ref || !sections[i].showFloatingBox) return false;\n-        const rect = ref.getBoundingClientRect();\n-        return (\n-          rect.top < window.innerHeight &&\n-          rect.bottom + 500 > window.innerHeight\n-        );\n-      });\n-\n-      setIsFloatingVisible(visibleIndex !== -1);\n-    };\n-\n-    window.addEventListener('scroll', handleScroll, { passive: true });\n-    handleScroll();\n-\n-    return () => window.removeEventListener('scroll', handleScroll);\n-  }, [sections]);\n-\n-  return (\n-    <>\n-      {appBar && (\n-        <FixedAppBarWrapper $scrollX={scrollX}>\n-          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n-        </FixedAppBarWrapper>\n-      )}\n-\n-      {sections.map(\n-        (\n-          {\n-            id,\n-            $backgroundColor,\n-            content,\n-            $zIndex,\n-            $isOverLayout,\n-            isWithAppBar,\n-          },\n-          idx\n-        ) => (\n-          <SectionWrapper\n-            key={idx}\n-            id={id}\n-            ref={(el) => {\n-              sectionRefs.current[idx] = el;\n-            }}\n-            $backgroundColor={$backgroundColor}\n-            $zIndex={$zIndex}\n-            $hideAppBar={isWithAppBar === false}\n-          >\n-            <ResponsiveView\n-              desktopView={\n-                <ContentWrapper $isOverLayout={$isOverLayout}>\n-                  {content}\n-                </ContentWrapper>\n-              }\n-              mobileView={\n-                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n-                  {content}\n-                </div>\n-              }\n-            />\n-          </SectionWrapper>\n-        )\n-      )}\n-\n-      {isFloatingVisible && (\n-        <>\n-          <FloatingToggleButton $scrollX={scrollX}>\n-            <FloatingToggleButtonInner>\n-              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n-                {isCollapsed ? (\n-                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n-                ) : (\n-                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n-                )}\n-              </ArrowToggle>\n-            </FloatingToggleButtonInner>\n-          </FloatingToggleButton>\n-\n-          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n-            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n-              <LeftColumn $isCollapsed={isCollapsed}>\n-                <LeftTitle>{t.title}</LeftTitle>\n-                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n-              </LeftColumn>\n-              <RightRow\n-  onClick={() =>\n-    window.open('/ai', '_blank', 'noopener,noreferrer')\n-  }\n-  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n->\n-  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n-  <IconWrapper>\n-    <img src=\"/floating2.svg\" alt=\"AI Icon\" />\n-  </IconWrapper>\n-</RightRow>\n-\n-\n-            </BoxInnerWrapper>\n-          </BottomFloatingBox>\n-        </>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748416735115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,9 @@\n   style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n >\n   {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n   <IconWrapper>\n-  <img src=\"/floating2.svg\" alt=\"AI Icon\" width=\"30\" height=\"30\" />\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" width=\"20\" height=\"20\" />\n   </IconWrapper>\n </RightRow>\n \n \n"
                },
                {
                    "date": 1748416810268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n   img {\n     width: 30px;\n     height: 30px;\n-    object-fit: cover;\n+    /* object-fit: cover; */\n     display: block;\n   }\n `;\n \n"
                },
                {
                    "date": 1748416840687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n   -webkit-text-fill-color: transparent;\n   font-weight: 700;\n `;\n \n-// 이미지 감싸는 원형 배경\n const IconWrapper = styled.div`\n   width: 50px;\n   height: 50px;\n   border-radius: 50%;\n@@ -45,18 +44,12 @@\n   animation: ${bgGradient} 3s ease-in-out infinite;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n-\n-  img {\n-    width: 30px;\n-    height: 30px;\n-    /* object-fit: cover; */\n-    display: block;\n-  }\n `;\n \n \n+\n // ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n   text,\n   isMobile,\n@@ -376,9 +369,9 @@\n   style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n >\n   {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n   <IconWrapper>\n-  <img src=\"/floating2.svg\" alt=\"AI Icon\" width=\"20\" height=\"20\" />\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 24, height: 24 }} />\n   </IconWrapper>\n </RightRow>\n \n \n"
                },
                {
                    "date": 1748416854587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n   style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n >\n   {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n   <IconWrapper>\n-  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 24, height: 24 }} />\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 30, height: 30 }} />\n   </IconWrapper>\n </RightRow>\n \n \n"
                },
                {
                    "date": 1748416868662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+'use client';\n+\n+import styled, { keyframes } from 'styled-components';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import React, { useEffect, useRef, useState } from 'react';\n+import { ChevronDown, ChevronUp } from 'lucide-react';\n+import { useLang } from '@/contexts/LangContext';\n+import { dictionary } from '@/lib/i18n/lang';\n+\n+\n+\n+// 텍스트 그라데이션 스켈레톤 애니메이션\n+const textGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+const bgGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+// 텍스트 스켈레톤 스타일\n+const SkeletonText = styled.span`\n+  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${textGradient} 3s ease-in-out infinite;\n+  background-clip: text;\n+  -webkit-background-clip: text;\n+  color: transparent;\n+  -webkit-text-fill-color: transparent;\n+  font-weight: 700;\n+`;\n+\n+const IconWrapper = styled.div`\n+  width: 50px;\n+  height: 50px;\n+  border-radius: 50%;\n+  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${bgGradient} 3s ease-in-out infinite;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+`;\n+\n+\n+\n+// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n+const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n+  text,\n+  isMobile,\n+}) => {\n+  const [firstLine] = text.split('\\n');\n+  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n+};\n+\n+interface LandingSection {\n+  id?: string;\n+  $backgroundColor?: string;\n+  content: React.ReactNode;\n+  $zIndex?: number;\n+  $isOverLayout?: boolean;\n+  isWithAppBar?: boolean;\n+  showFloatingBox?: boolean;\n+}\n+\n+interface LandingBaseWrapperProps {\n+  sections: LandingSection[];\n+  appBar?: React.ReactNode;\n+}\n+\n+const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+`;\n+\n+const AppBarContentWrapper = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+`;\n+\n+const SectionWrapper = styled.section<{\n+  $backgroundColor?: string;\n+  $zIndex?: number;\n+  $hideAppBar?: boolean;\n+}>`\n+  width: 100%;\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n+  position: relative;\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    overflow-x: hidden;\n+  }\n+`;\n+\n+const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n+  width: 100%;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+\n+  @media (min-width: ${Breakpoints.desktop}px) {\n+    max-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+    min-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+  }\n+`;\n+\n+const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  bottom: 100px;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  display: flex;\n+  justify-content: center;\n+  z-index: 1001;\n+  pointer-events: none;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+\n+const FloatingToggleButtonInner = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: flex-end;\n+  padding: 0 20px;\n+  pointer-events: auto;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    padding: 0 34px;\n+  }\n+`;\n+\n+const ArrowToggle = styled.div`\n+  background-color: #2a2135;\n+  border-radius: 50%;\n+  padding: 8px;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  border-color: #727171;\n+  border-width: 1px;\n+  border-style: solid;\n+`;\n+\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n+  position: fixed;\n+  bottom: 0;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  background: ${({ $isCollapsed }) =>\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  padding: 0 32px;\n+  overflow: hidden;\n+  transition: height 0.3s ease, opacity 0.3s ease;\n+  height: 120px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    padding: 0 16px;\n+    min-width: 0;\n+  }\n+`;\n+\n+const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'center' : 'space-between'};\n+  align-items: center;\n+  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n+  padding: 20px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n+  }\n+`;\n+\n+const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n+  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const LeftTitle = styled.div`\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+`;\n+\n+const LeftDescription = styled.div`\n+  font-size: 16px;\n+  line-height: 1.4;\n+  white-space: pre-line;\n+  color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    white-space: normal;\n+    /* font-size: 12px; */\n+  }\n+`;\n+\n+const RightRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+\n+  img {\n+    width: 50px;\n+    height: 50px;\n+    object-fit: contain;\n+  }\n+`;\n+\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n+  const [scrollX, setScrollX] = useState(0);\n+  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n+  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n+  const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n+\n+  const { lang } = useLang();\n+  const t = dictionary[lang].landingBottomBox;\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleScroll = () => {\n+      setScrollX(window.scrollX || window.pageXOffset);\n+\n+      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n+        if (!ref || !sections[i].showFloatingBox) return false;\n+        const rect = ref.getBoundingClientRect();\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n+      });\n+\n+      setIsFloatingVisible(visibleIndex !== -1);\n+    };\n+\n+    window.addEventListener('scroll', handleScroll, { passive: true });\n+    handleScroll();\n+\n+    return () => window.removeEventListener('scroll', handleScroll);\n+  }, [sections]);\n+\n+  return (\n+    <>\n+      {appBar && (\n+        <FixedAppBarWrapper $scrollX={scrollX}>\n+          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n+        </FixedAppBarWrapper>\n+      )}\n+\n+      {sections.map(\n+        (\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n+          idx\n+        ) => (\n+          <SectionWrapper\n+            key={idx}\n+            id={id}\n+            ref={(el) => {\n+              sectionRefs.current[idx] = el;\n+            }}\n+            $backgroundColor={$backgroundColor}\n+            $zIndex={$zIndex}\n+            $hideAppBar={isWithAppBar === false}\n+          >\n+            <ResponsiveView\n+              desktopView={\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n+              }\n+              mobileView={\n+                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n+                  {content}\n+                </div>\n+              }\n+            />\n+          </SectionWrapper>\n+        )\n+      )}\n+\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n+\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n+              </LeftColumn>\n+              <RightRow\n+  onClick={() =>\n+    window.open('/ai', '_blank', 'noopener,noreferrer')\n+  }\n+  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+>\n+  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n+  <IconWrapper>\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 40, height: 40 }} />\n+  </IconWrapper>\n+</RightRow>\n+\n+\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748416987185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+'use client';\n+\n+import styled, { keyframes } from 'styled-components';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import React, { useEffect, useRef, useState } from 'react';\n+import { ChevronDown, ChevronUp } from 'lucide-react';\n+import { useLang } from '@/contexts/LangContext';\n+import { dictionary } from '@/lib/i18n/lang';\n+\n+\n+\n+// 텍스트 그라데이션 스켈레톤 애니메이션\n+const textGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+const bgGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+// 텍스트 스켈레톤 스타일\n+const SkeletonText = styled.span`\n+  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${textGradient} 3s ease-in-out infinite;\n+  background-clip: text;\n+  -webkit-background-clip: text;\n+  color: transparent;\n+  -webkit-text-fill-color: transparent;\n+  font-weight: 700;\n+`;\n+\n+const IconWrapper = styled.div`\n+  width: 50px;\n+  height: 50px;\n+  border-radius: 50%;\n+  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${bgGradient} 3s ease-in-out infinite;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+`;\n+\n+\n+\n+// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n+const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n+  text,\n+  isMobile,\n+}) => {\n+  const [firstLine] = text.split('\\n');\n+  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n+};\n+\n+interface LandingSection {\n+  id?: string;\n+  $backgroundColor?: string;\n+  content: React.ReactNode;\n+  $zIndex?: number;\n+  $isOverLayout?: boolean;\n+  isWithAppBar?: boolean;\n+  showFloatingBox?: boolean;\n+}\n+\n+interface LandingBaseWrapperProps {\n+  sections: LandingSection[];\n+  appBar?: React.ReactNode;\n+}\n+\n+const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+`;\n+\n+const AppBarContentWrapper = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+`;\n+\n+const SectionWrapper = styled.section<{\n+  $backgroundColor?: string;\n+  $zIndex?: number;\n+  $hideAppBar?: boolean;\n+}>`\n+  width: 100%;\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n+  position: relative;\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    overflow-x: hidden;\n+  }\n+`;\n+\n+const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n+  width: 100%;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+\n+  @media (min-width: ${Breakpoints.desktop}px) {\n+    max-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+    min-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+  }\n+`;\n+\n+const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  bottom: 100px;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  display: flex;\n+  justify-content: center;\n+  z-index: 1001;\n+  pointer-events: none;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+\n+const FloatingToggleButtonInner = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: flex-end;\n+  padding: 0 20px;\n+  pointer-events: auto;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    padding: 0 34px;\n+  }\n+`;\n+\n+const ArrowToggle = styled.div`\n+  background-color: #2a2135;\n+  border-radius: 50%;\n+  padding: 8px;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  border-color: #727171;\n+  border-width: 1px;\n+  border-style: solid;\n+`;\n+\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n+  position: fixed;\n+  bottom: 0;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  background: ${({ $isCollapsed }) =>\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  padding: 0 32px;\n+  overflow: hidden;\n+  transition: height 0.3s ease, opacity 0.3s ease;\n+  height: 120px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    padding: 0 16px;\n+    min-width: 0;\n+  }\n+`;\n+\n+const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'center' : 'space-between'};\n+  align-items: center;\n+  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n+  padding: 20px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n+  }\n+`;\n+\n+const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n+  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const LeftTitle = styled.div`\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+`;\n+\n+const LeftDescription = styled.div`\n+  font-size: 16px;\n+  line-height: 1.4;\n+  white-space: pre-line;\n+  color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    white-space: normal;\n+    /* font-size: 12px; */\n+  }\n+`;\n+\n+const RightRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+\n+  img {\n+    width: 50px;\n+    height: 50px;\n+    object-fit: contain;\n+  }\n+`;\n+\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n+  const [scrollX, setScrollX] = useState(0);\n+  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n+  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n+  const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n+\n+  const { lang } = useLang();\n+  const t = dictionary[lang].landingBottomBox;\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleScroll = () => {\n+      setScrollX(window.scrollX || window.pageXOffset);\n+\n+      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n+        if (!ref || !sections[i].showFloatingBox) return false;\n+        const rect = ref.getBoundingClientRect();\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n+      });\n+\n+      setIsFloatingVisible(visibleIndex !== -1);\n+    };\n+\n+    window.addEventListener('scroll', handleScroll, { passive: true });\n+    handleScroll();\n+\n+    return () => window.removeEventListener('scroll', handleScroll);\n+  }, [sections]);\n+\n+  return (\n+    <>\n+      {appBar && (\n+        <FixedAppBarWrapper $scrollX={scrollX}>\n+          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n+        </FixedAppBarWrapper>\n+      )}\n+\n+      {sections.map(\n+        (\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n+          idx\n+        ) => (\n+          <SectionWrapper\n+            key={idx}\n+            id={id}\n+            ref={(el) => {\n+              sectionRefs.current[idx] = el;\n+            }}\n+            $backgroundColor={$backgroundColor}\n+            $zIndex={$zIndex}\n+            $hideAppBar={isWithAppBar === false}\n+          >\n+            <ResponsiveView\n+              desktopView={\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n+              }\n+              mobileView={\n+                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n+                  {content}\n+                </div>\n+              }\n+            />\n+          </SectionWrapper>\n+        )\n+      )}\n+\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n+\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n+              </LeftColumn>\n+              <RightRow\n+  onClick={() =>\n+    window.open('/ai', '_blank', 'noopener,noreferrer')\n+  }\n+  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+>\n+  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n+  <IconWrapper>\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 40, height: 40 }} />\n+  </IconWrapper>\n+</RightRow>\n+\n+\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748417109595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,395 +8,19 @@\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n \n-\n-// 텍스트 그라데이션 스켈레톤 애니메이션\n-const textGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  50% { background-position: 100% 50%; }\n-  100% { background-position: 0% 50%; }\n-`;\n-\n-const bgGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  50% { background-position: 100% 50%; }\n-  100% { background-position: 0% 50%; }\n-`;\n-\n-// 텍스트 스켈레톤 스타일\n-const SkeletonText = styled.span`\n-  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 300% 100%;\n-  animation: ${textGradient} 3s ease-in-out infinite;\n-  background-clip: text;\n-  -webkit-background-clip: text;\n-  color: transparent;\n-  -webkit-text-fill-color: transparent;\n-  font-weight: 700;\n-`;\n-\n-const IconWrapper = styled.div`\n-  width: 50px;\n-  height: 50px;\n-  border-radius: 50%;\n-  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 300% 100%;\n-  animation: ${bgGradient} 3s ease-in-out infinite;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-`;\n-\n-\n-\n-// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n-const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n-  text,\n-  isMobile,\n-}) => {\n-  const [firstLine] = text.split('\\n');\n-  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n-};\n-\n-interface LandingSection {\n-  id?: string;\n-  $backgroundColor?: string;\n-  content: React.ReactNode;\n-  $zIndex?: number;\n-  $isOverLayout?: boolean;\n-  isWithAppBar?: boolean;\n-  showFloatingBox?: boolean;\n-}\n-\n-interface LandingBaseWrapperProps {\n-  sections: LandingSection[];\n-  appBar?: React.ReactNode;\n-}\n-\n-const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  width: 100%;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-`;\n-\n-const AppBarContentWrapper = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-`;\n-\n-const SectionWrapper = styled.section<{\n-  $backgroundColor?: string;\n-  $zIndex?: number;\n-  $hideAppBar?: boolean;\n-}>`\n-  width: 100%;\n-  background-color: ${({ $backgroundColor }) =>\n-    $backgroundColor || 'transparent'};\n-  position: relative;\n-  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    overflow-x: hidden;\n+const slideUp = keyframes`\n+  0% {\n+    transform: translateY(100%) translateX(var(--scroll-x, 0));\n+    opacity: 0;\n   }\n-`;\n-\n-const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n-  width: 100%;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-\n-  @media (min-width: ${Breakpoints.desktop}px) {\n-    max-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n-    min-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+  100% {\n+    transform: translateY(0) translateX(var(--scroll-x, 0));\n+    opacity: 1;\n   }\n `;\n \n-const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  bottom: 100px;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  display: flex;\n-  justify-content: center;\n-  z-index: 1001;\n-  pointer-events: none;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-`;\n-\n-const FloatingToggleButtonInner = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: flex-end;\n-  padding: 0 20px;\n-  pointer-events: auto;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    padding: 0 34px;\n-  }\n-`;\n-\n-const ArrowToggle = styled.div`\n-  background-color: #2a2135;\n-  border-radius: 50%;\n-  padding: 8px;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  border-color: #727171;\n-  border-width: 1px;\n-  border-style: solid;\n-`;\n-\n-const BottomFloatingBox = styled.div<{\n-  $isCollapsed: boolean;\n-  $scrollX: number;\n-}>`\n-  position: fixed;\n-  bottom: 0;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  background: ${({ $isCollapsed }) =>\n-    $isCollapsed\n-      ? 'transparent'\n-      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  padding: 0 32px;\n-  overflow: hidden;\n-  transition: height 0.3s ease, opacity 0.3s ease;\n-  height: 120px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    padding: 0 16px;\n-    min-width: 0;\n-  }\n-`;\n-\n-const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'center' : 'space-between'};\n-  align-items: center;\n-  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n-  padding: 20px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n-  }\n-`;\n-\n-const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n-  flex-direction: column;\n-  gap: 20px;\n-`;\n-\n-const LeftTitle = styled.div`\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-`;\n-\n-const LeftDescription = styled.div`\n-  font-size: 16px;\n-  line-height: 1.4;\n-  white-space: pre-line;\n-  color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    white-space: normal;\n-    /* font-size: 12px; */\n-  }\n-`;\n-\n-const RightRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 12px;\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-\n-  img {\n-    width: 50px;\n-    height: 50px;\n-    object-fit: contain;\n-  }\n-`;\n-\n-const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n-  sections,\n-  appBar,\n-}) => {\n-  const [scrollX, setScrollX] = useState(0);\n-  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n-  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n-  const [isCollapsed, setIsCollapsed] = useState(false);\n-  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n-\n-  const { lang } = useLang();\n-  const t = dictionary[lang].landingBottomBox;\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    const handleScroll = () => {\n-      setScrollX(window.scrollX || window.pageXOffset);\n-\n-      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n-        if (!ref || !sections[i].showFloatingBox) return false;\n-        const rect = ref.getBoundingClientRect();\n-        return (\n-          rect.top < window.innerHeight &&\n-          rect.bottom + 500 > window.innerHeight\n-        );\n-      });\n-\n-      setIsFloatingVisible(visibleIndex !== -1);\n-    };\n-\n-    window.addEventListener('scroll', handleScroll, { passive: true });\n-    handleScroll();\n-\n-    return () => window.removeEventListener('scroll', handleScroll);\n-  }, [sections]);\n-\n-  return (\n-    <>\n-      {appBar && (\n-        <FixedAppBarWrapper $scrollX={scrollX}>\n-          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n-        </FixedAppBarWrapper>\n-      )}\n-\n-      {sections.map(\n-        (\n-          {\n-            id,\n-            $backgroundColor,\n-            content,\n-            $zIndex,\n-            $isOverLayout,\n-            isWithAppBar,\n-          },\n-          idx\n-        ) => (\n-          <SectionWrapper\n-            key={idx}\n-            id={id}\n-            ref={(el) => {\n-              sectionRefs.current[idx] = el;\n-            }}\n-            $backgroundColor={$backgroundColor}\n-            $zIndex={$zIndex}\n-            $hideAppBar={isWithAppBar === false}\n-          >\n-            <ResponsiveView\n-              desktopView={\n-                <ContentWrapper $isOverLayout={$isOverLayout}>\n-                  {content}\n-                </ContentWrapper>\n-              }\n-              mobileView={\n-                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n-                  {content}\n-                </div>\n-              }\n-            />\n-          </SectionWrapper>\n-        )\n-      )}\n-\n-      {isFloatingVisible && (\n-        <>\n-          <FloatingToggleButton $scrollX={scrollX}>\n-            <FloatingToggleButtonInner>\n-              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n-                {isCollapsed ? (\n-                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n-                ) : (\n-                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n-                )}\n-              </ArrowToggle>\n-            </FloatingToggleButtonInner>\n-          </FloatingToggleButton>\n-\n-          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n-            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n-              <LeftColumn $isCollapsed={isCollapsed}>\n-                <LeftTitle>{t.title}</LeftTitle>\n-                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n-              </LeftColumn>\n-              <RightRow\n-  onClick={() =>\n-    window.open('/ai', '_blank', 'noopener,noreferrer')\n-  }\n-  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n->\n-  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n-  <IconWrapper>\n-  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 40, height: 40 }} />\n-  </IconWrapper>\n-</RightRow>\n-\n-\n-            </BoxInnerWrapper>\n-          </BottomFloatingBox>\n-        </>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default LandingBaseWrapper;\n-'use client';\n-\n-import styled, { keyframes } from 'styled-components';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import React, { useEffect, useRef, useState } from 'react';\n-import { ChevronDown, ChevronUp } from 'lucide-react';\n-import { useLang } from '@/contexts/LangContext';\n-import { dictionary } from '@/lib/i18n/lang';\n-\n-\n-\n // 텍스트 그라데이션 스켈레톤 애니메이션\n const textGradient = keyframes`\n   0% { background-position: 0% 50%; }\n   50% { background-position: 100% 50%; }\n@@ -555,33 +179,36 @@\n const BottomFloatingBox = styled.div<{\n   $isCollapsed: boolean;\n   $scrollX: number;\n }>`\n+  --scroll-x: ${({ $scrollX }) => `-${$scrollX}px`};\n   position: fixed;\n   bottom: 0;\n   left: 0;\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  transform: translateX(var(--scroll-x));\n   background: ${({ $isCollapsed }) =>\n     $isCollapsed\n       ? 'transparent'\n-      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n+      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n   padding: 0 32px;\n   overflow: hidden;\n-  transition: height 0.3s ease, opacity 0.3s ease;\n   height: 120px;\n+  opacity: 0;\n+  animation: ${slideUp} 0.4s ease-out forwards;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     padding: 0 16px;\n     min-width: 0;\n   }\n `;\n \n+\n const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n   width: 100%;\n   max-width: ${Breakpoints.desktop}px;\n   min-width: ${Breakpoints.desktop}px;\n@@ -769,390 +396,4 @@\n   );\n };\n \n export default LandingBaseWrapper;\n-'use client';\n-\n-import styled, { keyframes } from 'styled-components';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import React, { useEffect, useRef, useState } from 'react';\n-import { ChevronDown, ChevronUp } from 'lucide-react';\n-import { useLang } from '@/contexts/LangContext';\n-import { dictionary } from '@/lib/i18n/lang';\n-\n-\n-\n-// 텍스트 그라데이션 스켈레톤 애니메이션\n-const textGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  50% { background-position: 100% 50%; }\n-  100% { background-position: 0% 50%; }\n-`;\n-\n-const bgGradient = keyframes`\n-  0% { background-position: 0% 50%; }\n-  50% { background-position: 100% 50%; }\n-  100% { background-position: 0% 50%; }\n-`;\n-\n-// 텍스트 스켈레톤 스타일\n-const SkeletonText = styled.span`\n-  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 300% 100%;\n-  animation: ${textGradient} 3s ease-in-out infinite;\n-  background-clip: text;\n-  -webkit-background-clip: text;\n-  color: transparent;\n-  -webkit-text-fill-color: transparent;\n-  font-weight: 700;\n-`;\n-\n-const IconWrapper = styled.div`\n-  width: 50px;\n-  height: 50px;\n-  border-radius: 50%;\n-  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n-  background-size: 300% 100%;\n-  animation: ${bgGradient} 3s ease-in-out infinite;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-`;\n-\n-\n-\n-// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n-const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n-  text,\n-  isMobile,\n-}) => {\n-  const [firstLine] = text.split('\\n');\n-  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n-};\n-\n-interface LandingSection {\n-  id?: string;\n-  $backgroundColor?: string;\n-  content: React.ReactNode;\n-  $zIndex?: number;\n-  $isOverLayout?: boolean;\n-  isWithAppBar?: boolean;\n-  showFloatingBox?: boolean;\n-}\n-\n-interface LandingBaseWrapperProps {\n-  sections: LandingSection[];\n-  appBar?: React.ReactNode;\n-}\n-\n-const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  width: 100%;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-`;\n-\n-const AppBarContentWrapper = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-`;\n-\n-const SectionWrapper = styled.section<{\n-  $backgroundColor?: string;\n-  $zIndex?: number;\n-  $hideAppBar?: boolean;\n-}>`\n-  width: 100%;\n-  background-color: ${({ $backgroundColor }) =>\n-    $backgroundColor || 'transparent'};\n-  position: relative;\n-  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    overflow-x: hidden;\n-  }\n-`;\n-\n-const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n-  width: 100%;\n-  margin: 0 auto;\n-  box-sizing: border-box;\n-\n-  @media (min-width: ${Breakpoints.desktop}px) {\n-    max-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n-    min-width: ${({ $isOverLayout }) =>\n-      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n-  }\n-`;\n-\n-const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n-  position: fixed;\n-  bottom: 100px;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  display: flex;\n-  justify-content: center;\n-  z-index: 1001;\n-  pointer-events: none;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-`;\n-\n-const FloatingToggleButtonInner = styled.div`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: flex-end;\n-  padding: 0 20px;\n-  pointer-events: auto;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    padding: 0 34px;\n-  }\n-`;\n-\n-const ArrowToggle = styled.div`\n-  background-color: #2a2135;\n-  border-radius: 50%;\n-  padding: 8px;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  border-color: #727171;\n-  border-width: 1px;\n-  border-style: solid;\n-`;\n-\n-const BottomFloatingBox = styled.div<{\n-  $isCollapsed: boolean;\n-  $scrollX: number;\n-}>`\n-  position: fixed;\n-  bottom: 0;\n-  left: 0;\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n-  background: ${({ $isCollapsed }) =>\n-    $isCollapsed\n-      ? 'transparent'\n-      : 'linear-gradient(to top, #120f1c 100%, #262238 0%)'};\n-  z-index: 1000;\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  padding: 0 32px;\n-  overflow: hidden;\n-  transition: height 0.3s ease, opacity 0.3s ease;\n-  height: 120px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    padding: 0 16px;\n-    min-width: 0;\n-  }\n-`;\n-\n-const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n-  width: 100%;\n-  max-width: ${Breakpoints.desktop}px;\n-  min-width: ${Breakpoints.desktop}px;\n-  display: flex;\n-  justify-content: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'center' : 'space-between'};\n-  align-items: center;\n-  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n-  padding: 20px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    max-width: 100%;\n-    min-width: 0;\n-    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n-  }\n-`;\n-\n-const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n-  flex-direction: column;\n-  gap: 20px;\n-`;\n-\n-const LeftTitle = styled.div`\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-`;\n-\n-const LeftDescription = styled.div`\n-  font-size: 16px;\n-  line-height: 1.4;\n-  white-space: pre-line;\n-  color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    white-space: normal;\n-    /* font-size: 12px; */\n-  }\n-`;\n-\n-const RightRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  gap: 12px;\n-  font-size: 18px;\n-  font-weight: 700;\n-  color: #fff;\n-\n-  img {\n-    width: 50px;\n-    height: 50px;\n-    object-fit: contain;\n-  }\n-`;\n-\n-const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n-  sections,\n-  appBar,\n-}) => {\n-  const [scrollX, setScrollX] = useState(0);\n-  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n-  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n-  const [isCollapsed, setIsCollapsed] = useState(false);\n-  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n-\n-  const { lang } = useLang();\n-  const t = dictionary[lang].landingBottomBox;\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    const handleScroll = () => {\n-      setScrollX(window.scrollX || window.pageXOffset);\n-\n-      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n-        if (!ref || !sections[i].showFloatingBox) return false;\n-        const rect = ref.getBoundingClientRect();\n-        return (\n-          rect.top < window.innerHeight &&\n-          rect.bottom + 500 > window.innerHeight\n-        );\n-      });\n-\n-      setIsFloatingVisible(visibleIndex !== -1);\n-    };\n-\n-    window.addEventListener('scroll', handleScroll, { passive: true });\n-    handleScroll();\n-\n-    return () => window.removeEventListener('scroll', handleScroll);\n-  }, [sections]);\n-\n-  return (\n-    <>\n-      {appBar && (\n-        <FixedAppBarWrapper $scrollX={scrollX}>\n-          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n-        </FixedAppBarWrapper>\n-      )}\n-\n-      {sections.map(\n-        (\n-          {\n-            id,\n-            $backgroundColor,\n-            content,\n-            $zIndex,\n-            $isOverLayout,\n-            isWithAppBar,\n-          },\n-          idx\n-        ) => (\n-          <SectionWrapper\n-            key={idx}\n-            id={id}\n-            ref={(el) => {\n-              sectionRefs.current[idx] = el;\n-            }}\n-            $backgroundColor={$backgroundColor}\n-            $zIndex={$zIndex}\n-            $hideAppBar={isWithAppBar === false}\n-          >\n-            <ResponsiveView\n-              desktopView={\n-                <ContentWrapper $isOverLayout={$isOverLayout}>\n-                  {content}\n-                </ContentWrapper>\n-              }\n-              mobileView={\n-                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n-                  {content}\n-                </div>\n-              }\n-            />\n-          </SectionWrapper>\n-        )\n-      )}\n-\n-      {isFloatingVisible && (\n-        <>\n-          <FloatingToggleButton $scrollX={scrollX}>\n-            <FloatingToggleButtonInner>\n-              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n-                {isCollapsed ? (\n-                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n-                ) : (\n-                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n-                )}\n-              </ArrowToggle>\n-            </FloatingToggleButtonInner>\n-          </FloatingToggleButton>\n-\n-          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n-            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n-              <LeftColumn $isCollapsed={isCollapsed}>\n-                <LeftTitle>{t.title}</LeftTitle>\n-                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n-              </LeftColumn>\n-              <RightRow\n-  onClick={() =>\n-    window.open('/ai', '_blank', 'noopener,noreferrer')\n-  }\n-  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n->\n-  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n-  <IconWrapper>\n-  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 30, height: 30 }} />\n-  </IconWrapper>\n-</RightRow>\n-\n-\n-            </BoxInnerWrapper>\n-          </BottomFloatingBox>\n-        </>\n-      )}\n-    </>\n-  );\n-};\n-\n-export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748417179098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,414 @@\n+'use client';\n+\n+import styled, { keyframes } from 'styled-components';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import React, { useEffect, useRef, useState } from 'react';\n+import { ChevronDown, ChevronUp } from 'lucide-react';\n+import { useLang } from '@/contexts/LangContext';\n+import { dictionary } from '@/lib/i18n/lang';\n+\n+\n+const slideUp = keyframes`\n+  0% {\n+    transform: translateY(100%) translateX(var(--scroll-x, 0));\n+    opacity: 0;\n+  }\n+  100% {\n+    transform: translateY(0) translateX(var(--scroll-x, 0));\n+    opacity: 1;\n+  }\n+`;\n+\n+const slideDown = keyframes`\n+  0% {\n+    transform: translateY(-100%) translateX(var(--scroll-x, 0));\n+    opacity: 0;\n+  }\n+  100% {\n+    transform: translateY(0) translateX(var(--scroll-x, 0));\n+    opacity: 1;\n+  }\n+`;\n+\n+// 텍스트 그라데이션 스켈레톤 애니메이션\n+const textGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+const bgGradient = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+// 텍스트 스켈레톤 스타일\n+const SkeletonText = styled.span`\n+  background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${textGradient} 3s ease-in-out infinite;\n+  background-clip: text;\n+  -webkit-background-clip: text;\n+  color: transparent;\n+  -webkit-text-fill-color: transparent;\n+  font-weight: 700;\n+`;\n+\n+const IconWrapper = styled.div`\n+  width: 50px;\n+  height: 50px;\n+  border-radius: 50%;\n+  background: linear-gradient(135deg, #5708fb, #be83ea, #5708fb);\n+  background-size: 300% 100%;\n+  animation: ${bgGradient} 3s ease-in-out infinite;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+`;\n+\n+\n+\n+// ✅ ResponsiveDescription: isMobile props를 받아 조건 처리\n+const ResponsiveDescription: React.FC<{ text: string; isMobile: boolean }> = ({\n+  text,\n+  isMobile,\n+}) => {\n+  const [firstLine] = text.split('\\n');\n+  return <LeftDescription>{isMobile ? firstLine : text}</LeftDescription>;\n+};\n+\n+interface LandingSection {\n+  id?: string;\n+  $backgroundColor?: string;\n+  content: React.ReactNode;\n+  $zIndex?: number;\n+  $isOverLayout?: boolean;\n+  isWithAppBar?: boolean;\n+  showFloatingBox?: boolean;\n+}\n+\n+interface LandingBaseWrapperProps {\n+  sections: LandingSection[];\n+  appBar?: React.ReactNode;\n+}\n+\n+const FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  width: 100%;\n+  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+`;\n+\n+const AppBarContentWrapper = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+`;\n+\n+const SectionWrapper = styled.section<{\n+  $backgroundColor?: string;\n+  $zIndex?: number;\n+  $hideAppBar?: boolean;\n+}>`\n+  width: 100%;\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n+  position: relative;\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    overflow-x: hidden;\n+  }\n+`;\n+\n+const ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n+  width: 100%;\n+  margin: 0 auto;\n+  box-sizing: border-box;\n+\n+  @media (min-width: ${Breakpoints.desktop}px) {\n+    max-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+    min-width: ${({ $isOverLayout }) =>\n+      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n+  }\n+`;\n+\n+const FloatingToggleButton = styled.div<{ $scrollX: number }>`\n+  --scroll-x: ${({ $scrollX }) => `-${$scrollX}px`};\n+  position: fixed;\n+  bottom: 100px;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(var(--scroll-x));\n+  display: flex;\n+  justify-content: center;\n+  z-index: 1001;\n+  pointer-events: none;\n+  opacity: 0;\n+  animation: ${slideDown} 0.4s ease-out forwards;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+\n+\n+const FloatingToggleButtonInner = styled.div`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: flex-end;\n+  padding: 0 20px;\n+  pointer-events: auto;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    padding: 0 34px;\n+  }\n+`;\n+\n+const ArrowToggle = styled.div`\n+  background-color: #2a2135;\n+  border-radius: 50%;\n+  padding: 8px;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  border-color: #727171;\n+  border-width: 1px;\n+  border-style: solid;\n+`;\n+\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n+  --scroll-x: ${({ $scrollX }) => `-${$scrollX}px`};\n+  position: fixed;\n+  bottom: 0;\n+  left: 0;\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  transform: translateX(var(--scroll-x));\n+  background: ${({ $isCollapsed }) =>\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n+  z-index: 1000;\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  padding: 0 32px;\n+  overflow: hidden;\n+  height: 120px;\n+  opacity: 0;\n+  animation: ${slideUp} 0.4s ease-out forwards;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    padding: 0 16px;\n+    min-width: 0;\n+  }\n+`;\n+\n+\n+const BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n+  width: 100%;\n+  max-width: ${Breakpoints.desktop}px;\n+  min-width: ${Breakpoints.desktop}px;\n+  display: flex;\n+  justify-content: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'center' : 'space-between'};\n+  align-items: center;\n+  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n+  padding: 20px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    max-width: 100%;\n+    min-width: 0;\n+    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n+  }\n+`;\n+\n+const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n+  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')};\n+  flex-direction: column;\n+  gap: 20px;\n+`;\n+\n+const LeftTitle = styled.div`\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+`;\n+\n+const LeftDescription = styled.div`\n+  font-size: 16px;\n+  line-height: 1.4;\n+  white-space: pre-line;\n+  color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    white-space: normal;\n+    /* font-size: 12px; */\n+  }\n+`;\n+\n+const RightRow = styled.div`\n+  display: flex;\n+  align-items: center;\n+  gap: 12px;\n+  font-size: 18px;\n+  font-weight: 700;\n+  color: #fff;\n+\n+  img {\n+    width: 50px;\n+    height: 50px;\n+    object-fit: contain;\n+  }\n+`;\n+\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n+  const [scrollX, setScrollX] = useState(0);\n+  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n+  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n+  const [isCollapsed, setIsCollapsed] = useState(false);\n+  const [isMobile, setIsMobile] = useState(false); // ✅ 모바일 감지용 state\n+\n+  const { lang } = useLang();\n+  const t = dictionary[lang].landingBottomBox;\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleScroll = () => {\n+      setScrollX(window.scrollX || window.pageXOffset);\n+\n+      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n+        if (!ref || !sections[i].showFloatingBox) return false;\n+        const rect = ref.getBoundingClientRect();\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n+      });\n+\n+      setIsFloatingVisible(visibleIndex !== -1);\n+    };\n+\n+    window.addEventListener('scroll', handleScroll, { passive: true });\n+    handleScroll();\n+\n+    return () => window.removeEventListener('scroll', handleScroll);\n+  }, [sections]);\n+\n+  return (\n+    <>\n+      {appBar && (\n+        <FixedAppBarWrapper $scrollX={scrollX}>\n+          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n+        </FixedAppBarWrapper>\n+      )}\n+\n+      {sections.map(\n+        (\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n+          idx\n+        ) => (\n+          <SectionWrapper\n+            key={idx}\n+            id={id}\n+            ref={(el) => {\n+              sectionRefs.current[idx] = el;\n+            }}\n+            $backgroundColor={$backgroundColor}\n+            $zIndex={$zIndex}\n+            $hideAppBar={isWithAppBar === false}\n+          >\n+            <ResponsiveView\n+              desktopView={\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n+              }\n+              mobileView={\n+                <div style={{ width: '100%', boxSizing: 'border-box' }}>\n+                  {content}\n+                </div>\n+              }\n+            />\n+          </SectionWrapper>\n+        )\n+      )}\n+\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n+\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <ResponsiveDescription text={t.description} isMobile={isMobile} />\n+              </LeftColumn>\n+              <RightRow\n+  onClick={() =>\n+    window.open('/ai', '_blank', 'noopener,noreferrer')\n+  }\n+  style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+>\n+  {!isCollapsed && <SkeletonText>{t.aiButton}</SkeletonText>}\n+  <IconWrapper>\n+  <img src=\"/floating2.svg\" alt=\"AI Icon\" style={{ width: 40, height: 40 }} />\n+  </IconWrapper>\n+</RightRow>\n+\n+\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n+    </>\n+  );\n+};\n+\n+export default LandingBaseWrapper;\n"
                },
                {
                    "date": 1748417270730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,8 +271,9 @@\n   gap: 12px;\n   font-size: 18px;\n   font-weight: 700;\n   color: #fff;\n+  cursor: pointer;  \n \n   img {\n     width: 50px;\n     height: 50px;\n"
                }
            ],
            "date": 1747734383262,
            "name": "Commit-0",
            "content": "'use client';\n\nimport styled from 'styled-components';\nimport { Breakpoints } from '@/constants/layoutConstants';\nimport ResponsiveView from '@/layout/ResponsiveView';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/navigation'; \nimport { ChevronDown, ChevronUp } from 'lucide-react'; // 아이콘 사용\nimport { useLang } from '@/contexts/LangContext';\nimport { dictionary } from '@/lib/i18n/lang';\n\n\n\ninterface LandingSection {\n  id?: string;\n  $backgroundColor?: string;\n  content: React.ReactNode;\n  $zIndex?: number;\n  $isOverLayout?: boolean;\n  isWithAppBar?: boolean;\n  showFloatingBox?: boolean; // ✅ 추가\n}\n\ninterface LandingBaseWrapperProps {\n  sections: LandingSection[];\n  appBar?: React.ReactNode;\n}\n\nconst FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n`;\n\nconst AppBarContentWrapper = styled.div`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  margin: 0 auto;\n  box-sizing: border-box;\n  /* padding-left: 16px; */\n  /* padding-right: 16px; */\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    /* padding-left: 12px; */\n    /* padding-right: 12px; */\n  }\n`;\n\nconst SectionWrapper = styled.section<{\n  $backgroundColor?: string;\n  $zIndex?: number;\n  $hideAppBar?: boolean;\n}>`\n  width: 100%;\n  background-color: ${({ $backgroundColor }) => $backgroundColor || 'transparent'};\n  position: relative;\n  z-index: ${({ $hideAppBar, $zIndex }) =>\n    $hideAppBar ? 999 : $zIndex ?? 1};\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    overflow-x: hidden;\n  }\n`;\n\nconst ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n  width: 100%;\n  margin: 0 auto;\n  box-sizing: border-box;\n\n  @media (min-width: ${Breakpoints.desktop}px) {\n    max-width: ${({ $isOverLayout }) =>\n      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n    min-width: ${({ $isOverLayout }) =>\n      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n  }\n`;\nconst FloatingToggleButton = styled.div<{ $scrollX: number }>`\n  position: fixed;\n  bottom: 100px;\n  left: 0;\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n  display: flex;\n  justify-content: center;\n  z-index: 1001;\n  pointer-events: none;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    min-width: 100%; // ✅ 모바일에서 최소 너비 해제\n  }\n`;\n\nconst FloatingToggleButtonInner = styled.div`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n  display: flex;\n  justify-content: flex-end;\n  padding: 0 20px;\n  pointer-events: auto;\n\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    max-width: 100%;\n    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n    padding: 0 34px;\n  }\n`;\n\n\nconst ArrowToggle = styled.div`\n  background-color: #2a2135;\n  border-radius: 50%;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-color: #727171;;\n  border-width: 1px;\n  border-style: solid;\n`;\n\n\n\nconst BottomFloatingBox = styled.div<{ $isCollapsed: boolean; $scrollX: number }>`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px;\n  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n  background: ${({ $isCollapsed }) =>\n    $isCollapsed ? 'transparent' : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 32px;\n  overflow: hidden;\n  transition: height 0.3s ease, opacity 0.3s ease;\n  height: ${({ $isCollapsed }) => ($isCollapsed ? '120px' : '120px')};\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    padding: 0 16px;\n    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n  }\n`;\nconst BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑 고정\n  display: flex;\n  justify-content: ${({ $isCollapsed }) =>\n    $isCollapsed ? 'center' : 'space-between'};\n  align-items: center;\n  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n  padding: 20px;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    max-width: 100%;\n    min-width: 0; // ✅ 모바일에서 제한 없음\n    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n  }\n`;\n\n\n\nconst LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')}; // 접힌 상태일 때 숨김\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst LeftTitle = styled.div`\n  font-size: 18px;\n  font-weight: 700;\n  color: #fff;\n`;\n\nconst LeftDescription = styled.div`\n  font-size: 16px;\n  line-height: 1.4;\n  white-space: pre-line;\n  color: #fff;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    display: none; // ✅ 모바일에서는 숨김\n  }\n`;\n\nconst RightRow = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  font-size: 18px;\n  font-weight: 700;\n\n  color: #fff;\n\n  img {\n    width: 50px;\n    height: 50px;\n    object-fit: contain;\n  }\n`;\n\n\n\nconst LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({ sections, appBar }) => {\n  const [scrollX, setScrollX] = useState(0);\n  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const { lang } = useLang();\n  const t = dictionary[lang].landingBottomBox;\n  \n\n\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollX(window.scrollX || window.pageXOffset);\n\n      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n        if (!ref || !sections[i].showFloatingBox) return false;\n        const rect = ref.getBoundingClientRect();\n        return rect.top  < window.innerHeight && rect.bottom +500 > window.innerHeight;\n      });\n      \n\n      setIsFloatingVisible(visibleIndex !== -1);\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    handleScroll(); // 초기 체크\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [sections]);\n\n  return (\n    <>\n      {appBar && (\n        <FixedAppBarWrapper $scrollX={scrollX}>\n          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n        </FixedAppBarWrapper>\n      )}\n\n      {sections.map(\n        (\n          { id, $backgroundColor, content, $zIndex, $isOverLayout, isWithAppBar },\n          idx\n        ) => (\n          <SectionWrapper\n            key={idx}\n            id={id}\n            ref={(el) => {\n              sectionRefs.current[idx] = el;\n            }}\n            \n            $backgroundColor={$backgroundColor}\n            $zIndex={$zIndex}\n            $hideAppBar={isWithAppBar === false}\n          >\n            <ResponsiveView\n              desktopView={\n                <ContentWrapper $isOverLayout={$isOverLayout}>{content}</ContentWrapper>\n              }\n              mobileView={\n                <div\n                  style={{\n                    width: '100%',\n                    boxSizing: 'border-box',\n                  }}\n                >\n                  {content}\n                </div>\n              }\n            />\n          </SectionWrapper>\n        )\n      )}\n{isFloatingVisible && (\n  <>\n    <FloatingToggleButton $scrollX={scrollX}>\n  <FloatingToggleButtonInner>\n    <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n      {isCollapsed ? <ChevronUp color=\"white\" width={\"32\"} height={\"32\"} /> : <ChevronDown color=\"white\"  width={\"32\"} height={\"32\"} />}\n    </ArrowToggle>\n  </FloatingToggleButtonInner>\n</FloatingToggleButton>\n\n<BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n  <BoxInnerWrapper $isCollapsed={isCollapsed}>\n    <LeftColumn $isCollapsed={isCollapsed}>\n      <LeftTitle>{t.title}</LeftTitle>\n      <LeftDescription>{t.description}</LeftDescription>\n    </LeftColumn>\n    <RightRow\n      onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n      style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n    >\n      {!isCollapsed && <span>{t.aiButton}</span>}\n      <img src=\"/floating.svg\" alt=\"AI Icon\" />\n    </RightRow>\n  </BoxInnerWrapper>\n</BottomFloatingBox>\n\n  </>\n)}\n\n\n\n\n    </>\n  );\n};\n\nexport default LandingBaseWrapper;\n"
        }
    ]
}