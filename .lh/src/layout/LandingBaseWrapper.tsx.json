{
    "sourceFile": "src/layout/LandingBaseWrapper.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1747734383262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747736277220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,12 @@\n import styled from 'styled-components';\n import { Breakpoints } from '@/constants/layoutConstants';\n import ResponsiveView from '@/layout/ResponsiveView';\n import React, { useEffect, useRef, useState } from 'react';\n-import { useRouter } from 'next/navigation'; \n import { ChevronDown, ChevronUp } from 'lucide-react'; // 아이콘 사용\n import { useLang } from '@/contexts/LangContext';\n import { dictionary } from '@/lib/i18n/lang';\n \n-\n-\n interface LandingSection {\n   id?: string;\n   $backgroundColor?: string;\n   content: React.ReactNode;\n@@ -56,12 +53,12 @@\n   $zIndex?: number;\n   $hideAppBar?: boolean;\n }>`\n   width: 100%;\n-  background-color: ${({ $backgroundColor }) => $backgroundColor || 'transparent'};\n+  background-color: ${({ $backgroundColor }) =>\n+    $backgroundColor || 'transparent'};\n   position: relative;\n-  z-index: ${({ $hideAppBar, $zIndex }) =>\n-    $hideAppBar ? 999 : $zIndex ?? 1};\n+  z-index: ${({ $hideAppBar, $zIndex }) => ($hideAppBar ? 999 : $zIndex ?? 1)};\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     overflow-x: hidden;\n   }\n@@ -104,41 +101,42 @@\n   justify-content: flex-end;\n   padding: 0 20px;\n   pointer-events: auto;\n \n-\n   @media (max-width: ${Breakpoints.mobile}px) {\n     max-width: 100%;\n     min-width: 0; // ✅ 모바일에서 최소 너비 해제\n     padding: 0 34px;\n   }\n `;\n \n-\n const ArrowToggle = styled.div`\n   background-color: #2a2135;\n   border-radius: 50%;\n   padding: 8px;\n   cursor: pointer;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n-  border-color: #727171;;\n+  border-color: #727171;\n   border-width: 1px;\n   border-style: solid;\n `;\n \n-\n-\n-const BottomFloatingBox = styled.div<{ $isCollapsed: boolean; $scrollX: number }>`\n+const BottomFloatingBox = styled.div<{\n+  $isCollapsed: boolean;\n+  $scrollX: number;\n+}>`\n   position: fixed;\n   bottom: 0;\n   left: 0;\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n   background: ${({ $isCollapsed }) =>\n-    $isCollapsed ? 'transparent' : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n+    $isCollapsed\n+      ? 'transparent'\n+      : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n   z-index: 1000;\n   display: flex;\n   justify-content: center;\n   align-items: center;\n@@ -169,12 +167,11 @@\n     gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n   }\n `;\n \n-\n-\n const LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n-  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')}; // 접힌 상태일 때 숨김\n+  display: ${({ $isCollapsed }) =>\n+    $isCollapsed ? 'none' : 'flex'}; // 접힌 상태일 때 숨김\n   flex-direction: column;\n   gap: 20px;\n `;\n \n@@ -182,17 +179,19 @@\n   font-size: 18px;\n   font-weight: 700;\n   color: #fff;\n `;\n-\n const LeftDescription = styled.div`\n   font-size: 16px;\n   line-height: 1.4;\n   white-space: pre-line;\n   color: #fff;\n-\n+ \n   @media (max-width: ${Breakpoints.mobile}px) {\n-    display: none; // ✅ 모바일에서는 숨김\n+    display: -webkit-box;\n+    -webkit-box-orient: vertical;\n+    white-space: normal; /* ✅ pre-line 해제 필요 */\n+    font-size: 12px;\n   }\n `;\n \n const RightRow = styled.div`\n@@ -211,33 +210,33 @@\n     object-fit: contain;\n   }\n `;\n \n-\n-\n-const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({ sections, appBar }) => {\n+const LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({\n+  sections,\n+  appBar,\n+}) => {\n   const [scrollX, setScrollX] = useState(0);\n   const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n   const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n \n   const [isCollapsed, setIsCollapsed] = useState(false);\n \n   const { lang } = useLang();\n   const t = dictionary[lang].landingBottomBox;\n-  \n \n-\n-\n   useEffect(() => {\n     const handleScroll = () => {\n       setScrollX(window.scrollX || window.pageXOffset);\n \n       const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n         if (!ref || !sections[i].showFloatingBox) return false;\n         const rect = ref.getBoundingClientRect();\n-        return rect.top  < window.innerHeight && rect.bottom +500 > window.innerHeight;\n+        return (\n+          rect.top < window.innerHeight &&\n+          rect.bottom + 500 > window.innerHeight\n+        );\n       });\n-      \n \n       setIsFloatingVisible(visibleIndex !== -1);\n     };\n \n@@ -256,25 +255,33 @@\n       )}\n \n       {sections.map(\n         (\n-          { id, $backgroundColor, content, $zIndex, $isOverLayout, isWithAppBar },\n+          {\n+            id,\n+            $backgroundColor,\n+            content,\n+            $zIndex,\n+            $isOverLayout,\n+            isWithAppBar,\n+          },\n           idx\n         ) => (\n           <SectionWrapper\n             key={idx}\n             id={id}\n             ref={(el) => {\n               sectionRefs.current[idx] = el;\n             }}\n-            \n             $backgroundColor={$backgroundColor}\n             $zIndex={$zIndex}\n             $hideAppBar={isWithAppBar === false}\n           >\n             <ResponsiveView\n               desktopView={\n-                <ContentWrapper $isOverLayout={$isOverLayout}>{content}</ContentWrapper>\n+                <ContentWrapper $isOverLayout={$isOverLayout}>\n+                  {content}\n+                </ContentWrapper>\n               }\n               mobileView={\n                 <div\n                   style={{\n@@ -288,40 +295,41 @@\n             />\n           </SectionWrapper>\n         )\n       )}\n-{isFloatingVisible && (\n-  <>\n-    <FloatingToggleButton $scrollX={scrollX}>\n-  <FloatingToggleButtonInner>\n-    <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n-      {isCollapsed ? <ChevronUp color=\"white\" width={\"32\"} height={\"32\"} /> : <ChevronDown color=\"white\"  width={\"32\"} height={\"32\"} />}\n-    </ArrowToggle>\n-  </FloatingToggleButtonInner>\n-</FloatingToggleButton>\n+      {isFloatingVisible && (\n+        <>\n+          <FloatingToggleButton $scrollX={scrollX}>\n+            <FloatingToggleButtonInner>\n+              <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n+                {isCollapsed ? (\n+                  <ChevronUp color=\"white\" width={'32'} height={'32'} />\n+                ) : (\n+                  <ChevronDown color=\"white\" width={'32'} height={'32'} />\n+                )}\n+              </ArrowToggle>\n+            </FloatingToggleButtonInner>\n+          </FloatingToggleButton>\n \n-<BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n-  <BoxInnerWrapper $isCollapsed={isCollapsed}>\n-    <LeftColumn $isCollapsed={isCollapsed}>\n-      <LeftTitle>{t.title}</LeftTitle>\n-      <LeftDescription>{t.description}</LeftDescription>\n-    </LeftColumn>\n-    <RightRow\n-      onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n-      style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n-    >\n-      {!isCollapsed && <span>{t.aiButton}</span>}\n-      <img src=\"/floating.svg\" alt=\"AI Icon\" />\n-    </RightRow>\n-  </BoxInnerWrapper>\n-</BottomFloatingBox>\n-\n-  </>\n-)}\n-\n-\n-\n-\n+          <BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n+            <BoxInnerWrapper $isCollapsed={isCollapsed}>\n+              <LeftColumn $isCollapsed={isCollapsed}>\n+                <LeftTitle>{t.title}</LeftTitle>\n+                <LeftDescription>{t.description}</LeftDescription>\n+              </LeftColumn>\n+              <RightRow\n+                onClick={() =>\n+                  window.open('/ai', '_blank', 'noopener,noreferrer')\n+                }\n+                style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n+              >\n+                {!isCollapsed && <span>{t.aiButton}</span>}\n+                <img src=\"/floating.svg\" alt=\"AI Icon\" />\n+              </RightRow>\n+            </BoxInnerWrapper>\n+          </BottomFloatingBox>\n+        </>\n+      )}\n     </>\n   );\n };\n \n"
                }
            ],
            "date": 1747734383262,
            "name": "Commit-0",
            "content": "'use client';\n\nimport styled from 'styled-components';\nimport { Breakpoints } from '@/constants/layoutConstants';\nimport ResponsiveView from '@/layout/ResponsiveView';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/navigation'; \nimport { ChevronDown, ChevronUp } from 'lucide-react'; // 아이콘 사용\nimport { useLang } from '@/contexts/LangContext';\nimport { dictionary } from '@/lib/i18n/lang';\n\n\n\ninterface LandingSection {\n  id?: string;\n  $backgroundColor?: string;\n  content: React.ReactNode;\n  $zIndex?: number;\n  $isOverLayout?: boolean;\n  isWithAppBar?: boolean;\n  showFloatingBox?: boolean; // ✅ 추가\n}\n\ninterface LandingBaseWrapperProps {\n  sections: LandingSection[];\n  appBar?: React.ReactNode;\n}\n\nconst FixedAppBarWrapper = styled.div<{ $scrollX: number }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  transform: translateX(${({ $scrollX }) => -$scrollX}px);\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n`;\n\nconst AppBarContentWrapper = styled.div`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  margin: 0 auto;\n  box-sizing: border-box;\n  /* padding-left: 16px; */\n  /* padding-right: 16px; */\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    /* padding-left: 12px; */\n    /* padding-right: 12px; */\n  }\n`;\n\nconst SectionWrapper = styled.section<{\n  $backgroundColor?: string;\n  $zIndex?: number;\n  $hideAppBar?: boolean;\n}>`\n  width: 100%;\n  background-color: ${({ $backgroundColor }) => $backgroundColor || 'transparent'};\n  position: relative;\n  z-index: ${({ $hideAppBar, $zIndex }) =>\n    $hideAppBar ? 999 : $zIndex ?? 1};\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    overflow-x: hidden;\n  }\n`;\n\nconst ContentWrapper = styled.div<{ $isOverLayout?: boolean }>`\n  width: 100%;\n  margin: 0 auto;\n  box-sizing: border-box;\n\n  @media (min-width: ${Breakpoints.desktop}px) {\n    max-width: ${({ $isOverLayout }) =>\n      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n    min-width: ${({ $isOverLayout }) =>\n      $isOverLayout ? '100%' : `${Breakpoints.desktop}px`};\n  }\n`;\nconst FloatingToggleButton = styled.div<{ $scrollX: number }>`\n  position: fixed;\n  bottom: 100px;\n  left: 0;\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n  display: flex;\n  justify-content: center;\n  z-index: 1001;\n  pointer-events: none;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    min-width: 100%; // ✅ 모바일에서 최소 너비 해제\n  }\n`;\n\nconst FloatingToggleButtonInner = styled.div`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑일 땐 고정\n  display: flex;\n  justify-content: flex-end;\n  padding: 0 20px;\n  pointer-events: auto;\n\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    max-width: 100%;\n    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n    padding: 0 34px;\n  }\n`;\n\n\nconst ArrowToggle = styled.div`\n  background-color: #2a2135;\n  border-radius: 50%;\n  padding: 8px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-color: #727171;;\n  border-width: 1px;\n  border-style: solid;\n`;\n\n\n\nconst BottomFloatingBox = styled.div<{ $isCollapsed: boolean; $scrollX: number }>`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px;\n  transform: translateX(${({ $scrollX }) => -$scrollX}px); // ✅ 스크롤 반영\n  background: ${({ $isCollapsed }) =>\n    $isCollapsed ? 'transparent' : 'linear-gradient(to top, #2a2135 100%, #625791 0%)'};\n  z-index: 1000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 32px;\n  overflow: hidden;\n  transition: height 0.3s ease, opacity 0.3s ease;\n  height: ${({ $isCollapsed }) => ($isCollapsed ? '120px' : '120px')};\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    padding: 0 16px;\n    min-width: 0; // ✅ 모바일에서 최소 너비 해제\n  }\n`;\nconst BoxInnerWrapper = styled.div<{ $isCollapsed: boolean }>`\n  width: 100%;\n  max-width: ${Breakpoints.desktop}px;\n  min-width: ${Breakpoints.desktop}px; // ✅ 데스크탑 고정\n  display: flex;\n  justify-content: ${({ $isCollapsed }) =>\n    $isCollapsed ? 'center' : 'space-between'};\n  align-items: center;\n  gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '32px')};\n  padding: 20px;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    max-width: 100%;\n    min-width: 0; // ✅ 모바일에서 제한 없음\n    gap: ${({ $isCollapsed }) => ($isCollapsed ? '0' : '16px')};\n  }\n`;\n\n\n\nconst LeftColumn = styled.div<{ $isCollapsed: boolean }>`\n  display: ${({ $isCollapsed }) => ($isCollapsed ? 'none' : 'flex')}; // 접힌 상태일 때 숨김\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst LeftTitle = styled.div`\n  font-size: 18px;\n  font-weight: 700;\n  color: #fff;\n`;\n\nconst LeftDescription = styled.div`\n  font-size: 16px;\n  line-height: 1.4;\n  white-space: pre-line;\n  color: #fff;\n\n  @media (max-width: ${Breakpoints.mobile}px) {\n    display: none; // ✅ 모바일에서는 숨김\n  }\n`;\n\nconst RightRow = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  font-size: 18px;\n  font-weight: 700;\n\n  color: #fff;\n\n  img {\n    width: 50px;\n    height: 50px;\n    object-fit: contain;\n  }\n`;\n\n\n\nconst LandingBaseWrapper: React.FC<LandingBaseWrapperProps> = ({ sections, appBar }) => {\n  const [scrollX, setScrollX] = useState(0);\n  const sectionRefs = useRef<(HTMLElement | null)[]>([]);\n  const [isFloatingVisible, setIsFloatingVisible] = useState(false);\n\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const { lang } = useLang();\n  const t = dictionary[lang].landingBottomBox;\n  \n\n\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollX(window.scrollX || window.pageXOffset);\n\n      const visibleIndex = sectionRefs.current.findIndex((ref, i) => {\n        if (!ref || !sections[i].showFloatingBox) return false;\n        const rect = ref.getBoundingClientRect();\n        return rect.top  < window.innerHeight && rect.bottom +500 > window.innerHeight;\n      });\n      \n\n      setIsFloatingVisible(visibleIndex !== -1);\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    handleScroll(); // 초기 체크\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [sections]);\n\n  return (\n    <>\n      {appBar && (\n        <FixedAppBarWrapper $scrollX={scrollX}>\n          <AppBarContentWrapper>{appBar}</AppBarContentWrapper>\n        </FixedAppBarWrapper>\n      )}\n\n      {sections.map(\n        (\n          { id, $backgroundColor, content, $zIndex, $isOverLayout, isWithAppBar },\n          idx\n        ) => (\n          <SectionWrapper\n            key={idx}\n            id={id}\n            ref={(el) => {\n              sectionRefs.current[idx] = el;\n            }}\n            \n            $backgroundColor={$backgroundColor}\n            $zIndex={$zIndex}\n            $hideAppBar={isWithAppBar === false}\n          >\n            <ResponsiveView\n              desktopView={\n                <ContentWrapper $isOverLayout={$isOverLayout}>{content}</ContentWrapper>\n              }\n              mobileView={\n                <div\n                  style={{\n                    width: '100%',\n                    boxSizing: 'border-box',\n                  }}\n                >\n                  {content}\n                </div>\n              }\n            />\n          </SectionWrapper>\n        )\n      )}\n{isFloatingVisible && (\n  <>\n    <FloatingToggleButton $scrollX={scrollX}>\n  <FloatingToggleButtonInner>\n    <ArrowToggle onClick={() => setIsCollapsed((prev) => !prev)}>\n      {isCollapsed ? <ChevronUp color=\"white\" width={\"32\"} height={\"32\"} /> : <ChevronDown color=\"white\"  width={\"32\"} height={\"32\"} />}\n    </ArrowToggle>\n  </FloatingToggleButtonInner>\n</FloatingToggleButton>\n\n<BottomFloatingBox $isCollapsed={isCollapsed} $scrollX={scrollX}>\n  <BoxInnerWrapper $isCollapsed={isCollapsed}>\n    <LeftColumn $isCollapsed={isCollapsed}>\n      <LeftTitle>{t.title}</LeftTitle>\n      <LeftDescription>{t.description}</LeftDescription>\n    </LeftColumn>\n    <RightRow\n      onClick={() => window.open('/ai', '_blank', 'noopener,noreferrer')}\n      style={{ marginLeft: isCollapsed ? 'auto' : undefined }}\n    >\n      {!isCollapsed && <span>{t.aiButton}</span>}\n      <img src=\"/floating.svg\" alt=\"AI Icon\" />\n    </RightRow>\n  </BoxInnerWrapper>\n</BottomFloatingBox>\n\n  </>\n)}\n\n\n\n\n    </>\n  );\n};\n\nexport default LandingBaseWrapper;\n"
        }
    ]
}