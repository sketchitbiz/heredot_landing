{
    "sourceFile": "src/block/AppWebBlock.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747737858236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747737858236,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { Home, Search, User, Bell } from 'lucide-react';\nimport gsap from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport CustomBlockLayout from '@/customComponents/CustomBlockLayout';\nimport { AppColors } from '@/styles/colors';\nimport { AppTextStyles } from '@/styles/textStyles';\nimport { Breakpoints } from '@/constants/layoutConstants';\n\ninterface AppBlockProps {\n  title: string;\n  description: string;\n}\n\ngsap.registerPlugin(ScrollTrigger);\n\n// 스켈레톤 반짝이\nconst shine = keyframes`\n  0% { background-position: -200px 0; }\n  100% { background-position: calc(200px + 100%) 0; }\n`;\n\nconst StyledTitle = styled.h2`\n  font-size: 32px; /* 원하는 폰트 크기 */\n  color: ${AppColors.primary}; /* 원하는 색상 */\n  line-height: 1.5;\n  margin-bottom: 16px;\n`;\n\nconst StyledDescription = styled.p`\n  font-size: 18px; /* 원하는 폰트 크기 */\n  color: ${AppColors.onBackground}; /* 원하는 색상 */\n  line-height: 1.6;\n`;\n\nconst TopTrigger = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  pointer-events: none;\n`;\n\nconst BottomTrigger = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  pointer-events: none;\n`;\n\nconst AppBlockWrapper = styled.div`\n  width: 100%;\n  position: relative;\n  perspective: 1200px;\n`;\n\nconst PhoneFrame = styled.div<{ $isFlat: boolean; $painted: boolean }>`\n  width: 330px;\n  height: 640px;\n  border-radius: 32px;\n  border: 8px solid white;\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);\n  background: transparent;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) rotateX(-20deg) rotateY(-65deg);\n  pointer-events: none;\n  overflow: hidden;\n\n  &::after {\n    content: '';\n    position: absolute;\n    inset: 0;\n    background: white;\n    z-index: 1;\n    transform: ${({ $painted }) =>\n      $painted ? 'scale(1) translate(0, 0)' : 'scale(0) translate(50%, 50%)'};\n    transform-origin: bottom right;\n    transition: transform 1s ease-out;\n  }\n`;\n\nconst StackLayer = styled.div<{ $translateZ: number; $topOffset: number }>`\n  width: 300px;\n  position: absolute;\n  top: ${({ $topOffset }) => `calc(50% + ${$topOffset}px)`};\n  left: 50%;\n  transform-style: preserve-3d;\n  transform: translate(-50%, -50%) rotateX(-20deg) rotateY(-65deg) translateZ(${({ $translateZ }) => `${$translateZ}px`});\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AppBar = styled.div`\n  width: 100%;\n  height: 48px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 12px;\n  font-weight: bold;\n  font-size: 18px;\n`;\n\nconst Icons = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n`;\n\nconst SearchBar = styled.div`\n  width: 100%;\n  height: 40px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  padding: 0 12px;\n  display: flex;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n`;\n\n\n\nconst ChipsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n`;\n\nconst Chip = styled.div<{ $highlight?: boolean }>`\n  padding: 6px 12px;\n  background: ${({ $highlight }) => ($highlight ? '#d1e8ff' : '#eee')};\n  color: ${({ $highlight }) => ($highlight ? '#005bbb' : '#555')};\n  border-radius: 16px;\n  font-size: 12px;\n`;\n\nconst Card = styled.div`\n  width: 100%;\n  height: 300px;\n  border-radius: 16px;\n  border: 1px solid #ccc;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst CardImage = styled.div`\n  width: 100%;\n  height: 160px;\n  background: #ddd;\n`;\n\nconst Wrapper = styled.div`\n  min-width: ${Breakpoints.desktop}px; \n  background-color: ${AppColors.primary};\n\n\n`;\n\nconst CardContent = styled.div`\n  flex: 1;\n  padding: 12px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nconst SkeletonLine = styled.div<{ $animate?: boolean }>`\n  width: 100%;\n  height: 14px;\n  background: #eee;\n  border-radius: 8px;\n  ${({ $animate }) =>\n    $animate &&\n    css`\n      background: linear-gradient(90deg, #eee 25%, #ddd 50%, #eee 75%);\n      background-size: 200px 100%;\n      animation: ${shine} 1.5s infinite;\n    `}\n`;\n\nconst BottomNavContainer = styled(StackLayer)<{ $highlight?: boolean }>`\n  height: 56px;\n  border-radius: 16px;\n  background: ${({ $highlight }) => ($highlight ? '#d1e8ff' : '#f2f2f2')};\n`;\n\nconst AppWebBlock: React.FC<AppBlockProps> = ({ title, description }) => {\n  const sectionRef = useRef<HTMLDivElement>(null);\n  const phoneRef = useRef<HTMLDivElement>(null);\n  const appBarRef = useRef<HTMLDivElement>(null);\n  const searchBarRef = useRef<HTMLDivElement>(null);\n  const chipsRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const bottomNavRef = useRef<HTMLDivElement>(null);\n  const topTriggerRef = useRef<HTMLDivElement>(null);\n  const bottomTriggerRef = useRef<HTMLDivElement>(null);\n\n  const [isFlat, setIsFlat] = useState(false);\n  const [painted, setPainted] = useState(false);\n  const canPlayRef = useRef(false);\n\n      const [isMobile, setIsMobile] = useState(false);\n    \n      useEffect(() => {\n        const checkMobile = () => {\n          setIsMobile(window.innerWidth < Breakpoints.mobile);\n        };\n        checkMobile();\n        window.addEventListener('resize', checkMobile);\n        return () => window.removeEventListener('resize', checkMobile);\n      }, []);\n\n  const layers = [\n    { ref: appBarRef, translateZ: -200 },\n    { ref: searchBarRef, translateZ: 100 },\n    { ref: chipsRef, translateZ: 150 },\n    { ref: cardRef, translateZ: -300 },\n    { ref: bottomNavRef, translateZ: -200 },\n  ];\n\n  useEffect(() => {\n    if (isMobile || !sectionRef.current || !phoneRef.current || !topTriggerRef.current || !bottomTriggerRef.current) return;\n\n    const resetState = async () => {\n      if (phoneRef.current) {\n        gsap.set(phoneRef.current, {\n          clearProps: 'transform',\n          scale: 1,\n          rotateX: -20,\n          rotateY: -65,\n          xPercent: -50,\n          yPercent: -50,\n        });\n      }\n      layers.forEach(({ ref }) => {\n        if (ref.current) {\n          gsap.set(ref.current, {\n            clearProps: 'transform',\n            rotateX: -20,\n            rotateY: -65,\n            xPercent: -50,\n            yPercent: -50,\n          });\n        }\n      });\n      setIsFlat(false);\n      setPainted(false);\n      await new Promise((resolve) => requestAnimationFrame(() => resolve(undefined)));\n    };\n\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: sectionRef.current,\n        start: 'top top',\n        end: '+=1000',\n        pin: true,\n      // pinType: 'transform',\n\n        scrub: false,\n        onEnter: async () => {\n          if (canPlayRef.current) {\n            canPlayRef.current = false;\n            await resetState();\n            tl.restart();\n          }\n        },\n        onEnterBack: async () => {\n          if (canPlayRef.current) {\n            canPlayRef.current = false;\n            await resetState();\n            tl.restart();\n          }\n        },\n      },\n    });\n\n    tl.fromTo(\n      phoneRef.current,\n      { scale: 0.5, y: -200 },\n      { scale: 1, y: 0, duration: 0.5, ease: 'power3.out' },\n      0\n    );\n\n    layers.forEach(({ ref }, idx) => {\n      if (ref.current) {\n        tl.fromTo(\n          ref.current,\n          { y: -500, opacity: 0 },\n          { y: 0, opacity: 1, duration: 0.3, ease: 'power3.out' },\n          idx * 0.2\n        );\n      }\n    });\n\n    const lastLayerDelay = (layers.length - 1) * 0.2 + 0.3;\n\n    tl.add(() => {\n      layers.forEach(({ ref }) => {\n        if (ref.current) {\n          gsap.to(ref.current, {\n            duration: 0.5,\n            ease: 'power3.out',\n            transform: `translate(-50%, -50%) rotateX(-20deg) rotateY(-65deg) translateZ(0px)`,\n          });\n        }\n      });\n    }, lastLayerDelay + 0.1);\n\n    tl.add(() => {\n      layers.forEach(({ ref }) => {\n        if (ref.current) {\n          gsap.to(ref.current, {\n            duration: 0.5,\n            ease: 'power3.out',\n            transform: `translate(-50%, -50%) rotateX(0deg) rotateY(0deg) translateZ(0px)`,\n          });\n        }\n      });\n      if (phoneRef.current) {\n        gsap.to(phoneRef.current, {\n          duration: 0.5,\n          ease: 'power3.out',\n          transform: 'translate(-50%, -50%) rotateX(0deg) rotateY(0deg)',\n          onComplete: () => setIsFlat(true),\n        });\n      }\n    }, lastLayerDelay + 0.2 + 0.5);\n\n    tl.add(() => {\n      setPainted(true);\n    }, lastLayerDelay + 0.9);\n\n    const topLeaveTrigger = ScrollTrigger.create({\n      trigger: topTriggerRef.current,\n      start: 'top bottom',\n      onLeaveBack: () => {\n        canPlayRef.current = true;\n        resetState();\n      },\n    });\n\n    const bottomLeaveTrigger = ScrollTrigger.create({\n      trigger: bottomTriggerRef.current,\n      start: 'bottom+=3000 top',\n      onLeave: () => {\n        canPlayRef.current = true;\n        resetState();\n      },\n    });\n\n    return () => {\n      tl.kill();\n      topLeaveTrigger.kill();\n      bottomLeaveTrigger.kill();\n    };\n  }, []);\n\n  return (\n    <Wrapper>\n    <section ref={sectionRef} style={{ position: 'relative', overflow: 'hidden' }}>\n      <TopTrigger ref={topTriggerRef} />\n      <CustomBlockLayout>\n        <CustomBlockLayout.Left>\n          <h2 dangerouslySetInnerHTML={{ __html: title.replace(/\\n/g, '<br/>') }} />\n          <p dangerouslySetInnerHTML={{ __html: description.replace(/\\n/g, '<br/>') }} />\n        </CustomBlockLayout.Left>\n\n        <CustomBlockLayout.Right>\n          <AppBlockWrapper>\n            <PhoneFrame ref={phoneRef} $isFlat={isFlat} $painted={painted} />\n            <StackLayer ref={appBarRef} $translateZ={-200} $topOffset={-280}>\n              <AppBar>\n                <span style={{ color: painted ? '#000' : '#fff' }}>HereDot.</span>\n                <Icons>\n                  <Bell size={20} color={painted ? '#000' : '#fff'} />\n                  <User size={20} color={painted ? '#000' : '#fff'} />\n                </Icons>\n              </AppBar>\n            </StackLayer>\n\n            <StackLayer ref={searchBarRef} $translateZ={100} $topOffset={-200}>\n              <SearchBar>\n                <Search size={18} />\n                <span style={{ marginLeft: 8 }}>Search</span>\n              </SearchBar>\n            </StackLayer>\n\n            <StackLayer ref={chipsRef} $translateZ={150} $topOffset={-140}>\n              <ChipsContainer>\n                <Chip $highlight={painted}>Chip1</Chip>\n                <Chip>Chip2</Chip>\n                <Chip>Chip3</Chip>\n                <Chip>Chip4</Chip>\n              </ChipsContainer>\n            </StackLayer>\n\n            <StackLayer ref={cardRef} $translateZ={-250} $topOffset={50}>\n              <Card>\n                <CardImage />\n                <CardContent>\n                  <SkeletonLine $animate={painted} />\n                  <SkeletonLine $animate={painted} style={{ width: '80%' }} />\n                  <SkeletonLine $animate={painted} style={{ width: '60%' }} />\n                </CardContent>\n              </Card>\n            </StackLayer>\n\n            <BottomNavContainer ref={bottomNavRef} $translateZ={100} $topOffset={260} $highlight={painted}>\n              <div style={{ display: 'flex', gap: '80px' }}>\n                <div><Home size={18} color=\"#000\" /></div>\n                <div><Search size={18} color=\"#000\" /></div>\n                <div><User size={18} color=\"#000\" /></div>\n              </div>\n            </BottomNavContainer>\n          </AppBlockWrapper>\n        </CustomBlockLayout.Right>\n      </CustomBlockLayout>\n      <BottomTrigger ref={bottomTriggerRef} />\n    </section>\n    </Wrapper>\n  );\n};\n\nexport default AppWebBlock;\n"
        }
    ]
}