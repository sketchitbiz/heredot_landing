{
    "sourceFile": "src/block/Partner.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1747725449250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747725522171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,243 @@\n 'use client';\n \n-import React, { useEffect, useState } from 'react';\n+import React, { useState, useRef, useEffect } from 'react';\n import styled from 'styled-components';\n-import Image from 'next/image';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+import { userStamp } from '@/lib/api/user/api';\n \n-interface EventBlockProps {\n-  slides: { image: string }[];\n-  topLabel: string;\n-  centerLabel: string;\n-  bottomLabel: string;\n-  title: string;\n-  description: string;\n-  onTopArrowClick?: () => void;\n-  onBottomArrowClick?: () => void;\n+interface PartnerProps {\n+  title1: string;\n+  title2: string;\n+  subtitle: string;\n+  tabs: string[];\n+  slides: {\n+    title: string;\n+    image: string;\n+    subtitle: string;\n+    description: string;\n+  }[];\n+  downloadText: string;\n+  onEnterSection?: (index: number, tab: string) => void;\n }\n \n+const Title = styled.h2`\n+  ${AppTextStyles.headline2};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 0px;\n+  line-height: 1.2;\n+  white-space: pre-line;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 25px;\n+  }\n+`;\n+\n+const Subtitle = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+    white-space: normal;\n+  }\n+`;\n+\n+const Tabs = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  margin-bottom: 10px;\n+  flex-wrap: wrap;\n+`;\n+\n+const Tab = styled.div<{ $active: boolean }>`\n+  font-size: 16px;\n+  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n+  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n+  padding-bottom: 4px;\n+  cursor: pointer;\n+  color: ${({ $active }) => ($active ? '#000' : '#888')};\n+`;\n+\n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n+const TabTitle = styled.h3`\n+  font-size: 25px;\n+  font-weight: bold;\n+  margin-bottom: 12px;\n+  position: relative;\n+  padding-left: 16px;\n+  color: #000;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    left: 0;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    width: 8px;\n+    height: 24px;\n+    background-color: #000000;\n+  }\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 18px;\n+  }\n+`;\n+const TabDescription = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  margin-top: 8px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+  }\n+`;\n+\n+const TabImage = styled.img`\n   width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: ${AppColors.background};\n+  height: auto;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n+  border-radius: 8px;\n `;\n \n-const Content = styled.div`\n+const FlexRow = styled.div`\n   display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n   flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n   align-items: center;\n-  gap: 100px;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n `;\n \n-const ImageBox = styled.div`\n-  width: 1200px;\n-  height: 600px;\n-  border-radius: 16px;\n-  overflow: hidden;\n-  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+const MobileDownloadButton = styled.a`\n+  display: inline-flex;\n+  align-items: center;\n+  width: 100%;\n+  justify-content: center;\n+  padding: 10px 16px;\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #000;\n+  border: 1px solid #ccc;\n+  border-radius: 6px;\n+  text-decoration: none;\n+  gap: 6px;\n+  margin-top: 0px;\n `;\n \n-export default function EventBlock({\n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      uuid: localStorage.getItem('logId') ?? 'anonymous',\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const Partner: React.FC<PartnerProps> = ({\n+  title1,\n+  title2,\n+  subtitle,\n+  tabs,\n   slides,\n-  topLabel,\n-  centerLabel,\n-  bottomLabel,\n-  title,\n-  description,\n-  onTopArrowClick,\n-  onBottomArrowClick,\n-}: EventBlockProps) {\n+  downloadText,\n+  onEnterSection,\n+}) => {\n+  const { lang } = useLang();\n+  const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n+  const activeTabRef = useRef(activeTab);\n   const [isMobile, setIsMobile] = useState(false);\n+  const lastLoggedIndex = useRef<number | null>(null);\n \n+  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n   useEffect(() => {\n     const checkMobile = () => {\n       setIsMobile(window.innerWidth < Breakpoints.mobile);\n     };\n@@ -59,41 +245,175 @@\n     window.addEventListener('resize', checkMobile);\n     return () => window.removeEventListener('resize', checkMobile);\n   }, []);\n \n-  const getImageSrc = (src: string) => {\n-    if (!isMobile) return src;\n+  useEffect(() => {\n+    activeTabRef.current = activeTab;\n+  }, [activeTab]);\n \n-    // \"example/image01.jpg\" → \"example/image01_m.jpg\"\n-    const lastDot = src.lastIndexOf('.');\n-    if (lastDot === -1) return src;\n-    return src.slice(0, lastDot) + '_m' + src.slice(lastDot);\n+  useEffect(() => {\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n+    const lastScrollY = { current: window.scrollY };\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        id: 'partner-scroll',\n+        trigger: sectionRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * tabs.length);\n+          index = Math.min(index, tabs.length - 1);\n+\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY.current;\n+          lastScrollY.current = currentScrollY;\n+\n+          if (!ignoreScroll.current) {\n+            if (index !== activeTabRef.current) {\n+              setActiveTab(index);\n+            }\n+\n+            if (\n+              isScrollingDown &&\n+              index !== lastLoggedIndex.current &&\n+              currentScrollY > self.start\n+            ) {\n+              lastLoggedIndex.current = index;\n+              onEnterSection?.(index, tabs[index]);\n+            }\n+          }\n+        },\n+      });\n+    }, sectionRef);\n+\n+    return () => ctx.revert();\n+  }, [isMobile, tabs.length]);\n+\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n+\n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n+  const handleTabClick = (index: number) => {\n+    const trigger = ScrollTrigger.getById('partner-scroll');\n+    if (!trigger) return;\n+\n+    ignoreScroll.current = true;\n+    setActiveTab(index);\n+    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n+    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n+    setTimeout(() => (ignoreScroll.current = false), 1000);\n   };\n \n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n   return (\n-    <Wrapper>\n-      <CustomNavigator\n-        topLabel={topLabel}\n-        centerLabel={centerLabel}\n-        bottomLabel={bottomLabel}\n-        title={title}\n-        description={description}\n-        onTopArrowClick={onTopArrowClick}\n-        onBottomArrowClick={onBottomArrowClick}\n-      />\n+    <ResponsiveView\n+      desktopView={\n+        <Wrapper>\n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n+              <Title>{`${title1}\\n${title2}`}</Title>\n+              <Subtitle>{subtitle}</Subtitle>\n+            </CustomBlockLayout.Left>\n+            <CustomBlockLayout.Right ref={rightRef}>\n+              <Tabs>\n+                {tabs.map((tab, index) => (\n+                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+                    {tab}\n+                  </Tab>\n+                ))}\n+              </Tabs>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+              </AnimatedDescription>\n+            </CustomBlockLayout.Right>\n+          </CustomBlockLayout>\n+        </Wrapper>\n+      }\n+      mobileView={\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+          <Subtitle>{subtitle}</Subtitle>\n+          {slides.map((slide, index) => (\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n+            >\n+              <TabTitle>{tabs[index]}</TabTitle>\n+              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n+              <MobileDownloadButton\n+                href={getDownloadLink(index)}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n+              >\n+                {downloadText}\n+                <DownloadIcon style={{ fontSize: '16px' }} />\n+              </MobileDownloadButton>\n+              <TabImage src={slide.image} alt={slide.title} />\n+            </SlideWrapper>\n+          ))}\n+        </MobileContainer>\n+      }\n+    />\n+  );\n+};\n \n-      <Content>\n-        {slides.map((slide, i) => (\n-          <ImageBox key={i}>\n-            <Image\n-              src={getImageSrc(slide.image)}\n-              alt=\"\"\n-              width={1200}\n-              height={600}\n-              style={{ objectFit: 'cover' }}\n-            />\n-          </ImageBox>\n-        ))}\n-      </Content>\n-    </Wrapper>\n-  );\n-}\n+export default Partner;\n"
                },
                {
                    "date": 1747802724175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,8 +347,9 @@\n   return (\n     <ResponsiveView\n       desktopView={\n         <Wrapper>\n+           <div id=\"partner\" style={{ height: 1 }} /> \n           <CustomBlockLayout ref={sectionRef}>\n             <CustomBlockLayout.Left ref={leftRef}>\n               <Title>{`${title1}\\n${title2}`}</Title>\n               <Subtitle>{subtitle}</Subtitle>\n"
                },
                {
                    "date": 1747802766805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,420 @@\n+'use client';\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { userStamp } from '@/lib/api/user/api';\n+\n+interface PartnerProps {\n+  title1: string;\n+  title2: string;\n+  subtitle: string;\n+  tabs: string[];\n+  slides: {\n+    title: string;\n+    image: string;\n+    subtitle: string;\n+    description: string;\n+  }[];\n+  downloadText: string;\n+  onEnterSection?: (index: number, tab: string) => void;\n+}\n+\n+const Title = styled.h2`\n+  ${AppTextStyles.headline2};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 0px;\n+  line-height: 1.2;\n+  white-space: pre-line;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 25px;\n+  }\n+`;\n+\n+const Subtitle = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+    white-space: normal;\n+  }\n+`;\n+\n+const Tabs = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  margin-bottom: 10px;\n+  flex-wrap: wrap;\n+`;\n+\n+const Tab = styled.div<{ $active: boolean }>`\n+  font-size: 16px;\n+  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n+  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n+  padding-bottom: 4px;\n+  cursor: pointer;\n+  color: ${({ $active }) => ($active ? '#000' : '#888')};\n+`;\n+\n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n+const TabTitle = styled.h3`\n+  font-size: 25px;\n+  font-weight: bold;\n+  margin-bottom: 12px;\n+  position: relative;\n+  padding-left: 16px;\n+  color: #000;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    left: 0;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    width: 8px;\n+    height: 24px;\n+    background-color: #000000;\n+  }\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 18px;\n+  }\n+`;\n+const TabDescription = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  margin-top: 8px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+  }\n+`;\n+\n+const TabImage = styled.img`\n+  width: 100%;\n+  height: auto;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n+  border-radius: 8px;\n+`;\n+\n+const FlexRow = styled.div`\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n+const MobileDownloadButton = styled.a`\n+  display: inline-flex;\n+  align-items: center;\n+  width: 100%;\n+  justify-content: center;\n+  padding: 10px 16px;\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #000;\n+  border: 1px solid #ccc;\n+  border-radius: 6px;\n+  text-decoration: none;\n+  gap: 6px;\n+  margin-top: 0px;\n+`;\n+\n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      uuid: localStorage.getItem('logId') ?? 'anonymous',\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const Partner: React.FC<PartnerProps> = ({\n+  title1,\n+  title2,\n+  subtitle,\n+  tabs,\n+  slides,\n+  downloadText,\n+  onEnterSection,\n+}) => {\n+  const { lang } = useLang();\n+  const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n+  const activeTabRef = useRef(activeTab);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const lastLoggedIndex = useRef<number | null>(null);\n+\n+  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    activeTabRef.current = activeTab;\n+  }, [activeTab]);\n+\n+  useEffect(() => {\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n+    const lastScrollY = { current: window.scrollY };\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        id: 'partner-scroll',\n+        trigger: sectionRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * tabs.length);\n+          index = Math.min(index, tabs.length - 1);\n+\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY.current;\n+          lastScrollY.current = currentScrollY;\n+\n+          if (!ignoreScroll.current) {\n+            if (index !== activeTabRef.current) {\n+              setActiveTab(index);\n+            }\n+\n+            if (\n+              isScrollingDown &&\n+              index !== lastLoggedIndex.current &&\n+              currentScrollY > self.start\n+            ) {\n+              lastLoggedIndex.current = index;\n+              onEnterSection?.(index, tabs[index]);\n+            }\n+          }\n+        },\n+      });\n+    }, sectionRef);\n+\n+    return () => ctx.revert();\n+  }, [isMobile, tabs.length]);\n+\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n+\n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n+  const handleTabClick = (index: number) => {\n+    const trigger = ScrollTrigger.getById('partner-scroll');\n+    if (!trigger) return;\n+\n+    ignoreScroll.current = true;\n+    setActiveTab(index);\n+    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n+    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n+    setTimeout(() => (ignoreScroll.current = false), 1000);\n+  };\n+\n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n+  return (\n+    <ResponsiveView\n+      desktopView={\n+        <Wrapper>\n+           <div id=\"partner\" style={{ height: 1 }} /> \n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n+              <Title>{`${title1}\\n${title2}`}</Title>\n+              <Subtitle>{subtitle}</Subtitle>\n+            </CustomBlockLayout.Left>\n+            <CustomBlockLayout.Right ref={rightRef}>\n+              <Tabs>\n+                {tabs.map((tab, index) => (\n+                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+                    {tab}\n+                  </Tab>\n+                ))}\n+              </Tabs>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+              </AnimatedDescription>\n+            </CustomBlockLayout.Right>\n+          </CustomBlockLayout>\n+        </Wrapper>\n+      }\n+      mobileView={\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+          <Subtitle>{subtitle}</Subtitle>\n+          {slides.map((slide, index) => (\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n+            >\n+              <TabTitle>{tabs[index]}</TabTitle>\n+              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n+              <MobileDownloadButton\n+                href={getDownloadLink(index)}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n+              >\n+                {downloadText}\n+                <DownloadIcon style={{ fontSize: '16px' }} />\n+              </MobileDownloadButton>\n+              <TabImage src={slide.image} alt={slide.title} />\n+            </SlideWrapper>\n+          ))}\n+        </MobileContainer>\n+      }\n+    />\n+  );\n+};\n+\n+export default Partner;\n"
                },
                {
                    "date": 1747802789059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,8 +387,9 @@\n         </Wrapper>\n       }\n       mobileView={\n         <MobileContainer>\n+                    <div id=\"partner\" style={{ height: 1 }} /> \n           <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n           <Subtitle>{subtitle}</Subtitle>\n           {slides.map((slide, index) => (\n             <SlideWrapper\n@@ -417,424 +418,4 @@\n   );\n };\n \n export default Partner;\n-'use client';\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import DownloadIcon from '@mui/icons-material/Download';\n-import { useLang } from '@/contexts/LangContext';\n-import { downloadLinks } from '@/lib/i18n/downloadLinks';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { userStamp } from '@/lib/api/user/api';\n-\n-interface PartnerProps {\n-  title1: string;\n-  title2: string;\n-  subtitle: string;\n-  tabs: string[];\n-  slides: {\n-    title: string;\n-    image: string;\n-    subtitle: string;\n-    description: string;\n-  }[];\n-  downloadText: string;\n-  onEnterSection?: (index: number, tab: string) => void;\n-}\n-\n-const Title = styled.h2`\n-  ${AppTextStyles.headline2};\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 0px;\n-  line-height: 1.2;\n-  white-space: pre-line;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 25px;\n-  }\n-`;\n-\n-const Subtitle = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-    white-space: normal;\n-  }\n-`;\n-\n-const Tabs = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  margin-bottom: 10px;\n-  flex-wrap: wrap;\n-`;\n-\n-const Tab = styled.div<{ $active: boolean }>`\n-  font-size: 16px;\n-  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n-  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n-  padding-bottom: 4px;\n-  cursor: pointer;\n-  color: ${({ $active }) => ($active ? '#000' : '#888')};\n-`;\n-\n-const Slide = styled.div<{ $isActive: boolean }>`\n-  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n-`;\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n-const TabTitle = styled.h3`\n-  font-size: 25px;\n-  font-weight: bold;\n-  margin-bottom: 12px;\n-  position: relative;\n-  padding-left: 16px;\n-  color: #000;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    left: 0;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    width: 8px;\n-    height: 24px;\n-    background-color: #000000;\n-  }\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 18px;\n-  }\n-`;\n-const TabDescription = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  margin-top: 8px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-  }\n-`;\n-\n-const TabImage = styled.img`\n-  width: 100%;\n-  height: auto;\n-  margin-top: 16px;\n-  margin-bottom: 16px;\n-  border-radius: 8px;\n-`;\n-\n-const FlexRow = styled.div`\n-  display: flex;\n-  width: 100%;\n-  justify-content: space-between;\n-`;\n-\n-const LeftColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-`;\n-\n-const RightColumn = styled.div`\n-  flex-shrink: 0;\n-  display: flex;\n-  flex-direction: column;\n-  justify-content: flex-end;\n-  align-items: flex-end;\n-  padding-bottom: 20px;\n-`;\n-\n-const DownloadLink = styled.a`\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n-\n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n-  }\n-`;\n-\n-const MobileDownloadButton = styled.a`\n-  display: inline-flex;\n-  align-items: center;\n-  width: 100%;\n-  justify-content: center;\n-  padding: 10px 16px;\n-  font-size: 14px;\n-  font-weight: 600;\n-  color: #000;\n-  border: 1px solid #ccc;\n-  border-radius: 6px;\n-  text-decoration: none;\n-  gap: 6px;\n-  margin-top: 0px;\n-`;\n-\n-const AnimatedDescription = styled.div`\n-  animation: fade 0.5s ease-in-out;\n-\n-  @keyframes fade {\n-    from { opacity: 0; transform: translateY(20px); }\n-    to { opacity: 1; transform: translateY(0); }\n-  }\n-`;\n-\n-const MobileContainer = styled.div`\n-  padding: 24px 20px;\n-`;\n-\n-const SlideWrapper = styled.div`\n-  margin-bottom: 100px;\n-\n-  &:last-of-type {\n-    margin-bottom: 0;\n-  }\n-`;\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    await userStamp({\n-      uuid: localStorage.getItem('logId') ?? 'anonymous',\n-      category: '버튼',\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const Partner: React.FC<PartnerProps> = ({\n-  title1,\n-  title2,\n-  subtitle,\n-  tabs,\n-  slides,\n-  downloadText,\n-  onEnterSection,\n-}) => {\n-  const { lang } = useLang();\n-  const [activeTab, setActiveTab] = useState(0);\n-  const currentSlide = slides[activeTab];\n-  const leftRef = useRef<HTMLDivElement>(null);\n-  const rightRef = useRef<HTMLDivElement>(null);\n-  const sectionRef = useRef<HTMLDivElement>(null);\n-  const ignoreScroll = useRef(false);\n-  const activeTabRef = useRef(activeTab);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const lastLoggedIndex = useRef<number | null>(null);\n-\n-  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    activeTabRef.current = activeTab;\n-  }, [activeTab]);\n-\n-  useEffect(() => {\n-    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n-\n-    gsap.registerPlugin(ScrollTrigger);\n-    const slideHeight = window.innerHeight;\n-    const totalScroll = slideHeight * tabs.length;\n-\n-    const lastScrollY = { current: window.scrollY };\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        id: 'partner-scroll',\n-        trigger: sectionRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const progress = self.progress;\n-          let index = Math.floor(progress * tabs.length);\n-          index = Math.min(index, tabs.length - 1);\n-\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY.current;\n-          lastScrollY.current = currentScrollY;\n-\n-          if (!ignoreScroll.current) {\n-            if (index !== activeTabRef.current) {\n-              setActiveTab(index);\n-            }\n-\n-            if (\n-              isScrollingDown &&\n-              index !== lastLoggedIndex.current &&\n-              currentScrollY > self.start\n-            ) {\n-              lastLoggedIndex.current = index;\n-              onEnterSection?.(index, tabs[index]);\n-            }\n-          }\n-        },\n-      });\n-    }, sectionRef);\n-\n-    return () => ctx.revert();\n-  }, [isMobile, tabs.length]);\n-\n-  useEffect(() => {\n-    if (!isMobile || !onEnterSection) return;\n-\n-    const observer = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const index = slideRefs.current.findIndex((el) => el === entry.target);\n-          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n-            lastLoggedIndex.current = index;\n-            onEnterSection(index, tabs[index]);\n-          }\n-        });\n-      },\n-      { threshold: 0.6 }\n-    );\n-\n-    slideRefs.current.forEach((el) => {\n-      if (el) observer.observe(el);\n-    });\n-    return () => {\n-      slideRefs.current.forEach((el) => {\n-        if (el) observer.unobserve(el);\n-      });\n-    };\n-  }, [isMobile, tabs, onEnterSection]);\n-\n-  const handleTabClick = (index: number) => {\n-    const trigger = ScrollTrigger.getById('partner-scroll');\n-    if (!trigger) return;\n-\n-    ignoreScroll.current = true;\n-    setActiveTab(index);\n-    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n-    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n-    logButtonClick('Partner', `탭: ${tabs[index]}`);\n-    setTimeout(() => (ignoreScroll.current = false), 1000);\n-  };\n-\n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n-\n-  return (\n-    <ResponsiveView\n-      desktopView={\n-        <Wrapper>\n-           <div id=\"partner\" style={{ height: 1 }} /> \n-          <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n-              <Title>{`${title1}\\n${title2}`}</Title>\n-              <Subtitle>{subtitle}</Subtitle>\n-            </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n-              <Tabs>\n-                {tabs.map((tab, index) => (\n-                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n-                    {tab}\n-                  </Tab>\n-                ))}\n-              </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n-                    >\n-                      {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-              </AnimatedDescription>\n-            </CustomBlockLayout.Right>\n-          </CustomBlockLayout>\n-        </Wrapper>\n-      }\n-      mobileView={\n-        <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n-          <Subtitle>{subtitle}</Subtitle>\n-          {slides.map((slide, index) => (\n-            <SlideWrapper\n-              key={index}\n-              ref={(el) => {\n-                slideRefs.current[index] = el;\n-              }}\n-            >\n-              <TabTitle>{tabs[index]}</TabTitle>\n-              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n-              <MobileDownloadButton\n-                href={getDownloadLink(index)}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n-              >\n-                {downloadText}\n-                <DownloadIcon style={{ fontSize: '16px' }} />\n-              </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n-            </SlideWrapper>\n-          ))}\n-        </MobileContainer>\n-      }\n-    />\n-  );\n-};\n-\n-export default Partner;\n"
                },
                {
                    "date": 1747802804832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,9 +387,8 @@\n         </Wrapper>\n       }\n       mobileView={\n         <MobileContainer>\n-                    <div id=\"partner\" style={{ height: 1 }} /> \n           <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n           <Subtitle>{subtitle}</Subtitle>\n           {slides.map((slide, index) => (\n             <SlideWrapper\n"
                },
                {
                    "date": 1747803611740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,19 @@\n 'use client';\n \n-import React, { useState, useRef, useEffect } from 'react';\n+import React, { useEffect, useRef, useState } from 'react';\n import styled from 'styled-components';\n import { gsap } from 'gsap';\n import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import { userStamp } from '@/lib/api/user/api';\n import DownloadIcon from '@mui/icons-material/Download';\n import { useLang } from '@/contexts/LangContext';\n import { downloadLinks } from '@/lib/i18n/downloadLinks';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { userStamp } from '@/lib/api/user/api';\n \n interface PartnerProps {\n   title1: string;\n   title2: string;\n@@ -26,10 +26,22 @@\n     description: string;\n   }[];\n   downloadText: string;\n   onEnterSection?: (index: number, tab: string) => void;\n+  sectionRef?: React.RefObject<HTMLDivElement>; // ✅ 추가\n }\n \n+gsap.registerPlugin(ScrollTrigger);\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+\n const Title = styled.h2`\n   ${AppTextStyles.headline2};\n   color: ${AppColors.onSurface};\n   margin-bottom: 0px;\n@@ -44,14 +56,12 @@\n const Subtitle = styled.p`\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n-  white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+  margin-bottom: 100px;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 14px;\n-    white-space: normal;\n   }\n `;\n \n const Tabs = styled.div`\n@@ -69,24 +79,8 @@\n   cursor: pointer;\n   color: ${({ $active }) => ($active ? '#000' : '#888')};\n `;\n \n-const Slide = styled.div<{ $isActive: boolean }>`\n-  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n-`;\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n const TabTitle = styled.h3`\n   font-size: 25px;\n   font-weight: bold;\n   margin-bottom: 12px;\n@@ -108,8 +102,9 @@\n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 18px;\n   }\n `;\n+\n const TabDescription = styled.p`\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n@@ -127,46 +122,8 @@\n   margin-bottom: 16px;\n   border-radius: 8px;\n `;\n \n-const FlexRow = styled.div`\n-  display: flex;\n-  width: 100%;\n-  justify-content: space-between;\n-`;\n-\n-const LeftColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-`;\n-\n-const RightColumn = styled.div`\n-  flex-shrink: 0;\n-  display: flex;\n-  flex-direction: column;\n-  justify-content: flex-end;\n-  align-items: flex-end;\n-  padding-bottom: 20px;\n-`;\n-\n-const DownloadLink = styled.a`\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n-\n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n-  }\n-`;\n-\n const MobileDownloadButton = styled.a`\n   display: inline-flex;\n   align-items: center;\n   width: 100%;\n@@ -181,67 +138,28 @@\n   gap: 6px;\n   margin-top: 0px;\n `;\n \n-const AnimatedDescription = styled.div`\n-  animation: fade 0.5s ease-in-out;\n-\n-  @keyframes fade {\n-    from { opacity: 0; transform: translateY(20px); }\n-    to { opacity: 1; transform: translateY(0); }\n-  }\n-`;\n-\n-const MobileContainer = styled.div`\n-  padding: 24px 20px;\n-`;\n-\n-const SlideWrapper = styled.div`\n-  margin-bottom: 100px;\n-\n-  &:last-of-type {\n-    margin-bottom: 0;\n-  }\n-`;\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    await userStamp({\n-      uuid: localStorage.getItem('logId') ?? 'anonymous',\n-      category: '버튼',\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n const Partner: React.FC<PartnerProps> = ({\n   title1,\n   title2,\n   subtitle,\n   tabs,\n   slides,\n   downloadText,\n   onEnterSection,\n+  sectionRef,\n }) => {\n   const { lang } = useLang();\n   const [activeTab, setActiveTab] = useState(0);\n-  const currentSlide = slides[activeTab];\n-  const leftRef = useRef<HTMLDivElement>(null);\n-  const rightRef = useRef<HTMLDivElement>(null);\n-  const sectionRef = useRef<HTMLDivElement>(null);\n+  const activeTabRef = useRef(activeTab);\n   const ignoreScroll = useRef(false);\n-  const activeTabRef = useRef(activeTab);\n+  const lastLoggedIndex = useRef<number | null>(null);\n   const [isMobile, setIsMobile] = useState(false);\n-  const lastLoggedIndex = useRef<number | null>(null);\n-\n   const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n \n   useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n+    const checkMobile = () => setIsMobile(window.innerWidth < Breakpoints.mobile);\n     checkMobile();\n     window.addEventListener('resize', checkMobile);\n     return () => window.removeEventListener('resize', checkMobile);\n   }, []);\n@@ -249,20 +167,19 @@\n   useEffect(() => {\n     activeTabRef.current = activeTab;\n   }, [activeTab]);\n \n+  // ✅ GSAP pin 적용\n   useEffect(() => {\n-    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+    if (isMobile || !sectionRef?.current) return;\n \n-    gsap.registerPlugin(ScrollTrigger);\n-    const slideHeight = window.innerHeight;\n-    const totalScroll = slideHeight * tabs.length;\n+    const totalScroll = window.innerHeight * tabs.length;\n+    const lastScrollY = { current: window.scrollY };\n \n-    const lastScrollY = { current: window.scrollY };\n     const ctx = gsap.context(() => {\n       ScrollTrigger.create({\n         id: 'partner-scroll',\n-        trigger: sectionRef.current,\n+        trigger: sectionRef.current, // ✅ 외부 section을 pin 대상으로\n         start: 'top top',\n         end: `+=${totalScroll}`,\n         scrub: true,\n         pin: true,\n@@ -293,126 +210,88 @@\n       });\n     }, sectionRef);\n \n     return () => ctx.revert();\n-  }, [isMobile, tabs.length]);\n+  }, [isMobile, tabs.length, sectionRef]);\n \n-  useEffect(() => {\n-    if (!isMobile || !onEnterSection) return;\n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n \n-    const observer = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const index = slideRefs.current.findIndex((el) => el === entry.target);\n-          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n-            lastLoggedIndex.current = index;\n-            onEnterSection(index, tabs[index]);\n-          }\n-        });\n-      },\n-      { threshold: 0.6 }\n-    );\n-\n-    slideRefs.current.forEach((el) => {\n-      if (el) observer.observe(el);\n-    });\n-    return () => {\n-      slideRefs.current.forEach((el) => {\n-        if (el) observer.unobserve(el);\n-      });\n-    };\n-  }, [isMobile, tabs, onEnterSection]);\n-\n   const handleTabClick = (index: number) => {\n     const trigger = ScrollTrigger.getById('partner-scroll');\n     if (!trigger) return;\n \n     ignoreScroll.current = true;\n     setActiveTab(index);\n     const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n     window.scrollTo({ top: scrollY, behavior: 'smooth' });\n-    logButtonClick('Partner', `탭: ${tabs[index]}`);\n     setTimeout(() => (ignoreScroll.current = false), 1000);\n   };\n \n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n-\n   return (\n     <ResponsiveView\n       desktopView={\n         <Wrapper>\n-           <div id=\"partner\" style={{ height: 1 }} /> \n-          <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n+          <CustomBlockLayout>\n+            <CustomBlockLayout.Left>\n               <Title>{`${title1}\\n${title2}`}</Title>\n               <Subtitle>{subtitle}</Subtitle>\n             </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n+            <CustomBlockLayout.Right>\n               <Tabs>\n                 {tabs.map((tab, index) => (\n                   <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n                     {tab}\n                   </Tab>\n                 ))}\n               </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n-                    >\n-                      {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-              </AnimatedDescription>\n+              <div>\n+                <TabTitle>{slides[activeTab].subtitle}</TabTitle>\n+                <TabDescription dangerouslySetInnerHTML={{ __html: slides[activeTab].description }} />\n+                <a\n+                  href={getDownloadLink(activeTab)}\n+                  target=\"_blank\"\n+                  rel=\"noopener noreferrer\"\n+                >\n+                  {downloadText}\n+                  <DownloadIcon style={{ fontSize: '16px' }} />\n+                </a>\n+                <TabImage src={slides[activeTab].image} alt={slides[activeTab].title} />\n+              </div>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n       }\n       mobileView={\n-        <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+        <div style={{ padding: '24px 20px' }}>\n+          <Title>{`${title1}\\n${title2}`}</Title>\n           <Subtitle>{subtitle}</Subtitle>\n           {slides.map((slide, index) => (\n-            <SlideWrapper\n-              key={index}\n-              ref={(el) => {\n-                slideRefs.current[index] = el;\n-              }}\n+            <div key={index} ref={(el) => {\n+              slideRefs.current[index] = el;\n+            }}\n             >\n               <TabTitle>{tabs[index]}</TabTitle>\n               <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n               <MobileDownloadButton\n                 href={getDownloadLink(index)}\n                 target=\"_blank\"\n                 rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n               <TabImage src={slide.image} alt={slide.title} />\n-            </SlideWrapper>\n+            </div>\n           ))}\n-        </MobileContainer>\n+        </div>\n       }\n     />\n   );\n };\n"
                },
                {
                    "date": 1747803718438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,19 @@\n 'use client';\n \n-import React, { useEffect, useRef, useState } from 'react';\n+import React, { useState, useRef, useEffect } from 'react';\n import styled from 'styled-components';\n import { gsap } from 'gsap';\n import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n import { userStamp } from '@/lib/api/user/api';\n-import DownloadIcon from '@mui/icons-material/Download';\n-import { useLang } from '@/contexts/LangContext';\n-import { downloadLinks } from '@/lib/i18n/downloadLinks';\n \n interface PartnerProps {\n   title1: string;\n   title2: string;\n@@ -26,22 +26,10 @@\n     description: string;\n   }[];\n   downloadText: string;\n   onEnterSection?: (index: number, tab: string) => void;\n-  sectionRef?: React.RefObject<HTMLDivElement>; // ✅ 추가\n }\n \n-gsap.registerPlugin(ScrollTrigger);\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-`;\n-\n const Title = styled.h2`\n   ${AppTextStyles.headline2};\n   color: ${AppColors.onSurface};\n   margin-bottom: 0px;\n@@ -56,12 +44,14 @@\n const Subtitle = styled.p`\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n-  margin-bottom: 100px;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 14px;\n+    white-space: normal;\n   }\n `;\n \n const Tabs = styled.div`\n@@ -79,8 +69,24 @@\n   cursor: pointer;\n   color: ${({ $active }) => ($active ? '#000' : '#888')};\n `;\n \n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n const TabTitle = styled.h3`\n   font-size: 25px;\n   font-weight: bold;\n   margin-bottom: 12px;\n@@ -102,9 +108,8 @@\n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 18px;\n   }\n `;\n-\n const TabDescription = styled.p`\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n@@ -122,8 +127,46 @@\n   margin-bottom: 16px;\n   border-radius: 8px;\n `;\n \n+const FlexRow = styled.div`\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n const MobileDownloadButton = styled.a`\n   display: inline-flex;\n   align-items: center;\n   width: 100%;\n@@ -138,28 +181,67 @@\n   gap: 6px;\n   margin-top: 0px;\n `;\n \n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      uuid: localStorage.getItem('logId') ?? 'anonymous',\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n const Partner: React.FC<PartnerProps> = ({\n   title1,\n   title2,\n   subtitle,\n   tabs,\n   slides,\n   downloadText,\n   onEnterSection,\n-  sectionRef,\n }) => {\n   const { lang } = useLang();\n   const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n   const activeTabRef = useRef(activeTab);\n-  const ignoreScroll = useRef(false);\n+  const [isMobile, setIsMobile] = useState(false);\n   const lastLoggedIndex = useRef<number | null>(null);\n-  const [isMobile, setIsMobile] = useState(false);\n+\n   const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n \n   useEffect(() => {\n-    const checkMobile = () => setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n     checkMobile();\n     window.addEventListener('resize', checkMobile);\n     return () => window.removeEventListener('resize', checkMobile);\n   }, []);\n@@ -167,19 +249,20 @@\n   useEffect(() => {\n     activeTabRef.current = activeTab;\n   }, [activeTab]);\n \n-  // ✅ GSAP pin 적용\n   useEffect(() => {\n-    if (isMobile || !sectionRef?.current) return;\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n \n-    const totalScroll = window.innerHeight * tabs.length;\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n     const lastScrollY = { current: window.scrollY };\n-\n     const ctx = gsap.context(() => {\n       ScrollTrigger.create({\n         id: 'partner-scroll',\n-        trigger: sectionRef.current, // ✅ 외부 section을 pin 대상으로\n+        trigger: sectionRef.current,\n         start: 'top top',\n         end: `+=${totalScroll}`,\n         scrub: true,\n         pin: true,\n@@ -210,88 +293,125 @@\n       });\n     }, sectionRef);\n \n     return () => ctx.revert();\n-  }, [isMobile, tabs.length, sectionRef]);\n+  }, [isMobile, tabs.length]);\n \n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n \n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n   const handleTabClick = (index: number) => {\n     const trigger = ScrollTrigger.getById('partner-scroll');\n     if (!trigger) return;\n \n     ignoreScroll.current = true;\n     setActiveTab(index);\n     const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n     window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n     setTimeout(() => (ignoreScroll.current = false), 1000);\n   };\n \n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n   return (\n     <ResponsiveView\n       desktopView={\n         <Wrapper>\n-          <CustomBlockLayout>\n-            <CustomBlockLayout.Left>\n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n               <Title>{`${title1}\\n${title2}`}</Title>\n               <Subtitle>{subtitle}</Subtitle>\n             </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right>\n+            <CustomBlockLayout.Right ref={rightRef}>\n               <Tabs>\n                 {tabs.map((tab, index) => (\n                   <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n                     {tab}\n                   </Tab>\n                 ))}\n               </Tabs>\n-              <div>\n-                <TabTitle>{slides[activeTab].subtitle}</TabTitle>\n-                <TabDescription dangerouslySetInnerHTML={{ __html: slides[activeTab].description }} />\n-                <a\n-                  href={getDownloadLink(activeTab)}\n-                  target=\"_blank\"\n-                  rel=\"noopener noreferrer\"\n-                >\n-                  {downloadText}\n-                  <DownloadIcon style={{ fontSize: '16px' }} />\n-                </a>\n-                <TabImage src={slides[activeTab].image} alt={slides[activeTab].title} />\n-              </div>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+              </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n       }\n       mobileView={\n-        <div style={{ padding: '24px 20px' }}>\n-          <Title>{`${title1}\\n${title2}`}</Title>\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n           <Subtitle>{subtitle}</Subtitle>\n           {slides.map((slide, index) => (\n-            <div key={index} ref={(el) => {\n-              slideRefs.current[index] = el;\n-            }}\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n             >\n               <TabTitle>{tabs[index]}</TabTitle>\n               <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n               <MobileDownloadButton\n                 href={getDownloadLink(index)}\n                 target=\"_blank\"\n                 rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n               <TabImage src={slide.image} alt={slide.title} />\n-            </div>\n+            </SlideWrapper>\n           ))}\n-        </div>\n+        </MobileContainer>\n       }\n     />\n   );\n };\n"
                },
                {
                    "date": 1747965465924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,418 @@\n+'use client';\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { userStamp } from '@/lib/api/user/api';\n+\n+interface PartnerProps {\n+  title1: string;\n+  title2: string;\n+  subtitle: string;\n+  tabs: string[];\n+  slides: {\n+    title: string;\n+    image: string;\n+    subtitle: string;\n+    description: string;\n+  }[];\n+  downloadText: string;\n+  onEnterSection?: (index: number, tab: string) => void;\n+}\n+\n+const Title = styled.h2`\n+  ${AppTextStyles.headline2};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 0px;\n+  line-height: 1.2;\n+  white-space: pre-line;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 25px;\n+  }\n+`;\n+\n+const Subtitle = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+    white-space: normal;\n+  }\n+`;\n+\n+const Tabs = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  margin-bottom: 10px;\n+  flex-wrap: wrap;\n+`;\n+\n+const Tab = styled.div<{ $active: boolean }>`\n+  font-size: 16px;\n+  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n+  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n+  padding-bottom: 4px;\n+  cursor: pointer;\n+  color: ${({ $active }) => ($active ? '#000' : '#888')};\n+`;\n+\n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n+const TabTitle = styled.h3`\n+  font-size: 25px;\n+  font-weight: bold;\n+  margin-bottom: 12px;\n+  position: relative;\n+  padding-left: 16px;\n+  color: #000;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    left: 0;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    width: 8px;\n+    height: 24px;\n+    background-color: #000000;\n+  }\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 18px;\n+  }\n+`;\n+const TabDescription = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  margin-top: 8px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+  }\n+`;\n+\n+const TabImage = styled.img`\n+  width: 100%;\n+  height: auto;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n+  border-radius: 8px;\n+`;\n+\n+const FlexRow = styled.div`\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n+const MobileDownloadButton = styled.a`\n+  display: inline-flex;\n+  align-items: center;\n+  width: 100%;\n+  justify-content: center;\n+  padding: 10px 16px;\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #000;\n+  border: 1px solid #ccc;\n+  border-radius: 6px;\n+  text-decoration: none;\n+  gap: 6px;\n+  margin-top: 0px;\n+`;\n+\n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const Partner: React.FC<PartnerProps> = ({\n+  title1,\n+  title2,\n+  subtitle,\n+  tabs,\n+  slides,\n+  downloadText,\n+  onEnterSection,\n+}) => {\n+  const { lang } = useLang();\n+  const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n+  const activeTabRef = useRef(activeTab);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const lastLoggedIndex = useRef<number | null>(null);\n+\n+  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    activeTabRef.current = activeTab;\n+  }, [activeTab]);\n+\n+  useEffect(() => {\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n+    const lastScrollY = { current: window.scrollY };\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        id: 'partner-scroll',\n+        trigger: sectionRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * tabs.length);\n+          index = Math.min(index, tabs.length - 1);\n+\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY.current;\n+          lastScrollY.current = currentScrollY;\n+\n+          if (!ignoreScroll.current) {\n+            if (index !== activeTabRef.current) {\n+              setActiveTab(index);\n+            }\n+\n+            if (\n+              isScrollingDown &&\n+              index !== lastLoggedIndex.current &&\n+              currentScrollY > self.start\n+            ) {\n+              lastLoggedIndex.current = index;\n+              onEnterSection?.(index, tabs[index]);\n+            }\n+          }\n+        },\n+      });\n+    }, sectionRef);\n+\n+    return () => ctx.revert();\n+  }, [isMobile, tabs.length]);\n+\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n+\n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n+  const handleTabClick = (index: number) => {\n+    const trigger = ScrollTrigger.getById('partner-scroll');\n+    if (!trigger) return;\n+\n+    ignoreScroll.current = true;\n+    setActiveTab(index);\n+    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n+    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n+    setTimeout(() => (ignoreScroll.current = false), 1000);\n+  };\n+\n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n+  return (\n+    <ResponsiveView\n+      desktopView={\n+        <Wrapper>\n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n+              <Title>{`${title1}\\n${title2}`}</Title>\n+              <Subtitle>{subtitle}</Subtitle>\n+            </CustomBlockLayout.Left>\n+            <CustomBlockLayout.Right ref={rightRef}>\n+              <Tabs>\n+                {tabs.map((tab, index) => (\n+                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+                    {tab}\n+                  </Tab>\n+                ))}\n+              </Tabs>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+              </AnimatedDescription>\n+            </CustomBlockLayout.Right>\n+          </CustomBlockLayout>\n+        </Wrapper>\n+      }\n+      mobileView={\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+          <Subtitle>{subtitle}</Subtitle>\n+          {slides.map((slide, index) => (\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n+            >\n+              <TabTitle>{tabs[index]}</TabTitle>\n+              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n+              <MobileDownloadButton\n+                href={getDownloadLink(index)}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n+              >\n+                {downloadText}\n+                <DownloadIcon style={{ fontSize: '16px' }} />\n+              </MobileDownloadButton>\n+              <TabImage src={slide.image} alt={slide.title} />\n+            </SlideWrapper>\n+          ))}\n+        </MobileContainer>\n+      }\n+    />\n+  );\n+};\n+\n+export default Partner;\n"
                },
                {
                    "date": 1748224996606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,418 @@\n+'use client';\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { userStamp } from '@/lib/api/user/api';\n+\n+interface PartnerProps {\n+  title1: string;\n+  title2: string;\n+  subtitle: string;\n+  tabs: string[];\n+  slides: {\n+    title: string;\n+    image: string;\n+    subtitle: string;\n+    description: string;\n+  }[];\n+  downloadText: string;\n+  onEnterSection?: (index: number, tab: string) => void;\n+}\n+\n+const Title = styled.h2`\n+  ${AppTextStyles.headline2};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 0px;\n+  line-height: 1.2;\n+  white-space: pre-line;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 25px;\n+  }\n+`;\n+\n+const Subtitle = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+    white-space: normal;\n+  }\n+`;\n+\n+const Tabs = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  margin-bottom: 10px;\n+  flex-wrap: wrap;\n+`;\n+\n+const Tab = styled.div<{ $active: boolean }>`\n+  font-size: 16px;\n+  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n+  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n+  padding-bottom: 4px;\n+  cursor: pointer;\n+  color: ${({ $active }) => ($active ? '#000' : '#888')};\n+`;\n+\n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n+const TabTitle = styled.h3`\n+  font-size: 25px;\n+  font-weight: bold;\n+  margin-bottom: 12px;\n+  position: relative;\n+  padding-left: 16px;\n+  color: #000;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    left: 0;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    width: 8px;\n+    height: 24px;\n+    background-color: #000000;\n+  }\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 18px;\n+  }\n+`;\n+const TabDescription = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  margin-top: 8px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+  }\n+`;\n+\n+const TabImage = styled.img`\n+  width: 100%;\n+  height: auto;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n+  border-radius: 8px;\n+`;\n+\n+const FlexRow = styled.div`\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n+const MobileDownloadButton = styled.a`\n+  display: inline-flex;\n+  align-items: center;\n+  width: 100%;\n+  justify-content: center;\n+  padding: 10px 16px;\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #000;\n+  border: 1px solid #ccc;\n+  border-radius: 6px;\n+  text-decoration: none;\n+  gap: 6px;\n+  margin-top: 0px;\n+`;\n+\n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const Partner: React.FC<PartnerProps> = ({\n+  title1,\n+  title2,\n+  subtitle,\n+  tabs,\n+  slides,\n+  downloadText,\n+  onEnterSection,\n+}) => {\n+  const { lang } = useLang();\n+  const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n+  const activeTabRef = useRef(activeTab);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const lastLoggedIndex = useRef<number | null>(null);\n+\n+  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    activeTabRef.current = activeTab;\n+  }, [activeTab]);\n+\n+  useEffect(() => {\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n+    const lastScrollY = { current: window.scrollY };\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        id: 'partner-scroll',\n+        trigger: sectionRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * tabs.length);\n+          index = Math.min(index, tabs.length - 1);\n+\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY.current;\n+          lastScrollY.current = currentScrollY;\n+\n+          if (!ignoreScroll.current) {\n+            if (index !== activeTabRef.current) {\n+              setActiveTab(index);\n+            }\n+\n+            if (\n+              isScrollingDown &&\n+              index !== lastLoggedIndex.current &&\n+              currentScrollY > self.start\n+            ) {\n+              lastLoggedIndex.current = index;\n+              onEnterSection?.(index, tabs[index]);\n+            }\n+          }\n+        },\n+      });\n+    }, sectionRef);\n+\n+    return () => ctx.revert();\n+  }, [isMobile, tabs.length]);\n+\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n+\n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n+  const handleTabClick = (index: number) => {\n+    const trigger = ScrollTrigger.getById('partner-scroll');\n+    if (!trigger) return;\n+\n+    ignoreScroll.current = true;\n+    setActiveTab(index);\n+    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n+    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n+    setTimeout(() => (ignoreScroll.current = false), 1000);\n+  };\n+\n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n+  return (\n+    <ResponsiveView\n+      desktopView={\n+        <Wrapper>\n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n+              <Title>{`${title1}\\n${title2}`}</Title>\n+              <Subtitle>{subtitle}</Subtitle>\n+            </CustomBlockLayout.Left>\n+            <CustomBlockLayout.Right ref={rightRef}>\n+              <Tabs>\n+                {tabs.map((tab, index) => (\n+                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+                    {tab}\n+                  </Tab>\n+                ))}\n+              </Tabs>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+              </AnimatedDescription>\n+            </CustomBlockLayout.Right>\n+          </CustomBlockLayout>\n+        </Wrapper>\n+      }\n+      mobileView={\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+          <Subtitle>{subtitle}</Subtitle>\n+          {slides.map((slide, index) => (\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n+            >\n+              <TabTitle>{tabs[index]}</TabTitle>\n+              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n+              <MobileDownloadButton\n+                href={getDownloadLink(index)}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `${tabs[index]} `)}\n+              >\n+                {downloadText}\n+                <DownloadIcon style={{ fontSize: '16px' }} />\n+              </MobileDownloadButton>\n+              <TabImage src={slide.image} alt={slide.title} />\n+            </SlideWrapper>\n+          ))}\n+        </MobileContainer>\n+      }\n+    />\n+  );\n+};\n+\n+export default Partner;\n"
                },
                {
                    "date": 1748225018941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -400,9 +400,9 @@\n               <MobileDownloadButton\n                 href={getDownloadLink(index)}\n                 target=\"_blank\"\n                 rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `${tabs[index]} `)}\n+                onClick={() => logButtonClick('Partner', `${tabs[index]} 제안서 다운로드`)}\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n@@ -415,841 +415,4 @@\n   );\n };\n \n export default Partner;\n-'use client';\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import DownloadIcon from '@mui/icons-material/Download';\n-import { useLang } from '@/contexts/LangContext';\n-import { downloadLinks } from '@/lib/i18n/downloadLinks';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { userStamp } from '@/lib/api/user/api';\n-\n-interface PartnerProps {\n-  title1: string;\n-  title2: string;\n-  subtitle: string;\n-  tabs: string[];\n-  slides: {\n-    title: string;\n-    image: string;\n-    subtitle: string;\n-    description: string;\n-  }[];\n-  downloadText: string;\n-  onEnterSection?: (index: number, tab: string) => void;\n-}\n-\n-const Title = styled.h2`\n-  ${AppTextStyles.headline2};\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 0px;\n-  line-height: 1.2;\n-  white-space: pre-line;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 25px;\n-  }\n-`;\n-\n-const Subtitle = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-    white-space: normal;\n-  }\n-`;\n-\n-const Tabs = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  margin-bottom: 10px;\n-  flex-wrap: wrap;\n-`;\n-\n-const Tab = styled.div<{ $active: boolean }>`\n-  font-size: 16px;\n-  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n-  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n-  padding-bottom: 4px;\n-  cursor: pointer;\n-  color: ${({ $active }) => ($active ? '#000' : '#888')};\n-`;\n-\n-const Slide = styled.div<{ $isActive: boolean }>`\n-  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n-`;\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n-const TabTitle = styled.h3`\n-  font-size: 25px;\n-  font-weight: bold;\n-  margin-bottom: 12px;\n-  position: relative;\n-  padding-left: 16px;\n-  color: #000;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    left: 0;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    width: 8px;\n-    height: 24px;\n-    background-color: #000000;\n-  }\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 18px;\n-  }\n-`;\n-const TabDescription = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  margin-top: 8px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-  }\n-`;\n-\n-const TabImage = styled.img`\n-  width: 100%;\n-  height: auto;\n-  margin-top: 16px;\n-  margin-bottom: 16px;\n-  border-radius: 8px;\n-`;\n-\n-const FlexRow = styled.div`\n-  display: flex;\n-  width: 100%;\n-  justify-content: space-between;\n-`;\n-\n-const LeftColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-`;\n-\n-const RightColumn = styled.div`\n-  flex-shrink: 0;\n-  display: flex;\n-  flex-direction: column;\n-  justify-content: flex-end;\n-  align-items: flex-end;\n-  padding-bottom: 20px;\n-`;\n-\n-const DownloadLink = styled.a`\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n-\n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n-  }\n-`;\n-\n-const MobileDownloadButton = styled.a`\n-  display: inline-flex;\n-  align-items: center;\n-  width: 100%;\n-  justify-content: center;\n-  padding: 10px 16px;\n-  font-size: 14px;\n-  font-weight: 600;\n-  color: #000;\n-  border: 1px solid #ccc;\n-  border-radius: 6px;\n-  text-decoration: none;\n-  gap: 6px;\n-  margin-top: 0px;\n-`;\n-\n-const AnimatedDescription = styled.div`\n-  animation: fade 0.5s ease-in-out;\n-\n-  @keyframes fade {\n-    from { opacity: 0; transform: translateY(20px); }\n-    to { opacity: 1; transform: translateY(0); }\n-  }\n-`;\n-\n-const MobileContainer = styled.div`\n-  padding: 24px 20px;\n-`;\n-\n-const SlideWrapper = styled.div`\n-  margin-bottom: 100px;\n-\n-  &:last-of-type {\n-    margin-bottom: 0;\n-  }\n-`;\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    await userStamp({\n-      category: '버튼',\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const Partner: React.FC<PartnerProps> = ({\n-  title1,\n-  title2,\n-  subtitle,\n-  tabs,\n-  slides,\n-  downloadText,\n-  onEnterSection,\n-}) => {\n-  const { lang } = useLang();\n-  const [activeTab, setActiveTab] = useState(0);\n-  const currentSlide = slides[activeTab];\n-  const leftRef = useRef<HTMLDivElement>(null);\n-  const rightRef = useRef<HTMLDivElement>(null);\n-  const sectionRef = useRef<HTMLDivElement>(null);\n-  const ignoreScroll = useRef(false);\n-  const activeTabRef = useRef(activeTab);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const lastLoggedIndex = useRef<number | null>(null);\n-\n-  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    activeTabRef.current = activeTab;\n-  }, [activeTab]);\n-\n-  useEffect(() => {\n-    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n-\n-    gsap.registerPlugin(ScrollTrigger);\n-    const slideHeight = window.innerHeight;\n-    const totalScroll = slideHeight * tabs.length;\n-\n-    const lastScrollY = { current: window.scrollY };\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        id: 'partner-scroll',\n-        trigger: sectionRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const progress = self.progress;\n-          let index = Math.floor(progress * tabs.length);\n-          index = Math.min(index, tabs.length - 1);\n-\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY.current;\n-          lastScrollY.current = currentScrollY;\n-\n-          if (!ignoreScroll.current) {\n-            if (index !== activeTabRef.current) {\n-              setActiveTab(index);\n-            }\n-\n-            if (\n-              isScrollingDown &&\n-              index !== lastLoggedIndex.current &&\n-              currentScrollY > self.start\n-            ) {\n-              lastLoggedIndex.current = index;\n-              onEnterSection?.(index, tabs[index]);\n-            }\n-          }\n-        },\n-      });\n-    }, sectionRef);\n-\n-    return () => ctx.revert();\n-  }, [isMobile, tabs.length]);\n-\n-  useEffect(() => {\n-    if (!isMobile || !onEnterSection) return;\n-\n-    const observer = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const index = slideRefs.current.findIndex((el) => el === entry.target);\n-          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n-            lastLoggedIndex.current = index;\n-            onEnterSection(index, tabs[index]);\n-          }\n-        });\n-      },\n-      { threshold: 0.6 }\n-    );\n-\n-    slideRefs.current.forEach((el) => {\n-      if (el) observer.observe(el);\n-    });\n-    return () => {\n-      slideRefs.current.forEach((el) => {\n-        if (el) observer.unobserve(el);\n-      });\n-    };\n-  }, [isMobile, tabs, onEnterSection]);\n-\n-  const handleTabClick = (index: number) => {\n-    const trigger = ScrollTrigger.getById('partner-scroll');\n-    if (!trigger) return;\n-\n-    ignoreScroll.current = true;\n-    setActiveTab(index);\n-    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n-    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n-    logButtonClick('Partner', `탭: ${tabs[index]}`);\n-    setTimeout(() => (ignoreScroll.current = false), 1000);\n-  };\n-\n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n-\n-  return (\n-    <ResponsiveView\n-      desktopView={\n-        <Wrapper>\n-          <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n-              <Title>{`${title1}\\n${title2}`}</Title>\n-              <Subtitle>{subtitle}</Subtitle>\n-            </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n-              <Tabs>\n-                {tabs.map((tab, index) => (\n-                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n-                    {tab}\n-                  </Tab>\n-                ))}\n-              </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n-                    >\n-                      {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-              </AnimatedDescription>\n-            </CustomBlockLayout.Right>\n-          </CustomBlockLayout>\n-        </Wrapper>\n-      }\n-      mobileView={\n-        <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n-          <Subtitle>{subtitle}</Subtitle>\n-          {slides.map((slide, index) => (\n-            <SlideWrapper\n-              key={index}\n-              ref={(el) => {\n-                slideRefs.current[index] = el;\n-              }}\n-            >\n-              <TabTitle>{tabs[index]}</TabTitle>\n-              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n-              <MobileDownloadButton\n-                href={getDownloadLink(index)}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n-              >\n-                {downloadText}\n-                <DownloadIcon style={{ fontSize: '16px' }} />\n-              </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n-            </SlideWrapper>\n-          ))}\n-        </MobileContainer>\n-      }\n-    />\n-  );\n-};\n-\n-export default Partner;\n-'use client';\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import DownloadIcon from '@mui/icons-material/Download';\n-import { useLang } from '@/contexts/LangContext';\n-import { downloadLinks } from '@/lib/i18n/downloadLinks';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { userStamp } from '@/lib/api/user/api';\n-\n-interface PartnerProps {\n-  title1: string;\n-  title2: string;\n-  subtitle: string;\n-  tabs: string[];\n-  slides: {\n-    title: string;\n-    image: string;\n-    subtitle: string;\n-    description: string;\n-  }[];\n-  downloadText: string;\n-  onEnterSection?: (index: number, tab: string) => void;\n-}\n-\n-const Title = styled.h2`\n-  ${AppTextStyles.headline2};\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 0px;\n-  line-height: 1.2;\n-  white-space: pre-line;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 25px;\n-  }\n-`;\n-\n-const Subtitle = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-    white-space: normal;\n-  }\n-`;\n-\n-const Tabs = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  margin-bottom: 10px;\n-  flex-wrap: wrap;\n-`;\n-\n-const Tab = styled.div<{ $active: boolean }>`\n-  font-size: 16px;\n-  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n-  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n-  padding-bottom: 4px;\n-  cursor: pointer;\n-  color: ${({ $active }) => ($active ? '#000' : '#888')};\n-`;\n-\n-const Slide = styled.div<{ $isActive: boolean }>`\n-  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n-`;\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n-const TabTitle = styled.h3`\n-  font-size: 25px;\n-  font-weight: bold;\n-  margin-bottom: 12px;\n-  position: relative;\n-  padding-left: 16px;\n-  color: #000;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    left: 0;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    width: 8px;\n-    height: 24px;\n-    background-color: #000000;\n-  }\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 18px;\n-  }\n-`;\n-const TabDescription = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  margin-top: 8px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-  }\n-`;\n-\n-const TabImage = styled.img`\n-  width: 100%;\n-  height: auto;\n-  margin-top: 16px;\n-  margin-bottom: 16px;\n-  border-radius: 8px;\n-`;\n-\n-const FlexRow = styled.div`\n-  display: flex;\n-  width: 100%;\n-  justify-content: space-between;\n-`;\n-\n-const LeftColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-`;\n-\n-const RightColumn = styled.div`\n-  flex-shrink: 0;\n-  display: flex;\n-  flex-direction: column;\n-  justify-content: flex-end;\n-  align-items: flex-end;\n-  padding-bottom: 20px;\n-`;\n-\n-const DownloadLink = styled.a`\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n-\n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n-  }\n-`;\n-\n-const MobileDownloadButton = styled.a`\n-  display: inline-flex;\n-  align-items: center;\n-  width: 100%;\n-  justify-content: center;\n-  padding: 10px 16px;\n-  font-size: 14px;\n-  font-weight: 600;\n-  color: #000;\n-  border: 1px solid #ccc;\n-  border-radius: 6px;\n-  text-decoration: none;\n-  gap: 6px;\n-  margin-top: 0px;\n-`;\n-\n-const AnimatedDescription = styled.div`\n-  animation: fade 0.5s ease-in-out;\n-\n-  @keyframes fade {\n-    from { opacity: 0; transform: translateY(20px); }\n-    to { opacity: 1; transform: translateY(0); }\n-  }\n-`;\n-\n-const MobileContainer = styled.div`\n-  padding: 24px 20px;\n-`;\n-\n-const SlideWrapper = styled.div`\n-  margin-bottom: 100px;\n-\n-  &:last-of-type {\n-    margin-bottom: 0;\n-  }\n-`;\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    await userStamp({\n-      uuid: localStorage.getItem('logId') ?? 'anonymous',\n-      category: '버튼',\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const Partner: React.FC<PartnerProps> = ({\n-  title1,\n-  title2,\n-  subtitle,\n-  tabs,\n-  slides,\n-  downloadText,\n-  onEnterSection,\n-}) => {\n-  const { lang } = useLang();\n-  const [activeTab, setActiveTab] = useState(0);\n-  const currentSlide = slides[activeTab];\n-  const leftRef = useRef<HTMLDivElement>(null);\n-  const rightRef = useRef<HTMLDivElement>(null);\n-  const sectionRef = useRef<HTMLDivElement>(null);\n-  const ignoreScroll = useRef(false);\n-  const activeTabRef = useRef(activeTab);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const lastLoggedIndex = useRef<number | null>(null);\n-\n-  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    activeTabRef.current = activeTab;\n-  }, [activeTab]);\n-\n-  useEffect(() => {\n-    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n-\n-    gsap.registerPlugin(ScrollTrigger);\n-    const slideHeight = window.innerHeight;\n-    const totalScroll = slideHeight * tabs.length;\n-\n-    const lastScrollY = { current: window.scrollY };\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        id: 'partner-scroll',\n-        trigger: sectionRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const progress = self.progress;\n-          let index = Math.floor(progress * tabs.length);\n-          index = Math.min(index, tabs.length - 1);\n-\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY.current;\n-          lastScrollY.current = currentScrollY;\n-\n-          if (!ignoreScroll.current) {\n-            if (index !== activeTabRef.current) {\n-              setActiveTab(index);\n-            }\n-\n-            if (\n-              isScrollingDown &&\n-              index !== lastLoggedIndex.current &&\n-              currentScrollY > self.start\n-            ) {\n-              lastLoggedIndex.current = index;\n-              onEnterSection?.(index, tabs[index]);\n-            }\n-          }\n-        },\n-      });\n-    }, sectionRef);\n-\n-    return () => ctx.revert();\n-  }, [isMobile, tabs.length]);\n-\n-  useEffect(() => {\n-    if (!isMobile || !onEnterSection) return;\n-\n-    const observer = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const index = slideRefs.current.findIndex((el) => el === entry.target);\n-          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n-            lastLoggedIndex.current = index;\n-            onEnterSection(index, tabs[index]);\n-          }\n-        });\n-      },\n-      { threshold: 0.6 }\n-    );\n-\n-    slideRefs.current.forEach((el) => {\n-      if (el) observer.observe(el);\n-    });\n-    return () => {\n-      slideRefs.current.forEach((el) => {\n-        if (el) observer.unobserve(el);\n-      });\n-    };\n-  }, [isMobile, tabs, onEnterSection]);\n-\n-  const handleTabClick = (index: number) => {\n-    const trigger = ScrollTrigger.getById('partner-scroll');\n-    if (!trigger) return;\n-\n-    ignoreScroll.current = true;\n-    setActiveTab(index);\n-    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n-    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n-    logButtonClick('Partner', `탭: ${tabs[index]}`);\n-    setTimeout(() => (ignoreScroll.current = false), 1000);\n-  };\n-\n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n-\n-  return (\n-    <ResponsiveView\n-      desktopView={\n-        <Wrapper>\n-          <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n-              <Title>{`${title1}\\n${title2}`}</Title>\n-              <Subtitle>{subtitle}</Subtitle>\n-            </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n-              <Tabs>\n-                {tabs.map((tab, index) => (\n-                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n-                    {tab}\n-                  </Tab>\n-                ))}\n-              </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `다운로드: ${tabs[activeTab]}`)}\n-                    >\n-                      {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-              </AnimatedDescription>\n-            </CustomBlockLayout.Right>\n-          </CustomBlockLayout>\n-        </Wrapper>\n-      }\n-      mobileView={\n-        <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n-          <Subtitle>{subtitle}</Subtitle>\n-          {slides.map((slide, index) => (\n-            <SlideWrapper\n-              key={index}\n-              ref={(el) => {\n-                slideRefs.current[index] = el;\n-              }}\n-            >\n-              <TabTitle>{tabs[index]}</TabTitle>\n-              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n-              <MobileDownloadButton\n-                href={getDownloadLink(index)}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `다운로드: ${tabs[index]}`)}\n-              >\n-                {downloadText}\n-                <DownloadIcon style={{ fontSize: '16px' }} />\n-              </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n-            </SlideWrapper>\n-          ))}\n-        </MobileContainer>\n-      }\n-    />\n-  );\n-};\n-\n-export default Partner;\n"
                },
                {
                    "date": 1748418062242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,16 +119,47 @@\n     font-size: 14px;\n   }\n `;\n \n+const TabImageWrapper = styled.div`\n+  position: relative;\n+  display: inline-block;\n+  width: 100%;\n+  height: auto;\n+`;\n+\n const TabImage = styled.img`\n   width: 100%;\n   height: auto;\n-  margin-top: 16px;\n-  margin-bottom: 16px;\n+  display: block;\n   border-radius: 8px;\n `;\n \n+const FoldedCorner = styled.div`\n+  position: absolute;\n+  bottom: 0;\n+  right: 0;\n+  width: 80px;\n+  height: 80px;\n+  background: white;\n+  clip-path: polygon(100% 0, 0 100%, 100% 100%);\n+  box-shadow: -3px -3px 5px rgba(0, 0, 0, 0.1);\n+  transform: rotate(180deg);\n+  z-index: 2;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    bottom: 0;\n+    right: 0;\n+    width: 100%;\n+    height: 100%;\n+    background: #f5f5f5;\n+    clip-path: polygon(100% 0, 0 100%, 100% 100%);\n+  }\n+`;\n+\n+\n const FlexRow = styled.div`\n   display: flex;\n   width: 100%;\n   justify-content: space-between;\n@@ -377,9 +408,13 @@\n                       <DownloadIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+<TabImageWrapper>\n+  <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+  <FoldedCorner />\n+</TabImageWrapper>\n+\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -405,9 +440,13 @@\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n+<TabImageWrapper>\n+  <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+  <FoldedCorner />\n+</TabImageWrapper>\n+\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748418196467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n   position: relative;\n   display: inline-block;\n   width: 100%;\n   height: auto;\n+  overflow: hidden;\n `;\n \n const TabImage = styled.img`\n   width: 100%;\n@@ -137,25 +138,28 @@\n const FoldedCorner = styled.div`\n   position: absolute;\n   bottom: 0;\n   right: 0;\n-  width: 80px;\n-  height: 80px;\n-  background: white;\n-  clip-path: polygon(100% 0, 0 100%, 100% 100%);\n-  box-shadow: -3px -3px 5px rgba(0, 0, 0, 0.1);\n-  transform: rotate(180deg);\n+  width: 100px;\n+  height: 100px;\n+  background: linear-gradient(135deg, #f5f5f5, #e0e0e0);\n+  clip-path: path('M 100 0 Q 90 10, 50 50 Q 10 90, 0 100 L 100 100 Z');\n+  animation: foldIn 1.2s ease-out forwards;\n+  transform-origin: bottom right;\n   z-index: 2;\n \n-  &::before {\n-    content: '';\n-    position: absolute;\n-    bottom: 0;\n-    right: 0;\n-    width: 100%;\n-    height: 100%;\n-    background: #f5f5f5;\n-    clip-path: polygon(100% 0, 0 100%, 100% 100%);\n+  @keyframes foldIn {\n+    0% {\n+      transform: rotate(0deg) scale(0);\n+      opacity: 0;\n+    }\n+    50% {\n+      opacity: 0.5;\n+    }\n+    100% {\n+      transform: rotate(-15deg) scale(1);\n+      opacity: 1;\n+    }\n   }\n `;\n \n \n"
                },
                {
                    "date": 1748418594418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n+import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n+\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -120,15 +122,20 @@\n   }\n `;\n \n const TabImageWrapper = styled.div`\n+  width: 100%;\n+  height: 300px; // or auto-resize via aspect-ratio\n   position: relative;\n-  display: inline-block;\n-  width: 100%;\n-  height: auto;\n-  overflow: hidden;\n+\n+  canvas {\n+    border-radius: 8px;\n+    width: 100% !important;\n+    height: 100% !important;\n+  }\n `;\n \n+\n const TabImage = styled.img`\n   width: 100%;\n   height: auto;\n   display: block;\n@@ -412,13 +419,14 @@\n                       <DownloadIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-<TabImageWrapper>\n-  <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-  <FoldedCorner />\n+                <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n </TabImageWrapper>\n \n+\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -444,13 +452,14 @@\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-<TabImageWrapper>\n-  <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-  <FoldedCorner />\n+              <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n </TabImageWrapper>\n \n+\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748418674809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n `;\n \n const TabImageWrapper = styled.div`\n   width: 100%;\n-  height: 300px; // or auto-resize via aspect-ratio\n+  height: 600px; // or auto-resize via aspect-ratio\n   position: relative;\n \n   canvas {\n     border-radius: 8px;\n"
                },
                {
                    "date": 1748418795521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,9 @@\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n-import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n-\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -121,56 +119,16 @@\n     font-size: 14px;\n   }\n `;\n \n-const TabImageWrapper = styled.div`\n-  width: 100%;\n-  height: 600px; // or auto-resize via aspect-ratio\n-  position: relative;\n-\n-  canvas {\n-    border-radius: 8px;\n-    width: 100% !important;\n-    height: 100% !important;\n-  }\n-`;\n-\n-\n const TabImage = styled.img`\n   width: 100%;\n   height: auto;\n-  display: block;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n   border-radius: 8px;\n `;\n \n-const FoldedCorner = styled.div`\n-  position: absolute;\n-  bottom: 0;\n-  right: 0;\n-  width: 100px;\n-  height: 100px;\n-  background: linear-gradient(135deg, #f5f5f5, #e0e0e0);\n-  clip-path: path('M 100 0 Q 90 10, 50 50 Q 10 90, 0 100 L 100 100 Z');\n-  animation: foldIn 1.2s ease-out forwards;\n-  transform-origin: bottom right;\n-  z-index: 2;\n-\n-  @keyframes foldIn {\n-    0% {\n-      transform: rotate(0deg) scale(0);\n-      opacity: 0;\n-    }\n-    50% {\n-      opacity: 0.5;\n-    }\n-    100% {\n-      transform: rotate(-15deg) scale(1);\n-      opacity: 1;\n-    }\n-  }\n-`;\n-\n-\n const FlexRow = styled.div`\n   display: flex;\n   width: 100%;\n   justify-content: space-between;\n@@ -419,14 +377,9 @@\n                       <DownloadIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n-</TabImageWrapper>\n-\n-\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -452,14 +405,9 @@\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n-</TabImageWrapper>\n-\n-\n+              <TabImage src={slide.image} alt={slide.title} />\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748418864133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n+import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n+\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -377,9 +379,12 @@\n                       <DownloadIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+                <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n+</TabImageWrapper>\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -405,9 +410,12 @@\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n+              <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n+</TabImageWrapper>\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748418876412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,438 @@\n+'use client';\n+\n+import React, { useState, useRef, useEffect } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import DownloadIcon from '@mui/icons-material/Download';\n+import { useLang } from '@/contexts/LangContext';\n+import { downloadLinks } from '@/lib/i18n/downloadLinks';\n+import { AppColors } from '@/styles/colors';\n+import { AppTextStyles } from '@/styles/textStyles';\n+import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n+import ResponsiveView from '@/layout/ResponsiveView';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { userStamp } from '@/lib/api/user/api';\n+import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n+\n+const TabImageWrapper = styled.div`\n+  width: 100%;\n+  height: 600px; // or auto-resize via aspect-ratio\n+  position: relative;\n+\n+  canvas {\n+    border-radius: 8px;\n+    width: 100% !important;\n+    height: 100% !important;\n+  }\n+`;\n+\n+\n+interface PartnerProps {\n+  title1: string;\n+  title2: string;\n+  subtitle: string;\n+  tabs: string[];\n+  slides: {\n+    title: string;\n+    image: string;\n+    subtitle: string;\n+    description: string;\n+  }[];\n+  downloadText: string;\n+  onEnterSection?: (index: number, tab: string) => void;\n+}\n+\n+const Title = styled.h2`\n+  ${AppTextStyles.headline2};\n+  color: ${AppColors.onSurface};\n+  margin-bottom: 0px;\n+  line-height: 1.2;\n+  white-space: pre-line;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 25px;\n+  }\n+`;\n+\n+const Subtitle = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  white-space: pre-line;\n+  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+    white-space: normal;\n+  }\n+`;\n+\n+const Tabs = styled.div`\n+  display: flex;\n+  gap: 24px;\n+  margin-bottom: 10px;\n+  flex-wrap: wrap;\n+`;\n+\n+const Tab = styled.div<{ $active: boolean }>`\n+  font-size: 16px;\n+  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n+  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n+  padding-bottom: 4px;\n+  cursor: pointer;\n+  color: ${({ $active }) => ($active ? '#000' : '#888')};\n+`;\n+\n+const Slide = styled.div<{ $isActive: boolean }>`\n+  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px; \n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+\n+`;\n+\n+\n+\n+const TabTitle = styled.h3`\n+  font-size: 25px;\n+  font-weight: bold;\n+  margin-bottom: 12px;\n+  position: relative;\n+  padding-left: 16px;\n+  color: #000;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    left: 0;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    width: 8px;\n+    height: 24px;\n+    background-color: #000000;\n+  }\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 18px;\n+  }\n+`;\n+const TabDescription = styled.p`\n+  font-size: 16px;\n+  color: #666;\n+  line-height: 1.6;\n+  margin-top: 8px;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    font-size: 14px;\n+  }\n+`;\n+\n+const TabImage = styled.img`\n+  width: 100%;\n+  height: auto;\n+  margin-top: 16px;\n+  margin-bottom: 16px;\n+  border-radius: 8px;\n+`;\n+\n+const FlexRow = styled.div`\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+`;\n+\n+const LeftColumn = styled.div`\n+  flex: 1;\n+  display: flex;\n+  flex-direction: column;\n+`;\n+\n+const RightColumn = styled.div`\n+  flex-shrink: 0;\n+  display: flex;\n+  flex-direction: column;\n+  justify-content: flex-end;\n+  align-items: flex-end;\n+  padding-bottom: 20px;\n+`;\n+\n+const DownloadLink = styled.a`\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: flex;\n+  align-items: center;\n+  justify-content: flex-end;\n+  gap: 8px;\n+  text-decoration: none;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n+const MobileDownloadButton = styled.a`\n+  display: inline-flex;\n+  align-items: center;\n+  width: 100%;\n+  justify-content: center;\n+  padding: 10px 16px;\n+  font-size: 14px;\n+  font-weight: 600;\n+  color: #000;\n+  border: 1px solid #ccc;\n+  border-radius: 6px;\n+  text-decoration: none;\n+  gap: 6px;\n+  margin-top: 0px;\n+`;\n+\n+const AnimatedDescription = styled.div`\n+  animation: fade 0.5s ease-in-out;\n+\n+  @keyframes fade {\n+    from { opacity: 0; transform: translateY(20px); }\n+    to { opacity: 1; transform: translateY(0); }\n+  }\n+`;\n+\n+const MobileContainer = styled.div`\n+  padding: 24px 20px;\n+`;\n+\n+const SlideWrapper = styled.div`\n+  margin-bottom: 100px;\n+\n+  &:last-of-type {\n+    margin-bottom: 0;\n+  }\n+`;\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    await userStamp({\n+      category: '버튼',\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const Partner: React.FC<PartnerProps> = ({\n+  title1,\n+  title2,\n+  subtitle,\n+  tabs,\n+  slides,\n+  downloadText,\n+  onEnterSection,\n+}) => {\n+  const { lang } = useLang();\n+  const [activeTab, setActiveTab] = useState(0);\n+  const currentSlide = slides[activeTab];\n+  const leftRef = useRef<HTMLDivElement>(null);\n+  const rightRef = useRef<HTMLDivElement>(null);\n+  const sectionRef = useRef<HTMLDivElement>(null);\n+  const ignoreScroll = useRef(false);\n+  const activeTabRef = useRef(activeTab);\n+  const [isMobile, setIsMobile] = useState(false);\n+  const lastLoggedIndex = useRef<number | null>(null);\n+\n+  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  useEffect(() => {\n+    activeTabRef.current = activeTab;\n+  }, [activeTab]);\n+\n+  useEffect(() => {\n+    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n+\n+    gsap.registerPlugin(ScrollTrigger);\n+    const slideHeight = window.innerHeight;\n+    const totalScroll = slideHeight * tabs.length;\n+\n+    const lastScrollY = { current: window.scrollY };\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        id: 'partner-scroll',\n+        trigger: sectionRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * tabs.length);\n+          index = Math.min(index, tabs.length - 1);\n+\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY.current;\n+          lastScrollY.current = currentScrollY;\n+\n+          if (!ignoreScroll.current) {\n+            if (index !== activeTabRef.current) {\n+              setActiveTab(index);\n+            }\n+\n+            if (\n+              isScrollingDown &&\n+              index !== lastLoggedIndex.current &&\n+              currentScrollY > self.start\n+            ) {\n+              lastLoggedIndex.current = index;\n+              onEnterSection?.(index, tabs[index]);\n+            }\n+          }\n+        },\n+      });\n+    }, sectionRef);\n+\n+    return () => ctx.revert();\n+  }, [isMobile, tabs.length]);\n+\n+  useEffect(() => {\n+    if (!isMobile || !onEnterSection) return;\n+\n+    const observer = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const index = slideRefs.current.findIndex((el) => el === entry.target);\n+          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n+            lastLoggedIndex.current = index;\n+            onEnterSection(index, tabs[index]);\n+          }\n+        });\n+      },\n+      { threshold: 0.6 }\n+    );\n+\n+    slideRefs.current.forEach((el) => {\n+      if (el) observer.observe(el);\n+    });\n+    return () => {\n+      slideRefs.current.forEach((el) => {\n+        if (el) observer.unobserve(el);\n+      });\n+    };\n+  }, [isMobile, tabs, onEnterSection]);\n+\n+  const handleTabClick = (index: number) => {\n+    const trigger = ScrollTrigger.getById('partner-scroll');\n+    if (!trigger) return;\n+\n+    ignoreScroll.current = true;\n+    setActiveTab(index);\n+    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n+    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n+    logButtonClick('Partner', `탭: ${tabs[index]}`);\n+    setTimeout(() => (ignoreScroll.current = false), 1000);\n+  };\n+\n+  const getDownloadLink = (index: number) => {\n+    switch (index) {\n+      case 0: return downloadLinks.antiDroneProposal[lang];\n+      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n+      case 2: return downloadLinks.tradeProposal[lang];\n+      case 3: return downloadLinks.tableOrderProposal[lang];\n+      default: return '#';\n+    }\n+  };\n+\n+  return (\n+    <ResponsiveView\n+      desktopView={\n+        <Wrapper>\n+          <CustomBlockLayout ref={sectionRef}>\n+            <CustomBlockLayout.Left ref={leftRef}>\n+              <Title>{`${title1}\\n${title2}`}</Title>\n+              <Subtitle>{subtitle}</Subtitle>\n+            </CustomBlockLayout.Left>\n+            <CustomBlockLayout.Right ref={rightRef}>\n+              <Tabs>\n+                {tabs.map((tab, index) => (\n+                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+                    {tab}\n+                  </Tab>\n+                ))}\n+              </Tabs>\n+              <AnimatedDescription key={activeTab}>\n+                <FlexRow>\n+                  <LeftColumn>\n+                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n+                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+                  </LeftColumn>\n+                  <RightColumn>\n+                    <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n+                    >\n+                      {downloadText}\n+                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n+                  </RightColumn>\n+                </FlexRow>\n+                <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n+</TabImageWrapper>\n+              </AnimatedDescription>\n+            </CustomBlockLayout.Right>\n+          </CustomBlockLayout>\n+        </Wrapper>\n+      }\n+      mobileView={\n+        <MobileContainer>\n+          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n+          <Subtitle>{subtitle}</Subtitle>\n+          {slides.map((slide, index) => (\n+            <SlideWrapper\n+              key={index}\n+              ref={(el) => {\n+                slideRefs.current[index] = el;\n+              }}\n+            >\n+              <TabTitle>{tabs[index]}</TabTitle>\n+              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n+              <MobileDownloadButton\n+                href={getDownloadLink(index)}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+                onClick={() => logButtonClick('Partner', `${tabs[index]} 제안서 다운로드`)}\n+              >\n+                {downloadText}\n+                <DownloadIcon style={{ fontSize: '16px' }} />\n+              </MobileDownloadButton>\n+              <TabImageWrapper>\n+  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n+  <FoldedImageCanvas image={currentSlide.image} />\n+</TabImageWrapper>\n+            </SlideWrapper>\n+          ))}\n+        </MobileContainer>\n+      }\n+    />\n+  );\n+};\n+\n+export default Partner;\n"
                },
                {
                    "date": 1748423419855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,11 +392,11 @@\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n                 <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n+  <FoldedImageCanvas key={activeTab} image={currentSlide.image} />\n </TabImageWrapper>\n+\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -423,437 +423,11 @@\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n               <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n+  <FoldedImageCanvas key={activeTab} image={currentSlide.image} />\n </TabImageWrapper>\n-            </SlideWrapper>\n-          ))}\n-        </MobileContainer>\n-      }\n-    />\n-  );\n-};\n \n-export default Partner;\n-'use client';\n-\n-import React, { useState, useRef, useEffect } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import DownloadIcon from '@mui/icons-material/Download';\n-import { useLang } from '@/contexts/LangContext';\n-import { downloadLinks } from '@/lib/i18n/downloadLinks';\n-import { AppColors } from '@/styles/colors';\n-import { AppTextStyles } from '@/styles/textStyles';\n-import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n-import ResponsiveView from '@/layout/ResponsiveView';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { userStamp } from '@/lib/api/user/api';\n-import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n-\n-\n-interface PartnerProps {\n-  title1: string;\n-  title2: string;\n-  subtitle: string;\n-  tabs: string[];\n-  slides: {\n-    title: string;\n-    image: string;\n-    subtitle: string;\n-    description: string;\n-  }[];\n-  downloadText: string;\n-  onEnterSection?: (index: number, tab: string) => void;\n-}\n-\n-const Title = styled.h2`\n-  ${AppTextStyles.headline2};\n-  color: ${AppColors.onSurface};\n-  margin-bottom: 0px;\n-  line-height: 1.2;\n-  white-space: pre-line;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 25px;\n-  }\n-`;\n-\n-const Subtitle = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-    white-space: normal;\n-  }\n-`;\n-\n-const Tabs = styled.div`\n-  display: flex;\n-  gap: 24px;\n-  margin-bottom: 10px;\n-  flex-wrap: wrap;\n-`;\n-\n-const Tab = styled.div<{ $active: boolean }>`\n-  font-size: 16px;\n-  font-weight: ${({ $active }) => ($active ? 'bold' : 'normal')};\n-  border-bottom: ${({ $active }) => ($active ? '2px solid #000' : 'none')};\n-  padding-bottom: 4px;\n-  cursor: pointer;\n-  color: ${({ $active }) => ($active ? '#000' : '#888')};\n-`;\n-\n-const Slide = styled.div<{ $isActive: boolean }>`\n-  display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n-`;\n-\n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n-const TabTitle = styled.h3`\n-  font-size: 25px;\n-  font-weight: bold;\n-  margin-bottom: 12px;\n-  position: relative;\n-  padding-left: 16px;\n-  color: #000;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    left: 0;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    width: 8px;\n-    height: 24px;\n-    background-color: #000000;\n-  }\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 18px;\n-  }\n-`;\n-const TabDescription = styled.p`\n-  font-size: 16px;\n-  color: #666;\n-  line-height: 1.6;\n-  margin-top: 8px;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    font-size: 14px;\n-  }\n-`;\n-\n-const TabImage = styled.img`\n-  width: 100%;\n-  height: auto;\n-  margin-top: 16px;\n-  margin-bottom: 16px;\n-  border-radius: 8px;\n-`;\n-\n-const FlexRow = styled.div`\n-  display: flex;\n-  width: 100%;\n-  justify-content: space-between;\n-`;\n-\n-const LeftColumn = styled.div`\n-  flex: 1;\n-  display: flex;\n-  flex-direction: column;\n-`;\n-\n-const RightColumn = styled.div`\n-  flex-shrink: 0;\n-  display: flex;\n-  flex-direction: column;\n-  justify-content: flex-end;\n-  align-items: flex-end;\n-  padding-bottom: 20px;\n-`;\n-\n-const DownloadLink = styled.a`\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n-\n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n-  }\n-`;\n-\n-const MobileDownloadButton = styled.a`\n-  display: inline-flex;\n-  align-items: center;\n-  width: 100%;\n-  justify-content: center;\n-  padding: 10px 16px;\n-  font-size: 14px;\n-  font-weight: 600;\n-  color: #000;\n-  border: 1px solid #ccc;\n-  border-radius: 6px;\n-  text-decoration: none;\n-  gap: 6px;\n-  margin-top: 0px;\n-`;\n-\n-const AnimatedDescription = styled.div`\n-  animation: fade 0.5s ease-in-out;\n-\n-  @keyframes fade {\n-    from { opacity: 0; transform: translateY(20px); }\n-    to { opacity: 1; transform: translateY(0); }\n-  }\n-`;\n-\n-const MobileContainer = styled.div`\n-  padding: 24px 20px;\n-`;\n-\n-const SlideWrapper = styled.div`\n-  margin-bottom: 100px;\n-\n-  &:last-of-type {\n-    margin-bottom: 0;\n-  }\n-`;\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    await userStamp({\n-      category: '버튼',\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const Partner: React.FC<PartnerProps> = ({\n-  title1,\n-  title2,\n-  subtitle,\n-  tabs,\n-  slides,\n-  downloadText,\n-  onEnterSection,\n-}) => {\n-  const { lang } = useLang();\n-  const [activeTab, setActiveTab] = useState(0);\n-  const currentSlide = slides[activeTab];\n-  const leftRef = useRef<HTMLDivElement>(null);\n-  const rightRef = useRef<HTMLDivElement>(null);\n-  const sectionRef = useRef<HTMLDivElement>(null);\n-  const ignoreScroll = useRef(false);\n-  const activeTabRef = useRef(activeTab);\n-  const [isMobile, setIsMobile] = useState(false);\n-  const lastLoggedIndex = useRef<number | null>(null);\n-\n-  const slideRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    const checkMobile = () => {\n-      setIsMobile(window.innerWidth < Breakpoints.mobile);\n-    };\n-    checkMobile();\n-    window.addEventListener('resize', checkMobile);\n-    return () => window.removeEventListener('resize', checkMobile);\n-  }, []);\n-\n-  useEffect(() => {\n-    activeTabRef.current = activeTab;\n-  }, [activeTab]);\n-\n-  useEffect(() => {\n-    if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n-\n-    gsap.registerPlugin(ScrollTrigger);\n-    const slideHeight = window.innerHeight;\n-    const totalScroll = slideHeight * tabs.length;\n-\n-    const lastScrollY = { current: window.scrollY };\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        id: 'partner-scroll',\n-        trigger: sectionRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const progress = self.progress;\n-          let index = Math.floor(progress * tabs.length);\n-          index = Math.min(index, tabs.length - 1);\n-\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY.current;\n-          lastScrollY.current = currentScrollY;\n-\n-          if (!ignoreScroll.current) {\n-            if (index !== activeTabRef.current) {\n-              setActiveTab(index);\n-            }\n-\n-            if (\n-              isScrollingDown &&\n-              index !== lastLoggedIndex.current &&\n-              currentScrollY > self.start\n-            ) {\n-              lastLoggedIndex.current = index;\n-              onEnterSection?.(index, tabs[index]);\n-            }\n-          }\n-        },\n-      });\n-    }, sectionRef);\n-\n-    return () => ctx.revert();\n-  }, [isMobile, tabs.length]);\n-\n-  useEffect(() => {\n-    if (!isMobile || !onEnterSection) return;\n-\n-    const observer = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const index = slideRefs.current.findIndex((el) => el === entry.target);\n-          if (entry.isIntersecting && index !== -1 && index !== lastLoggedIndex.current) {\n-            lastLoggedIndex.current = index;\n-            onEnterSection(index, tabs[index]);\n-          }\n-        });\n-      },\n-      { threshold: 0.6 }\n-    );\n-\n-    slideRefs.current.forEach((el) => {\n-      if (el) observer.observe(el);\n-    });\n-    return () => {\n-      slideRefs.current.forEach((el) => {\n-        if (el) observer.unobserve(el);\n-      });\n-    };\n-  }, [isMobile, tabs, onEnterSection]);\n-\n-  const handleTabClick = (index: number) => {\n-    const trigger = ScrollTrigger.getById('partner-scroll');\n-    if (!trigger) return;\n-\n-    ignoreScroll.current = true;\n-    setActiveTab(index);\n-    const scrollY = trigger.start + (trigger.end - trigger.start) * (index / tabs.length);\n-    window.scrollTo({ top: scrollY, behavior: 'smooth' });\n-    logButtonClick('Partner', `탭: ${tabs[index]}`);\n-    setTimeout(() => (ignoreScroll.current = false), 1000);\n-  };\n-\n-  const getDownloadLink = (index: number) => {\n-    switch (index) {\n-      case 0: return downloadLinks.antiDroneProposal[lang];\n-      case 1: return downloadLinks.luxuryReverseAuctionProposal[lang];\n-      case 2: return downloadLinks.tradeProposal[lang];\n-      case 3: return downloadLinks.tableOrderProposal[lang];\n-      default: return '#';\n-    }\n-  };\n-\n-  return (\n-    <ResponsiveView\n-      desktopView={\n-        <Wrapper>\n-          <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n-              <Title>{`${title1}\\n${title2}`}</Title>\n-              <Subtitle>{subtitle}</Subtitle>\n-            </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n-              <Tabs>\n-                {tabs.map((tab, index) => (\n-                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n-                    {tab}\n-                  </Tab>\n-                ))}\n-              </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n-                    >\n-                      {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n-</TabImageWrapper>\n-              </AnimatedDescription>\n-            </CustomBlockLayout.Right>\n-          </CustomBlockLayout>\n-        </Wrapper>\n-      }\n-      mobileView={\n-        <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n-          <Subtitle>{subtitle}</Subtitle>\n-          {slides.map((slide, index) => (\n-            <SlideWrapper\n-              key={index}\n-              ref={(el) => {\n-                slideRefs.current[index] = el;\n-              }}\n-            >\n-              <TabTitle>{tabs[index]}</TabTitle>\n-              <TabDescription>{slide.description.replace(/<br\\s*\\/?>/gi, '')}</TabDescription>\n-              <MobileDownloadButton\n-                href={getDownloadLink(index)}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-                onClick={() => logButtonClick('Partner', `${tabs[index]} 제안서 다운로드`)}\n-              >\n-                {downloadText}\n-                <DownloadIcon style={{ fontSize: '16px' }} />\n-              </MobileDownloadButton>\n-              <TabImageWrapper>\n-  {/* 기존 코드: <TabImage src={currentSlide.image} alt={currentSlide.title} /> */}\n-  <FoldedImageCanvas image={currentSlide.image} />\n-</TabImageWrapper>\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748423671612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,23 +12,9 @@\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n-import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n-const TabImageWrapper = styled.div`\n-  width: 100%;\n-  height: 600px; // or auto-resize via aspect-ratio\n-  position: relative;\n-\n-  canvas {\n-    border-radius: 8px;\n-    width: 100% !important;\n-    height: 100% !important;\n-  }\n-`;\n-\n-\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -391,12 +377,9 @@\n                       <DownloadIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImageWrapper>\n-  <FoldedImageCanvas key={activeTab} image={currentSlide.image} />\n-</TabImageWrapper>\n-\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -422,12 +405,9 @@\n               >\n                 {downloadText}\n                 <DownloadIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImageWrapper>\n-  <FoldedImageCanvas key={activeTab} image={currentSlide.image} />\n-</TabImageWrapper>\n-\n+              <TabImage src={slide.image} alt={slide.title} />\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748431039413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,40 +149,91 @@\n   padding-bottom: 20px;\n `;\n \n const DownloadLink = styled.a`\n+  position: relative;\n   font-size: 14px;\n   color: #000000;\n   cursor: pointer;\n   display: flex;\n   align-items: center;\n   justify-content: flex-end;\n   gap: 8px;\n   text-decoration: none;\n-  animation: bounceY 1.5s ease-in-out infinite;\n+  z-index: 1; /* content 우선 */\n \n-  @keyframes bounceY {\n-    0%, 100% { transform: translateY(0px); }\n-    50% { transform: translateY(-10px); }\n+  padding: 10px 14px;\n+  border-radius: 8px;\n+  background-color: white;\n+  overflow: hidden;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    inset: 0;\n+    padding: 2px;\n+    border-radius: 8px;\n+    background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+    background-size: 300% 300%;\n+    animation: gradientBorder 3s ease infinite;\n+    z-index: -1;\n+    mask: \n+      linear-gradient(#fff 0 0) content-box, \n+      linear-gradient(#fff 0 0);\n+    mask-composite: exclude;\n+    -webkit-mask-composite: destination-out;\n   }\n+\n+  @keyframes gradientBorder {\n+    0% { background-position: 0% 50%; }\n+    50% { background-position: 100% 50%; }\n+    100% { background-position: 0% 50%; }\n+  }\n `;\n \n+\n const MobileDownloadButton = styled.a`\n+  position: relative;\n   display: inline-flex;\n   align-items: center;\n   width: 100%;\n   justify-content: center;\n   padding: 10px 16px;\n   font-size: 14px;\n   font-weight: 600;\n   color: #000;\n-  border: 1px solid #ccc;\n-  border-radius: 6px;\n   text-decoration: none;\n   gap: 6px;\n-  margin-top: 0px;\n+  border-radius: 6px;\n+  background-color: white;\n+  overflow: hidden;\n+  z-index: 1;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    inset: 0;\n+    padding: 1.5px;\n+    border-radius: 6px;\n+    background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+    background-size: 300% 300%;\n+    animation: gradientBorder 3s ease infinite;\n+    z-index: -1;\n+    mask: \n+      linear-gradient(#fff 0 0) content-box, \n+      linear-gradient(#fff 0 0);\n+    mask-composite: exclude;\n+    -webkit-mask-composite: destination-out;\n+  }\n+\n+  @keyframes gradientBorder {\n+    0% { background-position: 0% 50%; }\n+    50% { background-position: 100% 50%; }\n+    100% { background-position: 0% 50%; }\n+  }\n `;\n \n+\n const AnimatedDescription = styled.div`\n   animation: fade 0.5s ease-in-out;\n \n   @keyframes fade {\n"
                },
                {
                    "date": 1748431157374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,11 @@\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n+import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n \n+\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -424,9 +426,9 @@\n                       rel=\"noopener noreferrer\"\n                       onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n                     >\n                       {downloadText}\n-                      <DownloadIcon style={{ fontSize: '16px' }} />\n+                      <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n                 <TabImage src={currentSlide.image} alt={currentSlide.title} />\n@@ -454,9 +456,9 @@\n                 rel=\"noopener noreferrer\"\n                 onClick={() => logButtonClick('Partner', `${tabs[index]} 제안서 다운로드`)}\n               >\n                 {downloadText}\n-                <DownloadIcon style={{ fontSize: '16px' }} />\n+                <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n               <TabImage src={slide.image} alt={slide.title} />\n             </SlideWrapper>\n           ))}\n"
                },
                {
                    "date": 1748431347330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,9 +430,12 @@\n                       <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+                <TabImageWrapper>\n+  <FoldedImageCanvas image={slide.image} />\n+</TabImageWrapper>\n+\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -458,9 +461,12 @@\n               >\n                 {downloadText}\n                 <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImage src={slide.image} alt={slide.title} />\n+              <TabImageWrapper>\n+  <FoldedImageCanvas image={slide.image} />\n+</TabImageWrapper>\n+\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748431456281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,23 @@\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n+import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n+const TabImageWrapper = styled.div`\n+  width: 100%;\n+  height: 300px; // or auto-resize via aspect-ratio\n+  position: relative;\n \n+  canvas {\n+    border-radius: 8px;\n+    width: 100% !important;\n+    height: 100% !important;\n+  }\n+`;\n+\n+\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -431,9 +444,9 @@\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n                 <TabImageWrapper>\n-  <FoldedImageCanvas image={slide.image} />\n+  <FoldedImageCanvas image={currentSlide.image} />\n </TabImageWrapper>\n \n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n"
                },
                {
                    "date": 1748431744474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,23 +13,10 @@\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n-import FoldedImageCanvas from '@/components/FoldedImageCanvas';\n \n-const TabImageWrapper = styled.div`\n-  width: 100%;\n-  height: 300px; // or auto-resize via aspect-ratio\n-  position: relative;\n \n-  canvas {\n-    border-radius: 8px;\n-    width: 100% !important;\n-    height: 100% !important;\n-  }\n-`;\n-\n-\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -443,12 +430,9 @@\n                       <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n-                <TabImageWrapper>\n-  <FoldedImageCanvas image={currentSlide.image} />\n-</TabImageWrapper>\n-\n+                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n               </AnimatedDescription>\n             </CustomBlockLayout.Right>\n           </CustomBlockLayout>\n         </Wrapper>\n@@ -474,12 +458,9 @@\n               >\n                 {downloadText}\n                 <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n-              <TabImageWrapper>\n-  <FoldedImageCanvas image={slide.image} />\n-</TabImageWrapper>\n-\n+              <TabImage src={slide.image} alt={slide.title} />\n             </SlideWrapper>\n           ))}\n         </MobileContainer>\n       }\n"
                },
                {
                    "date": 1748432184332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,20 @@\n 'use client';\n \n import React, { useState, useRef, useEffect } from 'react';\n-import styled from 'styled-components';\n+import styled, { keyframes } from 'styled-components';\n import { gsap } from 'gsap';\n import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import DownloadIcon from '@mui/icons-material/Download';\n+import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n import { useLang } from '@/contexts/LangContext';\n import { downloadLinks } from '@/lib/i18n/downloadLinks';\n import { AppColors } from '@/styles/colors';\n import { AppTextStyles } from '@/styles/textStyles';\n import CustomBlockLayout from '@/customComponents/CustomBlockLayout';\n import ResponsiveView from '@/layout/ResponsiveView';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { userStamp } from '@/lib/api/user/api';\n-import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\n \n-\n interface PartnerProps {\n   title1: string;\n   title2: string;\n   subtitle: string;\n@@ -30,8 +28,82 @@\n   downloadText: string;\n   onEnterSection?: (index: number, tab: string) => void;\n }\n \n+const moveArrow = keyframes`\n+  0% { transform: translateX(0); opacity: 0.3; }\n+  50% { transform: translateX(6px); opacity: 1; }\n+  100% { transform: translateX(0); opacity: 0.3; }\n+`;\n+\n+const gradientBorder = keyframes`\n+  0% { background-position: 0% 50%; }\n+  50% { background-position: 100% 50%; }\n+  100% { background-position: 0% 50%; }\n+`;\n+\n+const typewriter = keyframes`\n+  from { width: 0; }\n+  to { width: 100%; }\n+`;\n+\n+const Wrapper = styled.div`\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: #fff;\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 100%;\n+  }\n+`;\n+const DownloadLink = styled.a`\n+  position: relative;\n+  font-size: 14px;\n+  color: #000000;\n+  cursor: pointer;\n+  display: inline-flex;\n+  align-items: center;\n+  justify-content: center;\n+  gap: 6px;\n+  padding: 10px 14px;\n+  border-radius: 8px;\n+  background-color: white;\n+  overflow: hidden;\n+  z-index: 1;\n+  text-decoration: none;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    inset: 0;\n+    padding: 2px;\n+    border-radius: 8px;\n+    background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n+    background-size: 300% 300%;\n+    animation: ${gradientBorder} 3s ease infinite;\n+    z-index: -1;\n+    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n+    mask-composite: exclude;\n+    -webkit-mask-composite: destination-out;\n+  }\n+\n+  .text {\n+    display: inline-block;\n+    white-space: nowrap;\n+    overflow: hidden;\n+    animation: ${typewriter} 2s steps(20, end) infinite alternate;\n+  }\n+\n+  .icon {\n+    animation: ${moveArrow} 1.5s infinite;\n+  }\n+`;\n+\n+const MobileDownloadButton = styled(DownloadLink)`\n+  width: 100%;\n+  border-radius: 6px;\n+  padding: 10px 16px;\n+`;\n+\n const Title = styled.h2`\n   ${AppTextStyles.headline2};\n   color: ${AppColors.onSurface};\n   margin-bottom: 0px;\n@@ -47,16 +119,15 @@\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n   white-space: pre-line;\n-  margin-bottom: 100px; /* ✅ 모바일 간격 */\n+  margin-bottom: 100px;\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 14px;\n     white-space: normal;\n   }\n `;\n-\n const Tabs = styled.div`\n   display: flex;\n   gap: 24px;\n   margin-bottom: 10px;\n@@ -75,20 +146,8 @@\n const Slide = styled.div<{ $isActive: boolean }>`\n   display: ${({ $isActive }) => ($isActive ? 'block' : 'none')};\n `;\n \n-const Wrapper = styled.div`\n-  min-width: ${Breakpoints.desktop}px; \n-  background-color: #fff;\n-\n-  @media (max-width: ${Breakpoints.mobile}px) {\n-    min-width: 100%;\n-  }\n-\n-`;\n-\n-\n-\n const TabTitle = styled.h3`\n   font-size: 25px;\n   font-weight: bold;\n   margin-bottom: 12px;\n@@ -110,8 +169,9 @@\n   @media (max-width: ${Breakpoints.mobile}px) {\n     font-size: 18px;\n   }\n `;\n+\n const TabDescription = styled.p`\n   font-size: 16px;\n   color: #666;\n   line-height: 1.6;\n@@ -150,92 +210,8 @@\n   align-items: flex-end;\n   padding-bottom: 20px;\n `;\n \n-const DownloadLink = styled.a`\n-  position: relative;\n-  font-size: 14px;\n-  color: #000000;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  justify-content: flex-end;\n-  gap: 8px;\n-  text-decoration: none;\n-  z-index: 1; /* content 우선 */\n-\n-  padding: 10px 14px;\n-  border-radius: 8px;\n-  background-color: white;\n-  overflow: hidden;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    inset: 0;\n-    padding: 2px;\n-    border-radius: 8px;\n-    background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n-    background-size: 300% 300%;\n-    animation: gradientBorder 3s ease infinite;\n-    z-index: -1;\n-    mask: \n-      linear-gradient(#fff 0 0) content-box, \n-      linear-gradient(#fff 0 0);\n-    mask-composite: exclude;\n-    -webkit-mask-composite: destination-out;\n-  }\n-\n-  @keyframes gradientBorder {\n-    0% { background-position: 0% 50%; }\n-    50% { background-position: 100% 50%; }\n-    100% { background-position: 0% 50%; }\n-  }\n-`;\n-\n-\n-const MobileDownloadButton = styled.a`\n-  position: relative;\n-  display: inline-flex;\n-  align-items: center;\n-  width: 100%;\n-  justify-content: center;\n-  padding: 10px 16px;\n-  font-size: 14px;\n-  font-weight: 600;\n-  color: #000;\n-  text-decoration: none;\n-  gap: 6px;\n-  border-radius: 6px;\n-  background-color: white;\n-  overflow: hidden;\n-  z-index: 1;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    inset: 0;\n-    padding: 1.5px;\n-    border-radius: 6px;\n-    background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n-    background-size: 300% 300%;\n-    animation: gradientBorder 3s ease infinite;\n-    z-index: -1;\n-    mask: \n-      linear-gradient(#fff 0 0) content-box, \n-      linear-gradient(#fff 0 0);\n-    mask-composite: exclude;\n-    -webkit-mask-composite: destination-out;\n-  }\n-\n-  @keyframes gradientBorder {\n-    0% { background-position: 0% 50%; }\n-    50% { background-position: 100% 50%; }\n-    100% { background-position: 0% 50%; }\n-  }\n-`;\n-\n-\n const AnimatedDescription = styled.div`\n   animation: fade 0.5s ease-in-out;\n \n   @keyframes fade {\n@@ -262,12 +238,12 @@\n       content,\n       memo,\n     });\n   } catch (e) {\n+    // 실패 시 무시\n   }\n };\n \n-\n const Partner: React.FC<PartnerProps> = ({\n   title1,\n   title2,\n   subtitle,\n@@ -300,9 +276,8 @@\n \n   useEffect(() => {\n     activeTabRef.current = activeTab;\n   }, [activeTab]);\n-\n   useEffect(() => {\n     if (isMobile || !leftRef.current || !rightRef.current || !sectionRef.current) return;\n \n     gsap.registerPlugin(ScrollTrigger);\n@@ -401,10 +376,10 @@\n       desktopView={\n         <Wrapper>\n           <CustomBlockLayout ref={sectionRef}>\n             <CustomBlockLayout.Left ref={leftRef}>\n-              <Title>{`${title1}\\n${title2}`}</Title>\n-              <Subtitle>{subtitle}</Subtitle>\n+              <h2 style={{ whiteSpace: 'pre-line', marginBottom: 0 }}>{`${title1}\\n${title2}`}</h2>\n+              <p style={{ marginBottom: 100 }}>{subtitle}</p>\n             </CustomBlockLayout.Left>\n             <CustomBlockLayout.Right ref={rightRef}>\n               <Tabs>\n                 {tabs.map((tab, index) => (\n@@ -425,10 +400,10 @@\n                       target=\"_blank\"\n                       rel=\"noopener noreferrer\"\n                       onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n                     >\n-                      {downloadText}\n-                      <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n+                      <span className=\"text\">{downloadText}</span>\n+                      <ArrowForwardIosIcon className=\"icon\" style={{ fontSize: '16px' }} />\n                     </DownloadLink>\n                   </RightColumn>\n                 </FlexRow>\n                 <TabImage src={currentSlide.image} alt={currentSlide.title} />\n@@ -438,10 +413,10 @@\n         </Wrapper>\n       }\n       mobileView={\n         <MobileContainer>\n-          <Title style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</Title>\n-          <Subtitle>{subtitle}</Subtitle>\n+          <h2 style={{ whiteSpace: 'pre-line' }}>{`${title1}\\n${title2}`}</h2>\n+          <p>{subtitle}</p>\n           {slides.map((slide, index) => (\n             <SlideWrapper\n               key={index}\n               ref={(el) => {\n@@ -455,10 +430,10 @@\n                 target=\"_blank\"\n                 rel=\"noopener noreferrer\"\n                 onClick={() => logButtonClick('Partner', `${tabs[index]} 제안서 다운로드`)}\n               >\n-                {downloadText}\n-                <ArrowForwardIosIcon style={{ fontSize: '16px' }} />\n+                <span className=\"text\">{downloadText}</span>\n+                <ArrowForwardIosIcon className=\"icon\" style={{ fontSize: '16px' }} />\n               </MobileDownloadButton>\n               <TabImage src={slide.image} alt={slide.title} />\n             </SlideWrapper>\n           ))}\n"
                },
                {
                    "date": 1748432317431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,14 @@\n   downloadText: string;\n   onEnterSection?: (index: number, tab: string) => void;\n }\n \n+const arrowSlide = keyframes`\n+  0% { transform: translateX(-30%); opacity: 0; }\n+  30% { opacity: 1; }\n+  100% { transform: translateX(100%); opacity: 0; }\n+`;\n+\n const moveArrow = keyframes`\n   0% { transform: translateX(0); opacity: 0.3; }\n   50% { transform: translateX(6px); opacity: 1; }\n   100% { transform: translateX(0); opacity: 0.3; }\n@@ -84,18 +90,18 @@\n     mask-composite: exclude;\n     -webkit-mask-composite: destination-out;\n   }\n \n+  .icon {\n+    animation: ${arrowSlide} 3s ease-in-out infinite;\n+  }\n+\n   .text {\n     display: inline-block;\n     white-space: nowrap;\n     overflow: hidden;\n-    animation: ${typewriter} 2s steps(20, end) infinite alternate;\n+    animation: ${typewriter} 3s steps(20, end) infinite;\n   }\n-\n-  .icon {\n-    animation: ${moveArrow} 1.5s infinite;\n-  }\n `;\n \n const MobileDownloadButton = styled(DownloadLink)`\n   width: 100%;\n"
                },
                {
                    "date": 1748432371037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,24 +83,24 @@\n     padding: 2px;\n     border-radius: 8px;\n     background: linear-gradient(90deg, #5708fb, #be83ea, #5708fb);\n     background-size: 300% 300%;\n-    animation: ${gradientBorder} 3s ease infinite;\n+    animation: ${gradientBorder} 2s ease infinite;\n     z-index: -1;\n     mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n     mask-composite: exclude;\n     -webkit-mask-composite: destination-out;\n   }\n \n   .icon {\n-    animation: ${arrowSlide} 3s ease-in-out infinite;\n+    animation: ${arrowSlide} 2s ease-in-out infinite;\n   }\n \n   .text {\n     display: inline-block;\n     white-space: nowrap;\n     overflow: hidden;\n-    animation: ${typewriter} 3s steps(20, end) infinite;\n+    animation: ${typewriter} 2s steps(20, end) infinite;\n   }\n `;\n \n const MobileDownloadButton = styled(DownloadLink)`\n"
                },
                {
                    "date": 1748432449308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,42 +381,37 @@\n     <ResponsiveView\n       desktopView={\n         <Wrapper>\n           <CustomBlockLayout ref={sectionRef}>\n-            <CustomBlockLayout.Left ref={leftRef}>\n-              <h2 style={{ whiteSpace: 'pre-line', marginBottom: 0 }}>{`${title1}\\n${title2}`}</h2>\n-              <p style={{ marginBottom: 100 }}>{subtitle}</p>\n-            </CustomBlockLayout.Left>\n-            <CustomBlockLayout.Right ref={rightRef}>\n-              <Tabs>\n-                {tabs.map((tab, index) => (\n-                  <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n-                    {tab}\n-                  </Tab>\n-                ))}\n-              </Tabs>\n-              <AnimatedDescription key={activeTab}>\n-                <FlexRow>\n-                  <LeftColumn>\n-                    <TabTitle>{currentSlide.subtitle}</TabTitle>\n-                    <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n-                  </LeftColumn>\n-                  <RightColumn>\n-                    <DownloadLink\n-                      href={getDownloadLink(activeTab)}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n-                    >\n-                      <span className=\"text\">{downloadText}</span>\n-                      <ArrowForwardIosIcon className=\"icon\" style={{ fontSize: '16px' }} />\n-                    </DownloadLink>\n-                  </RightColumn>\n-                </FlexRow>\n-                <TabImage src={currentSlide.image} alt={currentSlide.title} />\n-              </AnimatedDescription>\n-            </CustomBlockLayout.Right>\n-          </CustomBlockLayout>\n+  <CustomBlockLayout.Left ref={leftRef}>\n+    <Title>{`${title1}\\n${title2}`}</Title>\n+    <Subtitle>{subtitle}</Subtitle>\n+  </CustomBlockLayout.Left>\n+\n+  <CustomBlockLayout.Right ref={rightRef}>\n+    <Tabs>\n+      {tabs.map((tab, index) => (\n+        <Tab key={index} $active={activeTab === index} onClick={() => handleTabClick(index)}>\n+          {tab}\n+        </Tab>\n+      ))}\n+    </Tabs>\n+\n+    <AnimatedDescription key={activeTab}>\n+      <FlexRow>\n+        <LeftColumn>\n+          <TabTitle>{currentSlide.subtitle}</TabTitle>\n+          <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n+        </LeftColumn>\n+        <RightColumn>\n+          {/* DownloadLink 들어가는 곳 */}\n+        </RightColumn>\n+      </FlexRow>\n+      <TabImage src={currentSlide.image} alt={currentSlide.title} />\n+    </AnimatedDescription>\n+  </CustomBlockLayout.Right>\n+</CustomBlockLayout>\n+\n         </Wrapper>\n       }\n       mobileView={\n         <MobileContainer>\n"
                },
                {
                    "date": 1748432510038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,9 +402,17 @@\n           <TabTitle>{currentSlide.subtitle}</TabTitle>\n           <TabDescription dangerouslySetInnerHTML={{ __html: currentSlide.description }} />\n         </LeftColumn>\n         <RightColumn>\n-          {/* DownloadLink 들어가는 곳 */}\n+        <DownloadLink\n+                      href={getDownloadLink(activeTab)}\n+                      target=\"_blank\"\n+                      rel=\"noopener noreferrer\"\n+                      onClick={() => logButtonClick('Partner', `${tabs[activeTab]} 제안서 다운로드`)}\n+                    >\n+                      <span className=\"text\">{downloadText}</span>\n+                      <ArrowForwardIosIcon className=\"icon\" style={{ fontSize: '16px' }} />\n+                    </DownloadLink>\n         </RightColumn>\n       </FlexRow>\n       <TabImage src={currentSlide.image} alt={currentSlide.title} />\n     </AnimatedDescription>\n"
                }
            ],
            "date": 1747725449250,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Image from 'next/image';\nimport { Breakpoints } from '@/constants/layoutConstants';\nimport { AppColors } from '@/styles/colors';\nimport { CustomNavigator } from '@/customComponents/CustomNavigator';\n\ninterface EventBlockProps {\n  slides: { image: string }[];\n  topLabel: string;\n  centerLabel: string;\n  bottomLabel: string;\n  title: string;\n  description: string;\n  onTopArrowClick?: () => void;\n  onBottomArrowClick?: () => void;\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px;\n  background-color: ${AppColors.background};\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 100px;\n`;\n\nconst ImageBox = styled.div`\n  width: 1200px;\n  height: 600px;\n  border-radius: 16px;\n  overflow: hidden;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n`;\n\nexport default function EventBlock({\n  slides,\n  topLabel,\n  centerLabel,\n  bottomLabel,\n  title,\n  description,\n  onTopArrowClick,\n  onBottomArrowClick,\n}: EventBlockProps) {\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < Breakpoints.mobile);\n    };\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  const getImageSrc = (src: string) => {\n    if (!isMobile) return src;\n\n    // \"example/image01.jpg\" → \"example/image01_m.jpg\"\n    const lastDot = src.lastIndexOf('.');\n    if (lastDot === -1) return src;\n    return src.slice(0, lastDot) + '_m' + src.slice(lastDot);\n  };\n\n  return (\n    <Wrapper>\n      <CustomNavigator\n        topLabel={topLabel}\n        centerLabel={centerLabel}\n        bottomLabel={bottomLabel}\n        title={title}\n        description={description}\n        onTopArrowClick={onTopArrowClick}\n        onBottomArrowClick={onBottomArrowClick}\n      />\n\n      <Content>\n        {slides.map((slide, i) => (\n          <ImageBox key={i}>\n            <Image\n              src={getImageSrc(slide.image)}\n              alt=\"\"\n              width={1200}\n              height={600}\n              style={{ objectFit: 'cover' }}\n            />\n          </ImageBox>\n        ))}\n      </Content>\n    </Wrapper>\n  );\n}\n"
        }
    ]
}