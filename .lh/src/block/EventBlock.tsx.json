{
    "sourceFile": "src/block/EventBlock.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1747719476073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747719568229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,23 +25,24 @@\n   height: 100vh;\n   overflow: hidden;\n `;\n \n-const StackImage = styled(Image)<{ $index: number }>`\n+const ImageWrapper = styled.div<{ $index: number }>`\n   position: absolute;\n   top: 0;\n   left: 50%;\n+  width: 1200px;\n+  height: 600px;\n   transform: translateX(-50%);\n-  width: 600px;\n-  height: auto;\n   border-radius: 16px;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  z-index: ${({ $index }) => 100 - $index};\n+  z-index: ${({ $index }) => $index};\n+  overflow: hidden;\n `;\n \n export default function EventBlock({ slides }: EventBlockProps) {\n   const containerRef = useRef<HTMLDivElement>(null);\n-  const imageRefs = useRef<(HTMLImageElement | null)[]>([]);\n+  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n \n   useEffect(() => {\n     if (!containerRef.current) return;\n \n@@ -93,21 +94,25 @@\n     <Wrapper>\n       <div ref={containerRef}>\n         <StickyContainer>\n           {slides.map((slide, i) => (\n-            <StackImage\n+            <ImageWrapper\n               key={i}\n-              src={slide.image}\n-              alt={slide.title}\n-              width={600}\n-              height={800}\n               $index={i}\n               ref={(el) => {\n                 imageRefs.current[i] = el;\n               }}\n-            />\n+            >\n+              <Image\n+                src={slide.image}\n+                alt={slide.title}\n+                width={1200}\n\\ No newline at end of file\n+                height={600}\n+                style={{ objectFit: 'cover' }}\n+              />\n+            </ImageWrapper>\n           ))}\n         </StickyContainer>\n       </div>\n     </Wrapper>\n   );\n-}\n+}\n"
                },
                {
                    "date": 1747719756794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+'use client';\n+\n+import React, { useEffect, useRef } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import Image from 'next/image';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { AppColors } from '@/styles/colors';\n+import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+\n+interface EventBlockProps {\n+  slides: { title: string; image: string }[];\n+  topLabel: string;\n+  centerLabel: string;\n+  bottomLabel: string;\n+  title: string;\n+  description: string;\n+  onTopArrowClick?: () => void;\n+  onBottomArrowClick?: () => void;\n+}\n+\n+gsap.registerPlugin(ScrollTrigger);\n+\n+const Wrapper = styled.div`\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const StickyContainer = styled.div`\n+  position: relative;\n+  height: 100vh;\n+  overflow: hidden;\n+`;\n+\n+const ImageWrapper = styled.div<{ $index: number }>`\n+  position: absolute;\n+  top: 0;\n+  left: 50%;\n+  width: 1200px;\n+  height: 600px;\n+  transform: translateX(-50%);\n+  border-radius: 16px;\n+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+  z-index: ${({ $index }) => $index};\n+  overflow: hidden;\n+`;\n+\n+export default function EventBlock({\n+  slides,\n+  topLabel,\n+  centerLabel,\n+  bottomLabel,\n+  title,\n+  description,\n+  onTopArrowClick,\n+  onBottomArrowClick,\n+}: EventBlockProps) {\n+  const containerRef = useRef<HTMLDivElement>(null);\n+  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    if (!containerRef.current) return;\n+\n+    const ctx = gsap.context(() => {\n+      slides.forEach((_, index) => {\n+        if (index === 0) return;\n+\n+        const image = imageRefs.current[index];\n+        const prevImage = imageRefs.current[index - 1];\n+        if (!image || !prevImage) return;\n+\n+        gsap.fromTo(\n+          image,\n+          { y: '100%', rotateX: 15, opacity: 0 },\n+          {\n+            y: '0%',\n+            rotateX: 0,\n+            opacity: 1,\n+            ease: 'power2.out',\n+            scrollTrigger: {\n+              trigger: containerRef.current,\n+              start: `top+=${index * 100} top`,\n+              end: `top+=${(index + 1) * 100} top`,\n+              scrub: true,\n+              pin: true,\n+              anticipatePin: 1,\n+            },\n+          }\n+        );\n+\n+        gsap.to(prevImage, {\n+          rotateX: -30,\n+          transformOrigin: 'bottom center',\n+          ease: 'power2.inOut',\n+          scrollTrigger: {\n+            trigger: containerRef.current,\n+            start: `top+=${index * 100} top`,\n+            end: `top+=${(index + 1) * 100} top`,\n+            scrub: true,\n+          },\n+        });\n+      });\n+    }, containerRef);\n+\n+    return () => ctx.revert();\n+  }, [slides]);\n+\n+  return (\n+    <>\n+      <CustomNavigator\n+        topLabel={topLabel}\n+        centerLabel={centerLabel}\n+        bottomLabel={bottomLabel}\n+        title={title}\n+        description={description}\n+        onTopArrowClick={onTopArrowClick}\n+        onBottomArrowClick={onBottomArrowClick}\n+      />\n+\n+      <Wrapper>\n+        <div ref={containerRef}>\n+          <StickyContainer>\n+            {slides.map((slide, i) => (\n+              <ImageWrapper\n+                key={i}\n+                $index={i}\n+                ref={(el) => {\n+                  imageRefs.current[i] = el;\n+                }}\n+              >\n+                <Image\n+                  src={slide.image}\n+                  alt={slide.title}\n+                  width={1200}\n+                  height={600}\n+                  style={{ objectFit: 'cover' }}\n+                />\n+              </ImageWrapper>\n+            ))}\n+          </StickyContainer>\n+        </div>\n+      </Wrapper>\n+    </>\n+  );\n+}\n"
                },
                {
                    "date": 1747719773430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,122 +144,4 @@\n       </Wrapper>\n     </>\n   );\n }\n-'use client';\n-\n-import React, { useEffect, useRef } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import Image from 'next/image';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-\n-interface EventBlockProps {\n-  slides: { title: string; image: string }[];\n-}\n-\n-gsap.registerPlugin(ScrollTrigger);\n-\n-const Wrapper = styled.div`\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const StickyContainer = styled.div`\n-  position: relative;\n-  height: 100vh;\n-  overflow: hidden;\n-`;\n-\n-const ImageWrapper = styled.div<{ $index: number }>`\n-  position: absolute;\n-  top: 0;\n-  left: 50%;\n-  width: 1200px;\n-  height: 600px;\n-  transform: translateX(-50%);\n-  border-radius: 16px;\n-  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  z-index: ${({ $index }) => $index};\n-  overflow: hidden;\n-`;\n-\n-export default function EventBlock({ slides }: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n-  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    if (!containerRef.current) return;\n-\n-    const ctx = gsap.context(() => {\n-      slides.forEach((_, index) => {\n-        if (index === 0) return;\n-\n-        const image = imageRefs.current[index];\n-        const prevImage = imageRefs.current[index - 1];\n-        if (!image || !prevImage) return;\n-\n-        gsap.fromTo(\n-          image,\n-          { y: '100%', rotateX: 15, opacity: 0 },\n-          {\n-            y: '0%',\n-            rotateX: 0,\n-            opacity: 1,\n-            ease: 'power2.out',\n-            scrollTrigger: {\n-              trigger: containerRef.current,\n-              start: `top+=${index * 100} top`,\n-              end: `top+=${(index + 1) * 100} top`,\n-              scrub: true,\n-              pin: true,\n-              anticipatePin: 1,\n-            },\n-          }\n-        );\n-\n-        gsap.to(prevImage, {\n-          rotateX: -30,\n-          transformOrigin: 'bottom center',\n-          ease: 'power2.inOut',\n-          scrollTrigger: {\n-            trigger: containerRef.current,\n-            start: `top+=${index * 100} top`,\n-            end: `top+=${(index + 1) * 100} top`,\n-            scrub: true,\n-          },\n-        });\n-      });\n-    }, containerRef);\n-\n-    return () => ctx.revert();\n-  }, [slides]);\n-\n-  return (\n-    <Wrapper>\n-      <div ref={containerRef}>\n-        <StickyContainer>\n-          {slides.map((slide, i) => (\n-            <ImageWrapper\n-              key={i}\n-              $index={i}\n-              ref={(el) => {\n-                imageRefs.current[i] = el;\n-              }}\n-            >\n-              <Image\n-                src={slide.image}\n-                alt={slide.title}\n-                width={1200}\n-                height={600}\n-                style={{ objectFit: 'cover' }}\n-              />\n-            </ImageWrapper>\n-          ))}\n-        </StickyContainer>\n-      </div>\n-    </Wrapper>\n-  );\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747719855918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,12 @@\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n+  position: relative;\n `;\n \n-const StickyContainer = styled.div`\n+const StickySection = styled.div`\n   position: relative;\n   height: 100vh;\n   overflow: hidden;\n `;\n@@ -56,15 +57,26 @@\n   description,\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n+  const wrapperRef = useRef<HTMLDivElement>(null);\n   const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n \n   useEffect(() => {\n-    if (!containerRef.current) return;\n+    if (!wrapperRef.current) return;\n \n+    const totalHeight = slides.length * 600; // slide 개수만큼 pin 영역 확보\n+\n     const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        trigger: wrapperRef.current,\n+        start: 'top top',\n+        end: `+=${totalHeight}`,\n+        scrub: true,\n+        pin: true,\n+        anticipatePin: 1,\n+      });\n+\n       slides.forEach((_, index) => {\n         if (index === 0) return;\n \n         const image = imageRefs.current[index];\n@@ -79,14 +91,12 @@\n             rotateX: 0,\n             opacity: 1,\n             ease: 'power2.out',\n             scrollTrigger: {\n-              trigger: containerRef.current,\n-              start: `top+=${index * 100} top`,\n-              end: `top+=${(index + 1) * 100} top`,\n+              trigger: wrapperRef.current,\n+              start: `${(index - 1) * 600}`,\n+              end: `${index * 600}`,\n               scrub: true,\n-              pin: true,\n-              anticipatePin: 1,\n             },\n           }\n         );\n \n@@ -94,22 +104,22 @@\n           rotateX: -30,\n           transformOrigin: 'bottom center',\n           ease: 'power2.inOut',\n           scrollTrigger: {\n-            trigger: containerRef.current,\n-            start: `top+=${index * 100} top`,\n-            end: `top+=${(index + 1) * 100} top`,\n+            trigger: wrapperRef.current,\n+            start: `${(index - 1) * 600}`,\n+            end: `${index * 600}`,\n             scrub: true,\n           },\n         });\n       });\n-    }, containerRef);\n+    }, wrapperRef);\n \n     return () => ctx.revert();\n   }, [slides]);\n \n   return (\n-    <>\n+    <Wrapper ref={wrapperRef}>\n       <CustomNavigator\n         topLabel={topLabel}\n         centerLabel={centerLabel}\n         bottomLabel={bottomLabel}\n@@ -118,30 +128,26 @@\n         onTopArrowClick={onTopArrowClick}\n         onBottomArrowClick={onBottomArrowClick}\n       />\n \n-      <Wrapper>\n-        <div ref={containerRef}>\n-          <StickyContainer>\n-            {slides.map((slide, i) => (\n-              <ImageWrapper\n-                key={i}\n-                $index={i}\n-                ref={(el) => {\n-                  imageRefs.current[i] = el;\n-                }}\n-              >\n-                <Image\n-                  src={slide.image}\n-                  alt={slide.title}\n-                  width={1200}\n-                  height={600}\n-                  style={{ objectFit: 'cover' }}\n-                />\n-              </ImageWrapper>\n-            ))}\n-          </StickyContainer>\n-        </div>\n-      </Wrapper>\n-    </>\n+      <StickySection>\n+        {slides.map((slide, i) => (\n+          <ImageWrapper\n+            key={i}\n+            $index={i}\n+            ref={(el) => {\n+              imageRefs.current[i] = el;\n+            }}\n+          >\n+            <Image\n+              src={slide.image}\n+              alt={slide.title}\n+              width={1200}\n+              height={600}\n+              style={{ objectFit: 'cover' }}\n+            />\n+          </ImageWrapper>\n+        ))}\n+      </StickySection>\n+    </Wrapper>\n   );\n }\n"
                },
                {
                    "date": 1747719960576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,17 @@\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n-  position: relative;\n `;\n \n-const StickySection = styled.div`\n-  position: relative;\n+const PinSection = styled.div`\n+  height: ${props => `calc(${props.height}px * var(--slide-count))`};\n+`;\n+\n+const StickyContent = styled.div`\n+  position: sticky;\n+  top: 0;\n   height: 100vh;\n   overflow: hidden;\n `;\n \n@@ -57,97 +61,101 @@\n   description,\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n-  const wrapperRef = useRef<HTMLDivElement>(null);\n+  const containerRef = useRef<HTMLDivElement>(null);\n   const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n \n   useEffect(() => {\n-    if (!wrapperRef.current) return;\n+    if (!containerRef.current) return;\n \n-    const totalHeight = slides.length * 600; // slide 개수만큼 pin 영역 확보\n+    const slideHeight = 600;\n+    const totalHeight = slides.length * slideHeight;\n \n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        trigger: wrapperRef.current,\n-        start: 'top top',\n-        end: `+=${totalHeight}`,\n-        scrub: true,\n-        pin: true,\n-        anticipatePin: 1,\n-      });\n+    // 루트 pin 설정\n+    ScrollTrigger.create({\n+      trigger: containerRef.current,\n+      start: 'top top',\n+      end: `+=${totalHeight}`,\n+      scrub: true,\n+      pin: true,\n+    });\n \n-      slides.forEach((_, index) => {\n-        if (index === 0) return;\n+    // 이미지별 애니메이션\n+    slides.forEach((_, index) => {\n+      if (index === 0) return;\n \n-        const image = imageRefs.current[index];\n-        const prevImage = imageRefs.current[index - 1];\n-        if (!image || !prevImage) return;\n+      const current = imageRefs.current[index];\n+      const previous = imageRefs.current[index - 1];\n+      if (!current || !previous) return;\n \n-        gsap.fromTo(\n-          image,\n-          { y: '100%', rotateX: 15, opacity: 0 },\n-          {\n-            y: '0%',\n-            rotateX: 0,\n-            opacity: 1,\n-            ease: 'power2.out',\n-            scrollTrigger: {\n-              trigger: wrapperRef.current,\n-              start: `${(index - 1) * 600}`,\n-              end: `${index * 600}`,\n-              scrub: true,\n-            },\n-          }\n-        );\n+      const startOffset = index * slideHeight;\n \n-        gsap.to(prevImage, {\n-          rotateX: -30,\n-          transformOrigin: 'bottom center',\n-          ease: 'power2.inOut',\n+      gsap.fromTo(\n+        current,\n+        { y: '100%', rotateX: 15, opacity: 0 },\n+        {\n+          y: '0%',\n+          rotateX: 0,\n+          opacity: 1,\n+          ease: 'power2.out',\n           scrollTrigger: {\n-            trigger: wrapperRef.current,\n-            start: `${(index - 1) * 600}`,\n-            end: `${index * 600}`,\n+            trigger: containerRef.current,\n+            start: `${startOffset}`,\n+            end: `${startOffset + slideHeight}`,\n             scrub: true,\n           },\n-        });\n+        }\n+      );\n+\n+      gsap.to(previous, {\n+        rotateX: -30,\n+        transformOrigin: 'bottom center',\n+        ease: 'power2.inOut',\n+        scrollTrigger: {\n+          trigger: containerRef.current,\n+          start: `${startOffset}`,\n+          end: `${startOffset + slideHeight}`,\n+          scrub: true,\n+        },\n       });\n-    }, wrapperRef);\n-\n-    return () => ctx.revert();\n+    });\n   }, [slides]);\n \n   return (\n-    <Wrapper ref={wrapperRef}>\n-      <CustomNavigator\n-        topLabel={topLabel}\n-        centerLabel={centerLabel}\n-        bottomLabel={bottomLabel}\n-        title={title}\n-        description={description}\n-        onTopArrowClick={onTopArrowClick}\n-        onBottomArrowClick={onBottomArrowClick}\n-      />\n+    <Wrapper>\n+      <div ref={containerRef} style={{ '--slide-count': slides.length } as React.CSSProperties}>\n+        <CustomNavigator\n+          topLabel={topLabel}\n+          centerLabel={centerLabel}\n+          bottomLabel={bottomLabel}\n+          title={title}\n+          description={description}\n+          onTopArrowClick={onTopArrowClick}\n+          onBottomArrowClick={onBottomArrowClick}\n+        />\n \n-      <StickySection>\n-        {slides.map((slide, i) => (\n-          <ImageWrapper\n-            key={i}\n-            $index={i}\n-            ref={(el) => {\n-              imageRefs.current[i] = el;\n-            }}\n-          >\n-            <Image\n-              src={slide.image}\n-              alt={slide.title}\n-              width={1200}\n-              height={600}\n-              style={{ objectFit: 'cover' }}\n-            />\n-          </ImageWrapper>\n-        ))}\n-      </StickySection>\n+        <PinSection height={600}>\n+          <StickyContent>\n+            {slides.map((slide, i) => (\n+              <ImageWrapper\n+                key={i}\n+                $index={i}\n+                ref={(el) => {\n+                  imageRefs.current[i] = el;\n+                }}\n+              >\n+                <Image\n+                  src={slide.image}\n+                  alt={slide.title}\n+                  width={1200}\n+                  height={600}\n+                  style={{ objectFit: 'cover' }}\n+                />\n+              </ImageWrapper>\n+            ))}\n+          </StickyContent>\n+        </PinSection>\n+      </div>\n     </Wrapper>\n   );\n }\n"
                },
                {
                    "date": 1747719990510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,13 @@\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n `;\n \n-const PinSection = styled.div`\n-  height: ${props => `calc(${props.height}px * var(--slide-count))`};\n+const PinSection = styled.div<{ $height: number }>`\n+  height: ${({ $height }) => `calc(${$height}px * var(--slide-count))`};\n `;\n \n+\n const StickyContent = styled.div`\n   position: sticky;\n   top: 0;\n   height: 100vh;\n@@ -133,9 +134,9 @@\n           onTopArrowClick={onTopArrowClick}\n           onBottomArrowClick={onBottomArrowClick}\n         />\n \n-        <PinSection height={600}>\n+        <PinSection $height={600}>\n           <StickyContent>\n             {slides.map((slide, i) => (\n               <ImageWrapper\n                 key={i}\n"
                },
                {
                    "date": 1747720053663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n     const totalHeight = slides.length * slideHeight;\n \n     // 루트 pin 설정\n     ScrollTrigger.create({\n+      id:'eventBlockPin',\n       trigger: containerRef.current,\n       start: 'top top',\n       end: `+=${totalHeight}`,\n       scrub: true,\n"
                },
                {
                    "date": 1747720187209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+'use client';\n+\n+import React, { useEffect, useRef } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import Image from 'next/image';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { AppColors } from '@/styles/colors';\n+import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+\n+interface EventBlockProps {\n+  slides: { title: string; image: string }[];\n+  topLabel: string;\n+  centerLabel: string;\n+  bottomLabel: string;\n+  title: string;\n+  description: string;\n+  onTopArrowClick?: () => void;\n+  onBottomArrowClick?: () => void;\n+}\n+\n+gsap.registerPlugin(ScrollTrigger);\n+\n+const Wrapper = styled.div`\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const PinSection = styled.div<{ $height: number }>`\n+  height: ${({ $height }) => `${$height}px`};\n+`;\n+\n+const StickyContent = styled.div`\n+  position: sticky;\n+  top: 0;\n+  height: 100vh;\n+  overflow: hidden;\n+`;\n+\n+const ImageWrapper = styled.div<{ $index: number }>`\n+  position: absolute;\n+  top: 0;\n+  left: 50%;\n+  width: 1200px;\n+  height: 600px;\n+  transform: translateX(-50%);\n+  border-radius: 16px;\n+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+  z-index: ${({ $index }) => $index};\n+  overflow: hidden;\n+`;\n+\n+export default function EventBlock({\n+  slides,\n+  topLabel,\n+  centerLabel,\n+  bottomLabel,\n+  title,\n+  description,\n+  onTopArrowClick,\n+  onBottomArrowClick,\n+}: EventBlockProps) {\n+  const containerRef = useRef<HTMLDivElement>(null);\n+  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n+\n+  useEffect(() => {\n+    if (!containerRef.current) return;\n+\n+    const slideHeight = 600;\n+    const gap = 500; // 이미지 등장 간격\n+    const totalScroll = (slides.length - 1) * gap;\n+\n+    ScrollTrigger.create({\n+      trigger: containerRef.current,\n+      start: 'top top',\n+      end: `+=${totalScroll}`,\n+      scrub: true,\n+      pin: true,\n+    });\n+\n+    slides.forEach((_, index) => {\n+      const current = imageRefs.current[index];\n+      if (!current) return;\n+\n+      if (index === 0) {\n+        // 첫 이미지는 항상 보임\n+        gsap.set(current, { y: '0%', opacity: 1 });\n+        return;\n+      }\n+\n+      const startOffset = (index - 1) * gap;\n+\n+      gsap.fromTo(\n+        current,\n+        { y: '100%', opacity: 0 },\n+        {\n+          y: '0%',\n+          opacity: 1,\n+          ease: 'power2.out',\n+          scrollTrigger: {\n+            trigger: containerRef.current,\n+            start: `${startOffset}`,\n+            end: `${startOffset + gap}`,\n+            scrub: true,\n+          },\n+        }\n+      );\n+    });\n+  }, [slides]);\n+\n+  return (\n+    <Wrapper>\n+      <div ref={containerRef}>\n+        <CustomNavigator\n+          topLabel={topLabel}\n+          centerLabel={centerLabel}\n+          bottomLabel={bottomLabel}\n+          title={title}\n+          description={description}\n+          onTopArrowClick={onTopArrowClick}\n+          onBottomArrowClick={onBottomArrowClick}\n+        />\n+\n+        <PinSection $height={600}>\n+          <StickyContent>\n+            {slides.map((slide, i) => (\n+              <ImageWrapper\n+                key={i}\n+                $index={i}\n+                ref={(el) => {\n+                  imageRefs.current[i] = el;\n+                }}\n+              >\n+                <Image\n+                  src={slide.image}\n+                  alt={slide.title}\n+                  width={1200}\n+                  height={600}\n+                  style={{ objectFit: 'cover' }}\n+                />\n+              </ImageWrapper>\n+            ))}\n+          </StickyContent>\n+        </PinSection>\n+      </div>\n+    </Wrapper>\n+  );\n+}\n"
                },
                {
                    "date": 1747720329159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+'use client';\n+\n+import React, { useEffect, useRef, useState } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import Image from 'next/image';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { AppColors } from '@/styles/colors';\n+import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+\n+interface EventBlockProps {\n+  slides: { title: string; image: string }[];\n+  topLabel: string;\n+  centerLabel: string;\n+  bottomLabel: string;\n+  title: string;\n+  description: string;\n+  onTopArrowClick?: () => void;\n+  onBottomArrowClick?: () => void;\n+}\n+\n+gsap.registerPlugin(ScrollTrigger);\n+\n+const Wrapper = styled.div`\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const PinSection = styled.div`\n+  height: 100vh;\n+  position: sticky;\n+  top: 0;\n+  overflow: hidden;\n+`;\n+\n+const ImageContainer = styled.div`\n+  position: relative;\n+  width: 100%;\n+  height: 100%;\n+`;\n+\n+const ImageWrapper = styled.div<{ $active: boolean }>`\n+  position: absolute;\n+  top: 50%;\n+  left: 50%;\n+  width: 1200px;\n+  height: 600px;\n+  transform: translate(-50%, -50%)\n+    ${({ $active }) => ($active ? ' scale(1)' : ' translateY(100%) scale(0.9)')};\n+  opacity: ${({ $active }) => ($active ? 1 : 0)};\n+  transition: all 0.6s ease;\n+  border-radius: 16px;\n+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+  overflow: hidden;\n+  z-index: ${({ $active }) => ($active ? 10 : 1)};\n+`;\n+\n+export default function EventBlock({\n+  slides,\n+  topLabel,\n+  centerLabel,\n+  bottomLabel,\n+  title,\n+  description,\n+  onTopArrowClick,\n+  onBottomArrowClick,\n+}: EventBlockProps) {\n+  const containerRef = useRef<HTMLDivElement>(null);\n+  const [activeIndex, setActiveIndex] = useState(0);\n+\n+  useEffect(() => {\n+    if (!containerRef.current) return;\n+\n+    const sectionHeight = window.innerHeight;\n+    const totalScroll = sectionHeight * (slides.length - 1);\n+\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        trigger: containerRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const progress = self.progress;\n+          let index = Math.floor(progress * slides.length);\n+          index = Math.min(index, slides.length - 1);\n+          setActiveIndex(index);\n+        },\n+      });\n+    }, containerRef);\n+\n+    return () => ctx.revert();\n+  }, [slides.length]);\n+\n+  return (\n+    <Wrapper>\n+      <div ref={containerRef}>\n+        <CustomNavigator\n+          topLabel={topLabel}\n+          centerLabel={centerLabel}\n+          bottomLabel={bottomLabel}\n+          title={title}\n+          description={description}\n+          onTopArrowClick={onTopArrowClick}\n+          onBottomArrowClick={onBottomArrowClick}\n+        />\n+\n+        <PinSection>\n+          <ImageContainer>\n+            {slides.map((slide, i) => (\n+              <ImageWrapper key={i} $active={activeIndex === i}>\n+                <Image\n+                  src={slide.image}\n+                  alt={slide.title}\n+                  width={1200}\n+                  height={600}\n+                  style={{ objectFit: 'cover' }}\n+                />\n+              </ImageWrapper>\n+            ))}\n+          </ImageContainer>\n+        </PinSection>\n+      </div>\n+    </Wrapper>\n+  );\n+}\n"
                },
                {
                    "date": 1747720459769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,24 +38,29 @@\n const ImageContainer = styled.div`\n   position: relative;\n   width: 100%;\n   height: 100%;\n+  perspective: 2000px;\n `;\n \n-const ImageWrapper = styled.div<{ $active: boolean }>`\n+const ImageWrapper = styled.div<{ $offset: number }>`\n   position: absolute;\n   top: 50%;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n+  transform-style: preserve-3d;\n   transform: translate(-50%, -50%)\n-    ${({ $active }) => ($active ? ' scale(1)' : ' translateY(100%) scale(0.9)')};\n-  opacity: ${({ $active }) => ($active ? 1 : 0)};\n-  transition: all 0.6s ease;\n+    translateY(${({ $offset }) => $offset * -40}px)\n+    scale(${({ $offset }) => 1 - $offset * 0.05})\n+    translateZ(${({ $offset }) => -$offset * 150}px);\n+  opacity: ${({ $offset }) => (1 - $offset * 0.3)};\n+  transition: transform 0.6s ease, opacity 0.6s ease;\n+  z-index: ${({ $offset }) => 100 - $offset};\n   border-radius: 16px;\n+  overflow: hidden;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  overflow: hidden;\n-  z-index: ${({ $active }) => ($active ? 10 : 1)};\n+  pointer-events: none;\n `;\n \n export default function EventBlock({\n   slides,\n@@ -67,9 +72,9 @@\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n   const containerRef = useRef<HTMLDivElement>(null);\n-  const [activeIndex, setActiveIndex] = useState(0);\n+  const [scrollIndex, setScrollIndex] = useState(0);\n \n   useEffect(() => {\n     if (!containerRef.current) return;\n \n@@ -83,12 +88,10 @@\n         end: `+=${totalScroll}`,\n         scrub: true,\n         pin: true,\n         onUpdate: (self) => {\n-          const progress = self.progress;\n-          let index = Math.floor(progress * slides.length);\n-          index = Math.min(index, slides.length - 1);\n-          setActiveIndex(index);\n+          const index = self.progress * (slides.length - 1);\n+          setScrollIndex(index);\n         },\n       });\n     }, containerRef);\n \n@@ -109,334 +112,24 @@\n         />\n \n         <PinSection>\n           <ImageContainer>\n-            {slides.map((slide, i) => (\n-              <ImageWrapper key={i} $active={activeIndex === i}>\n-                <Image\n-                  src={slide.image}\n-                  alt={slide.title}\n-                  width={1200}\n-                  height={600}\n-                  style={{ objectFit: 'cover' }}\n-                />\n-              </ImageWrapper>\n-            ))}\n+            {slides.map((slide, i) => {\n+              const offset = Math.max(0, scrollIndex - i); // 얼마나 덮였는지\n+              return (\n+                <ImageWrapper key={i} $offset={offset}>\n+                  <Image\n+                    src={slide.image}\n+                    alt={slide.title}\n+                    width={1200}\n+                    height={600}\n+                    style={{ objectFit: 'cover' }}\n+                  />\n+                </ImageWrapper>\n+              );\n+            })}\n           </ImageContainer>\n         </PinSection>\n       </div>\n     </Wrapper>\n   );\n }\n-'use client';\n-\n-import React, { useEffect, useRef } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import Image from 'next/image';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-import { CustomNavigator } from '@/customComponents/CustomNavigator';\n-\n-interface EventBlockProps {\n-  slides: { title: string; image: string }[];\n-  topLabel: string;\n-  centerLabel: string;\n-  bottomLabel: string;\n-  title: string;\n-  description: string;\n-  onTopArrowClick?: () => void;\n-  onBottomArrowClick?: () => void;\n-}\n-\n-gsap.registerPlugin(ScrollTrigger);\n-\n-const Wrapper = styled.div`\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const PinSection = styled.div<{ $height: number }>`\n-  height: ${({ $height }) => `${$height}px`};\n-`;\n-\n-const StickyContent = styled.div`\n-  position: sticky;\n-  top: 0;\n-  height: 100vh;\n-  overflow: hidden;\n-`;\n-\n-const ImageWrapper = styled.div<{ $index: number }>`\n-  position: absolute;\n-  top: 0;\n-  left: 50%;\n-  width: 1200px;\n-  height: 600px;\n-  transform: translateX(-50%);\n-  border-radius: 16px;\n-  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  z-index: ${({ $index }) => $index};\n-  overflow: hidden;\n-`;\n-\n-export default function EventBlock({\n-  slides,\n-  topLabel,\n-  centerLabel,\n-  bottomLabel,\n-  title,\n-  description,\n-  onTopArrowClick,\n-  onBottomArrowClick,\n-}: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n-  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    if (!containerRef.current) return;\n-\n-    const slideHeight = 600;\n-    const gap = 500; // 이미지 등장 간격\n-    const totalScroll = (slides.length - 1) * gap;\n-\n-    ScrollTrigger.create({\n-      trigger: containerRef.current,\n-      start: 'top top',\n-      end: `+=${totalScroll}`,\n-      scrub: true,\n-      pin: true,\n-    });\n-\n-    slides.forEach((_, index) => {\n-      const current = imageRefs.current[index];\n-      if (!current) return;\n-\n-      if (index === 0) {\n-        // 첫 이미지는 항상 보임\n-        gsap.set(current, { y: '0%', opacity: 1 });\n-        return;\n-      }\n-\n-      const startOffset = (index - 1) * gap;\n-\n-      gsap.fromTo(\n-        current,\n-        { y: '100%', opacity: 0 },\n-        {\n-          y: '0%',\n-          opacity: 1,\n-          ease: 'power2.out',\n-          scrollTrigger: {\n-            trigger: containerRef.current,\n-            start: `${startOffset}`,\n-            end: `${startOffset + gap}`,\n-            scrub: true,\n-          },\n-        }\n-      );\n-    });\n-  }, [slides]);\n-\n-  return (\n-    <Wrapper>\n-      <div ref={containerRef}>\n-        <CustomNavigator\n-          topLabel={topLabel}\n-          centerLabel={centerLabel}\n-          bottomLabel={bottomLabel}\n-          title={title}\n-          description={description}\n-          onTopArrowClick={onTopArrowClick}\n-          onBottomArrowClick={onBottomArrowClick}\n-        />\n-\n-        <PinSection $height={600}>\n-          <StickyContent>\n-            {slides.map((slide, i) => (\n-              <ImageWrapper\n-                key={i}\n-                $index={i}\n-                ref={(el) => {\n-                  imageRefs.current[i] = el;\n-                }}\n-              >\n-                <Image\n-                  src={slide.image}\n-                  alt={slide.title}\n-                  width={1200}\n-                  height={600}\n-                  style={{ objectFit: 'cover' }}\n-                />\n-              </ImageWrapper>\n-            ))}\n-          </StickyContent>\n-        </PinSection>\n-      </div>\n-    </Wrapper>\n-  );\n-}\n-'use client';\n-\n-import React, { useEffect, useRef } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import Image from 'next/image';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-import { CustomNavigator } from '@/customComponents/CustomNavigator';\n-\n-interface EventBlockProps {\n-  slides: { title: string; image: string }[];\n-  topLabel: string;\n-  centerLabel: string;\n-  bottomLabel: string;\n-  title: string;\n-  description: string;\n-  onTopArrowClick?: () => void;\n-  onBottomArrowClick?: () => void;\n-}\n-\n-gsap.registerPlugin(ScrollTrigger);\n-\n-const Wrapper = styled.div`\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const PinSection = styled.div<{ $height: number }>`\n-  height: ${({ $height }) => `calc(${$height}px * var(--slide-count))`};\n-`;\n-\n-\n-const StickyContent = styled.div`\n-  position: sticky;\n-  top: 0;\n-  height: 100vh;\n-  overflow: hidden;\n-`;\n-\n-const ImageWrapper = styled.div<{ $index: number }>`\n-  position: absolute;\n-  top: 0;\n-  left: 50%;\n-  width: 1200px;\n-  height: 600px;\n-  transform: translateX(-50%);\n-  border-radius: 16px;\n-  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  z-index: ${({ $index }) => $index};\n-  overflow: hidden;\n-`;\n-\n-export default function EventBlock({\n-  slides,\n-  topLabel,\n-  centerLabel,\n-  bottomLabel,\n-  title,\n-  description,\n-  onTopArrowClick,\n-  onBottomArrowClick,\n-}: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n-  const imageRefs = useRef<(HTMLDivElement | null)[]>([]);\n-\n-  useEffect(() => {\n-    if (!containerRef.current) return;\n-\n-    const slideHeight = 600;\n-    const totalHeight = slides.length * slideHeight;\n-\n-    // 루트 pin 설정\n-    ScrollTrigger.create({\n-      id:'eventBlockPin',\n-      trigger: containerRef.current,\n-      start: 'top top',\n-      end: `+=${totalHeight}`,\n-      scrub: true,\n-      pin: true,\n-    });\n-\n-    // 이미지별 애니메이션\n-    slides.forEach((_, index) => {\n-      if (index === 0) return;\n-\n-      const current = imageRefs.current[index];\n-      const previous = imageRefs.current[index - 1];\n-      if (!current || !previous) return;\n-\n-      const startOffset = index * slideHeight;\n-\n-      gsap.fromTo(\n-        current,\n-        { y: '100%', rotateX: 15, opacity: 0 },\n-        {\n-          y: '0%',\n-          rotateX: 0,\n-          opacity: 1,\n-          ease: 'power2.out',\n-          scrollTrigger: {\n-            trigger: containerRef.current,\n-            start: `${startOffset}`,\n-            end: `${startOffset + slideHeight}`,\n-            scrub: true,\n-          },\n-        }\n-      );\n-\n-      gsap.to(previous, {\n-        rotateX: -30,\n-        transformOrigin: 'bottom center',\n-        ease: 'power2.inOut',\n-        scrollTrigger: {\n-          trigger: containerRef.current,\n-          start: `${startOffset}`,\n-          end: `${startOffset + slideHeight}`,\n-          scrub: true,\n-        },\n-      });\n-    });\n-  }, [slides]);\n-\n-  return (\n-    <Wrapper>\n-      <div ref={containerRef} style={{ '--slide-count': slides.length } as React.CSSProperties}>\n-        <CustomNavigator\n-          topLabel={topLabel}\n-          centerLabel={centerLabel}\n-          bottomLabel={bottomLabel}\n-          title={title}\n-          description={description}\n-          onTopArrowClick={onTopArrowClick}\n-          onBottomArrowClick={onBottomArrowClick}\n-        />\n-\n-        <PinSection $height={600}>\n-          <StickyContent>\n-            {slides.map((slide, i) => (\n-              <ImageWrapper\n-                key={i}\n-                $index={i}\n-                ref={(el) => {\n-                  imageRefs.current[i] = el;\n-                }}\n-              >\n-                <Image\n-                  src={slide.image}\n-                  alt={slide.title}\n-                  width={1200}\n-                  height={600}\n-                  style={{ objectFit: 'cover' }}\n-                />\n-              </ImageWrapper>\n-            ))}\n-          </StickyContent>\n-        </PinSection>\n-      </div>\n-    </Wrapper>\n-  );\n-}\n"
                },
                {
                    "date": 1747720563741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,22 +41,25 @@\n   height: 100%;\n   perspective: 2000px;\n `;\n \n-const ImageWrapper = styled.div<{ $offset: number }>`\n+const ImageWrapper = styled.div<{\n+  $offsetY: number;\n+  $depth: number;\n+}>`\n   position: absolute;\n-  top: 50%;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n   transform-style: preserve-3d;\n-  transform: translate(-50%, -50%)\n-    translateY(${({ $offset }) => $offset * -40}px)\n-    scale(${({ $offset }) => 1 - $offset * 0.05})\n-    translateZ(${({ $offset }) => -$offset * 150}px);\n-  opacity: ${({ $offset }) => (1 - $offset * 0.3)};\n-  transition: transform 0.6s ease, opacity 0.6s ease;\n-  z-index: ${({ $offset }) => 100 - $offset};\n+  transform:\n+    translateX(-50%)\n+    translateY(${({ $offsetY }) => $offsetY}px)\n+    scale(${({ $depth }) => 1 - $depth * 0.05})\n+    translateZ(${({ $depth }) => -$depth * 150}px);\n+  opacity: ${({ $depth }) => 1 - $depth * 0.25};\n+  transition: transform 0.3s ease, opacity 0.3s ease;\n+  z-index: ${({ $depth }) => 100 - $depth};\n   border-radius: 16px;\n   overflow: hidden;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n   pointer-events: none;\n@@ -113,11 +116,13 @@\n \n         <PinSection>\n           <ImageContainer>\n             {slides.map((slide, i) => {\n-              const offset = Math.max(0, scrollIndex - i); // 얼마나 덮였는지\n+              const depth = Math.max(0, scrollIndex - i);\n+              const offsetY = (i - scrollIndex) * 300; // 아래에서 위로 올라오는 위치\n+\n               return (\n-                <ImageWrapper key={i} $offset={offset}>\n+                <ImageWrapper key={i} $depth={depth} $offsetY={offsetY}>\n                   <Image\n                     src={slide.image}\n                     alt={slide.title}\n                     width={1200}\n"
                },
                {
                    "date": 1747720601074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n         <PinSection>\n           <ImageContainer>\n             {slides.map((slide, i) => {\n               const depth = Math.max(0, scrollIndex - i);\n-              const offsetY = (i - scrollIndex) * 300; // 아래에서 위로 올라오는 위치\n+              const offsetY = (i - scrollIndex) * 1000; // 아래에서 위로 올라오는 위치\n \n               return (\n                 <ImageWrapper key={i} $depth={depth} $offsetY={offsetY}>\n                   <Image\n"
                },
                {
                    "date": 1747720715267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,12 +41,9 @@\n   height: 100%;\n   perspective: 2000px;\n `;\n \n-const ImageWrapper = styled.div<{\n-  $offsetY: number;\n-  $depth: number;\n-}>`\n+const ImageWrapper = styled.div<{ $offsetY: number; $depth: number }>`\n   position: absolute;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n@@ -54,10 +51,10 @@\n   transform:\n     translateX(-50%)\n     translateY(${({ $offsetY }) => $offsetY}px)\n     scale(${({ $depth }) => 1 - $depth * 0.05})\n-    translateZ(${({ $depth }) => -$depth * 150}px);\n-  opacity: ${({ $depth }) => 1 - $depth * 0.25};\n+    translateZ(${({ $depth }) => -$depth * 100}px);\n+  opacity: ${({ $depth }) => 1 - $depth * 0.3};\n   transition: transform 0.3s ease, opacity 0.3s ease;\n   z-index: ${({ $depth }) => 100 - $depth};\n   border-radius: 16px;\n   overflow: hidden;\n@@ -100,8 +97,11 @@\n \n     return () => ctx.revert();\n   }, [slides.length]);\n \n+  const activeIndex = Math.floor(scrollIndex);\n+  const progressInStep = scrollIndex - activeIndex;\n+\n   return (\n     <Wrapper>\n       <div ref={containerRef}>\n         <CustomNavigator\n@@ -116,11 +116,29 @@\n \n         <PinSection>\n           <ImageContainer>\n             {slides.map((slide, i) => {\n-              const depth = Math.max(0, scrollIndex - i);\n-              const offsetY = (i - scrollIndex) * 1000; // 아래에서 위로 올라오는 위치\n+              let depth = 0;\n+              let offsetY = 0;\n \n+              if (i < activeIndex) {\n+                // 지난 이미지들: 완전히 뒤로\n+                depth = 1;\n+                offsetY = 0;\n+              } else if (i === activeIndex) {\n+                // 현재 이미지: 제자리에 고정\n+                depth = 0;\n+                offsetY = 0;\n+              } else if (i === activeIndex + 1) {\n+                // 다음 이미지가 올라오는 중\n+                depth = progressInStep;\n+                offsetY = (1 - progressInStep) * 600; // 아래에서 올라오기\n+              } else {\n+                // 아직 등장하지 않은 이미지\n+                depth = 1;\n+                offsetY = 600;\n+              }\n+\n               return (\n                 <ImageWrapper key={i} $depth={depth} $offsetY={offsetY}>\n                   <Image\n                     src={slide.image}\n"
                },
                {
                    "date": 1747721050771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,25 +38,26 @@\n const ImageContainer = styled.div`\n   position: relative;\n   width: 100%;\n   height: 100%;\n-  perspective: 2000px;\n+  perspective: 1500px;\n `;\n \n-const ImageWrapper = styled.div<{ $offsetY: number; $depth: number }>`\n+const ImageWrapper = styled.div<{\n+  $z: number;\n+  $scale: number;\n+  $opacity: number;\n+}>`\n   position: absolute;\n+  top: 50%;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n   transform-style: preserve-3d;\n-  transform:\n-    translateX(-50%)\n-    translateY(${({ $offsetY }) => $offsetY}px)\n-    scale(${({ $depth }) => 1 - $depth * 0.05})\n-    translateZ(${({ $depth }) => -$depth * 100}px);\n-  opacity: ${({ $depth }) => 1 - $depth * 0.3};\n-  transition: transform 0.3s ease, opacity 0.3s ease;\n-  z-index: ${({ $depth }) => 100 - $depth};\n+  transform: translate(-50%, -50%) scale(${({ $scale }) => $scale}) translateZ(${({ $z }) => $z}px);\n+  opacity: ${({ $opacity }) => $opacity};\n+  transition: transform 0.5s ease, opacity 0.5s ease;\n+  z-index: ${({ $z }) => 1000 + $z}; // 정수로 정렬\n   border-radius: 16px;\n   overflow: hidden;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n   pointer-events: none;\n@@ -98,9 +99,9 @@\n     return () => ctx.revert();\n   }, [slides.length]);\n \n   const activeIndex = Math.floor(scrollIndex);\n-  const progressInStep = scrollIndex - activeIndex;\n+  const progress = scrollIndex - activeIndex;\n \n   return (\n     <Wrapper>\n       <div ref={containerRef}>\n@@ -116,31 +117,29 @@\n \n         <PinSection>\n           <ImageContainer>\n             {slides.map((slide, i) => {\n-              let depth = 0;\n-              let offsetY = 0;\n+              // 기본값\n+              let z = -i * 200;\n+              let scale = 1 - i * 0.03;\n+              let opacity = 1;\n \n-              if (i < activeIndex) {\n-                // 지난 이미지들: 완전히 뒤로\n-                depth = 1;\n-                offsetY = 0;\n-              } else if (i === activeIndex) {\n-                // 현재 이미지: 제자리에 고정\n-                depth = 0;\n-                offsetY = 0;\n-              } else if (i === activeIndex + 1) {\n-                // 다음 이미지가 올라오는 중\n-                depth = progressInStep;\n-                offsetY = (1 - progressInStep) * 600; // 아래에서 올라오기\n-              } else {\n-                // 아직 등장하지 않은 이미지\n-                depth = 1;\n-                offsetY = 600;\n+              // 현재 올라오는 이미지 처리\n+              if (i === activeIndex + 1) {\n+                z = -(activeIndex) * 200 + progress * 200;\n+                scale = 1 - activeIndex * 0.03 + progress * 0.03;\n+                opacity = Math.min(1, progress + 0.5); // 약간 먼저 보이게\n               }\n \n+              // 현재 탑에 있는 이미지\n+              if (i === activeIndex) {\n+                z = 0;\n+                scale = 1;\n+                opacity = 1;\n+              }\n+\n               return (\n-                <ImageWrapper key={i} $depth={depth} $offsetY={offsetY}>\n+                <ImageWrapper key={i} $z={z} $scale={scale} $opacity={opacity}>\n                   <Image\n                     src={slide.image}\n                     alt={slide.title}\n                     width={1200}\n"
                },
                {
                    "date": 1747721393530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,26 +42,24 @@\n   perspective: 1500px;\n `;\n \n const ImageWrapper = styled.div<{\n+  $y: number;\n   $z: number;\n-  $scale: number;\n-  $opacity: number;\n }>`\n   position: absolute;\n-  top: 50%;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n-  transform-style: preserve-3d;\n-  transform: translate(-50%, -50%) scale(${({ $scale }) => $scale}) translateZ(${({ $z }) => $z}px);\n-  opacity: ${({ $opacity }) => $opacity};\n-  transition: transform 0.5s ease, opacity 0.5s ease;\n-  z-index: ${({ $z }) => 1000 + $z}; // 정수로 정렬\n+  transform: translateX(-50%)\n+    translateY(${({ $y }) => $y}px)\n+    translateZ(${({ $z }) => $z}px);\n+  transition: transform 0.2s linear;\n+  z-index: ${({ $z }) => 1000 - $z};\n   border-radius: 16px;\n   overflow: hidden;\n+  pointer-events: none;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-  pointer-events: none;\n `;\n \n export default function EventBlock({\n   slides,\n@@ -73,15 +71,15 @@\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n   const containerRef = useRef<HTMLDivElement>(null);\n-  const [scrollIndex, setScrollIndex] = useState(0);\n+  const [scrollY, setScrollY] = useState(0);\n \n   useEffect(() => {\n     if (!containerRef.current) return;\n \n-    const sectionHeight = window.innerHeight;\n-    const totalScroll = sectionHeight * (slides.length - 1);\n+    const slideHeight = 700;\n+    const totalScroll = slideHeight * slides.length;\n \n     const ctx = gsap.context(() => {\n       ScrollTrigger.create({\n         trigger: containerRef.current,\n@@ -89,20 +87,17 @@\n         end: `+=${totalScroll}`,\n         scrub: true,\n         pin: true,\n         onUpdate: (self) => {\n-          const index = self.progress * (slides.length - 1);\n-          setScrollIndex(index);\n+          const currentScroll = self.progress * totalScroll;\n+          setScrollY(currentScroll);\n         },\n       });\n     }, containerRef);\n \n     return () => ctx.revert();\n   }, [slides.length]);\n \n-  const activeIndex = Math.floor(scrollIndex);\n-  const progress = scrollIndex - activeIndex;\n-\n   return (\n     <Wrapper>\n       <div ref={containerRef}>\n         <CustomNavigator\n@@ -117,29 +112,17 @@\n \n         <PinSection>\n           <ImageContainer>\n             {slides.map((slide, i) => {\n-              // 기본값\n-              let z = -i * 200;\n-              let scale = 1 - i * 0.03;\n-              let opacity = 1;\n+              const initY = i * 700;\n+              const endY = initY - 630; // 90%만 올라오도록 제한\n+              const y = Math.max(endY, Math.min(initY, initY - (scrollY - i * 700)));\n \n-              // 현재 올라오는 이미지 처리\n-              if (i === activeIndex + 1) {\n-                z = -(activeIndex) * 200 + progress * 200;\n-                scale = 1 - activeIndex * 0.03 + progress * 0.03;\n-                opacity = Math.min(1, progress + 0.5); // 약간 먼저 보이게\n-              }\n+              // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n+              const z = -Math.max(0, scrollY - i * 700) * 0.5;\n \n-              // 현재 탑에 있는 이미지\n-              if (i === activeIndex) {\n-                z = 0;\n-                scale = 1;\n-                opacity = 1;\n-              }\n-\n               return (\n-                <ImageWrapper key={i} $z={z} $scale={scale} $opacity={opacity}>\n+                <ImageWrapper key={i} $y={y} $z={z}>\n                   <Image\n                     src={slide.image}\n                     alt={slide.title}\n                     width={1200}\n"
                },
                {
                    "date": 1747721451897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+'use client';\n+\n+import React, { useEffect, useRef, useState } from 'react';\n+import styled from 'styled-components';\n+import { gsap } from 'gsap';\n+import { ScrollTrigger } from 'gsap/ScrollTrigger';\n+import Image from 'next/image';\n+import { Breakpoints } from '@/constants/layoutConstants';\n+import { AppColors } from '@/styles/colors';\n+import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+\n+interface EventBlockProps {\n+  slides: { title: string; image: string }[];\n+  topLabel: string;\n+  centerLabel: string;\n+  bottomLabel: string;\n+  title: string;\n+  description: string;\n+  onTopArrowClick?: () => void;\n+  onBottomArrowClick?: () => void;\n+}\n+\n+gsap.registerPlugin(ScrollTrigger);\n+\n+const Wrapper = styled.div`\n+  width: 100%;\n+  min-width: ${Breakpoints.desktop}px;\n+  background-color: ${AppColors.background};\n+`;\n+\n+const PinSection = styled.div`\n+  height: 100vh;\n+  position: sticky;\n+  top: 0;\n+  overflow: hidden;\n+`;\n+\n+const ImageContainer = styled.div`\n+  position: relative;\n+  width: 100%;\n+  height: 100%;\n+  perspective: 1500px;\n+`;\n+\n+const ImageWrapper = styled.div<{\n+  $y: number;\n+  $z: number;\n+}>`\n+  position: absolute;\n+  left: 50%;\n+  width: 1200px;\n+  height: 600px;\n+  transform: translateX(-50%)\n+    translateY(${({ $y }) => $y}px)\n+    translateZ(${({ $z }) => $z}px);\n+  transition: transform 0.2s linear;\n+  z-index: ${({ $z }) => 1000 - $z};\n+  border-radius: 16px;\n+  overflow: hidden;\n+  pointer-events: none;\n+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+`;\n+\n+export default function EventBlock({\n+  slides,\n+  topLabel,\n+  centerLabel,\n+  bottomLabel,\n+  title,\n+  description,\n+  onTopArrowClick,\n+  onBottomArrowClick,\n+}: EventBlockProps) {\n+  const containerRef = useRef<HTMLDivElement>(null);\n+  const [scrollY, setScrollY] = useState(0);\n+\n+  useEffect(() => {\n+    if (!containerRef.current) return;\n+\n+    const slideHeight = 700;\n+    const totalScroll = slideHeight * slides.length;\n+\n+    const ctx = gsap.context(() => {\n+      ScrollTrigger.create({\n+        trigger: containerRef.current,\n+        start: 'top top',\n+        end: `+=${totalScroll}`,\n+        scrub: true,\n+        pin: true,\n+        onUpdate: (self) => {\n+          const currentScroll = self.progress * totalScroll;\n+          setScrollY(currentScroll);\n+        },\n+      });\n+    }, containerRef);\n+\n+    return () => ctx.revert();\n+  }, [slides.length]);\n+\n+  return (\n+    <Wrapper>\n+      <div ref={containerRef}>\n+        <CustomNavigator\n+          topLabel={topLabel}\n+          centerLabel={centerLabel}\n+          bottomLabel={bottomLabel}\n+          title={title}\n+          description={description}\n+          onTopArrowClick={onTopArrowClick}\n+          onBottomArrowClick={onBottomArrowClick}\n+        />\n+\n+        <PinSection>\n+          <ImageContainer>\n+            {slides.map((slide, i) => {\n+              const initY = i * 700;\n+              const endY = initY - 630; // 90%만 올라오도록 제한\n+              const y = Math.max(endY, Math.min(initY, initY - (scrollY - i * 700)));\n+\n+              // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n+              // const z = -Math.max(0, scrollY - i * 700) * 0.5;\n+\n+              return (\n+                <ImageWrapper key={i} $y={y} $z={z}>\n+                  <Image\n+                    src={slide.image}\n+                    alt={slide.title}\n+                    width={1200}\n+                    height={600}\n+                    style={{ objectFit: 'cover' }}\n+                  />\n+                </ImageWrapper>\n+              );\n+            })}\n+          </ImageContainer>\n+        </PinSection>\n+      </div>\n+    </Wrapper>\n+  );\n+}\n"
                },
                {
                    "date": 1747721465522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n               // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n               // const z = -Math.max(0, scrollY - i * 700) * 0.5;\n \n               return (\n-                <ImageWrapper key={i} $y={y} $z={z}>\n+                <ImageWrapper key={i} $y={y} >\n                   <Image\n                     src={slide.image}\n                     alt={slide.title}\n                     width={1200}\n@@ -137,144 +137,4 @@\n       </div>\n     </Wrapper>\n   );\n }\n-'use client';\n-\n-import React, { useEffect, useRef, useState } from 'react';\n-import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n-import Image from 'next/image';\n-import { Breakpoints } from '@/constants/layoutConstants';\n-import { AppColors } from '@/styles/colors';\n-import { CustomNavigator } from '@/customComponents/CustomNavigator';\n-\n-interface EventBlockProps {\n-  slides: { title: string; image: string }[];\n-  topLabel: string;\n-  centerLabel: string;\n-  bottomLabel: string;\n-  title: string;\n-  description: string;\n-  onTopArrowClick?: () => void;\n-  onBottomArrowClick?: () => void;\n-}\n-\n-gsap.registerPlugin(ScrollTrigger);\n-\n-const Wrapper = styled.div`\n-  width: 100%;\n-  min-width: ${Breakpoints.desktop}px;\n-  background-color: ${AppColors.background};\n-`;\n-\n-const PinSection = styled.div`\n-  height: 100vh;\n-  position: sticky;\n-  top: 0;\n-  overflow: hidden;\n-`;\n-\n-const ImageContainer = styled.div`\n-  position: relative;\n-  width: 100%;\n-  height: 100%;\n-  perspective: 1500px;\n-`;\n-\n-const ImageWrapper = styled.div<{\n-  $y: number;\n-  $z: number;\n-}>`\n-  position: absolute;\n-  left: 50%;\n-  width: 1200px;\n-  height: 600px;\n-  transform: translateX(-50%)\n-    translateY(${({ $y }) => $y}px)\n-    translateZ(${({ $z }) => $z}px);\n-  transition: transform 0.2s linear;\n-  z-index: ${({ $z }) => 1000 - $z};\n-  border-radius: 16px;\n-  overflow: hidden;\n-  pointer-events: none;\n-  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n-`;\n-\n-export default function EventBlock({\n-  slides,\n-  topLabel,\n-  centerLabel,\n-  bottomLabel,\n-  title,\n-  description,\n-  onTopArrowClick,\n-  onBottomArrowClick,\n-}: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n-  const [scrollY, setScrollY] = useState(0);\n-\n-  useEffect(() => {\n-    if (!containerRef.current) return;\n-\n-    const slideHeight = 700;\n-    const totalScroll = slideHeight * slides.length;\n-\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        trigger: containerRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const currentScroll = self.progress * totalScroll;\n-          setScrollY(currentScroll);\n-        },\n-      });\n-    }, containerRef);\n-\n-    return () => ctx.revert();\n-  }, [slides.length]);\n-\n-  return (\n-    <Wrapper>\n-      <div ref={containerRef}>\n-        <CustomNavigator\n-          topLabel={topLabel}\n-          centerLabel={centerLabel}\n-          bottomLabel={bottomLabel}\n-          title={title}\n-          description={description}\n-          onTopArrowClick={onTopArrowClick}\n-          onBottomArrowClick={onBottomArrowClick}\n-        />\n-\n-        <PinSection>\n-          <ImageContainer>\n-            {slides.map((slide, i) => {\n-              const initY = i * 700;\n-              const endY = initY - 630; // 90%만 올라오도록 제한\n-              const y = Math.max(endY, Math.min(initY, initY - (scrollY - i * 700)));\n-\n-              // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n-              const z = -Math.max(0, scrollY - i * 700) * 0.5;\n-\n-              return (\n-                <ImageWrapper key={i} $y={y} $z={z}>\n-                  <Image\n-                    src={slide.image}\n-                    alt={slide.title}\n-                    width={1200}\n-                    height={600}\n-                    style={{ objectFit: 'cover' }}\n-                  />\n-                </ImageWrapper>\n-              );\n-            })}\n-          </ImageContainer>\n-        </PinSection>\n-      </div>\n-    </Wrapper>\n-  );\n-}\n"
                },
                {
                    "date": 1747721473110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,17 @@\n `;\n \n const ImageWrapper = styled.div<{\n   $y: number;\n-  $z: number;\n+  // $z: number;\n }>`\n   position: absolute;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n   transform: translateX(-50%)\n     translateY(${({ $y }) => $y}px)\n-    translateZ(${({ $z }) => $z}px);\n+    /* translateZ(${({ $z }) => $z}px); */\n   transition: transform 0.2s linear;\n   z-index: ${({ $z }) => 1000 - $z};\n   border-radius: 16px;\n   overflow: hidden;\n"
                },
                {
                    "date": 1747721487054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,17 +43,17 @@\n `;\n \n const ImageWrapper = styled.div<{\n   $y: number;\n-  // $z: number;\n+  $z: number;\n }>`\n   position: absolute;\n   left: 50%;\n   width: 1200px;\n   height: 600px;\n   transform: translateX(-50%)\n     translateY(${({ $y }) => $y}px)\n-    /* translateZ(${({ $z }) => $z}px); */\n+    translateZ(${({ $z }) => $z}px);\n   transition: transform 0.2s linear;\n   z-index: ${({ $z }) => 1000 - $z};\n   border-radius: 16px;\n   overflow: hidden;\n@@ -117,12 +117,12 @@\n               const endY = initY - 630; // 90%만 올라오도록 제한\n               const y = Math.max(endY, Math.min(initY, initY - (scrollY - i * 700)));\n \n               // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n-              // const z = -Math.max(0, scrollY - i * 700) * 0.5;\n+              const z = -Math.max(0, scrollY - i ) * 0.5;\n \n               return (\n-                <ImageWrapper key={i} $y={y} >\n+                <ImageWrapper key={i} $y={y} $z={z}>\n                   <Image\n                     src={slide.image}\n                     alt={slide.title}\n                     width={1200}\n"
                },
                {
                    "date": 1747724319856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n 'use client';\n \n-import React, { useEffect, useRef, useState } from 'react';\n+import React from 'react';\n import styled from 'styled-components';\n-import { gsap } from 'gsap';\n-import { ScrollTrigger } from 'gsap/ScrollTrigger';\n import Image from 'next/image';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { AppColors } from '@/styles/colors';\n import { CustomNavigator } from '@/customComponents/CustomNavigator';\n@@ -19,46 +17,27 @@\n   onTopArrowClick?: () => void;\n   onBottomArrowClick?: () => void;\n }\n \n-gsap.registerPlugin(ScrollTrigger);\n-\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n `;\n \n-const PinSection = styled.div`\n-  height: 100vh;\n-  position: sticky;\n-  top: 0;\n-  overflow: hidden;\n+const Content = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  gap: 100px;\n+  padding: 200px 0;\n `;\n \n-const ImageContainer = styled.div`\n-  position: relative;\n-  width: 100%;\n-  height: 100%;\n-  perspective: 1500px;\n-`;\n-\n-const ImageWrapper = styled.div<{\n-  $y: number;\n-  $z: number;\n-}>`\n-  position: absolute;\n-  left: 50%;\n+const ImageBox = styled.div`\n   width: 1200px;\n   height: 600px;\n-  transform: translateX(-50%)\n-    translateY(${({ $y }) => $y}px)\n-    translateZ(${({ $z }) => $z}px);\n-  transition: transform 0.2s linear;\n-  z-index: ${({ $z }) => 1000 - $z};\n   border-radius: 16px;\n   overflow: hidden;\n-  pointer-events: none;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n `;\n \n export default function EventBlock({\n@@ -70,71 +49,32 @@\n   description,\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n-  const containerRef = useRef<HTMLDivElement>(null);\n-  const [scrollY, setScrollY] = useState(0);\n-\n-  useEffect(() => {\n-    if (!containerRef.current) return;\n-\n-    const slideHeight = 700;\n-    const totalScroll = slideHeight * slides.length;\n-\n-    const ctx = gsap.context(() => {\n-      ScrollTrigger.create({\n-        trigger: containerRef.current,\n-        start: 'top top',\n-        end: `+=${totalScroll}`,\n-        scrub: true,\n-        pin: true,\n-        onUpdate: (self) => {\n-          const currentScroll = self.progress * totalScroll;\n-          setScrollY(currentScroll);\n-        },\n-      });\n-    }, containerRef);\n-\n-    return () => ctx.revert();\n-  }, [slides.length]);\n-\n   return (\n     <Wrapper>\n-      <div ref={containerRef}>\n-        <CustomNavigator\n-          topLabel={topLabel}\n-          centerLabel={centerLabel}\n-          bottomLabel={bottomLabel}\n-          title={title}\n-          description={description}\n-          onTopArrowClick={onTopArrowClick}\n-          onBottomArrowClick={onBottomArrowClick}\n-        />\n+      <CustomNavigator\n+        topLabel={topLabel}\n+        centerLabel={centerLabel}\n+        bottomLabel={bottomLabel}\n+        title={title}\n+        description={description}\n+        onTopArrowClick={onTopArrowClick}\n+        onBottomArrowClick={onBottomArrowClick}\n+      />\n \n-        <PinSection>\n-          <ImageContainer>\n-            {slides.map((slide, i) => {\n-              const initY = i * 700;\n-              const endY = initY - 630; // 90%만 올라오도록 제한\n-              const y = Math.max(endY, Math.min(initY, initY - (scrollY - i * 700)));\n-\n-              // 깊이감: 새 이미지가 등장할수록 이전 이미지 z축으로 밀려나도록\n-              const z = -Math.max(0, scrollY - i ) * 0.5;\n-\n-              return (\n-                <ImageWrapper key={i} $y={y} $z={z}>\n-                  <Image\n-                    src={slide.image}\n-                    alt={slide.title}\n-                    width={1200}\n-                    height={600}\n-                    style={{ objectFit: 'cover' }}\n-                  />\n-                </ImageWrapper>\n-              );\n-            })}\n-          </ImageContainer>\n-        </PinSection>\n-      </div>\n+      <Content>\n+        {slides.map((slide, i) => (\n+          <ImageBox key={i}>\n+            <Image\n+              src={slide.image}\n+              alt={slide.title}\n+              width={1200}\n+              height={600}\n+              style={{ objectFit: 'cover' }}\n+            />\n+          </ImageBox>\n+        ))}\n+      </Content>\n     </Wrapper>\n   );\n }\n"
                },
                {
                    "date": 1747725002143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { AppColors } from '@/styles/colors';\n import { CustomNavigator } from '@/customComponents/CustomNavigator';\n \n interface EventBlockProps {\n-  slides: { title: string; image: string }[];\n+  slides: {image: string }[];\n   topLabel: string;\n   centerLabel: string;\n   bottomLabel: string;\n   title: string;\n"
                },
                {
                    "date": 1747725018939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         {slides.map((slide, i) => (\n           <ImageBox key={i}>\n             <Image\n               src={slide.image}\n-              alt={slide.title}\n+              alt={''}\n               width={1200}\n               height={600}\n               style={{ objectFit: 'cover' }}\n             />\n"
                },
                {
                    "date": 1747725077426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,8 @@\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   gap: 100px;\n-  padding: 200px 0;\n `;\n \n const ImageBox = styled.div`\n   width: 1200px;\n"
                },
                {
                    "date": 1747725542563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n 'use client';\n \n-import React from 'react';\n+import React, { useEffect, useState } from 'react';\n import styled from 'styled-components';\n import Image from 'next/image';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { AppColors } from '@/styles/colors';\n import { CustomNavigator } from '@/customComponents/CustomNavigator';\n \n interface EventBlockProps {\n-  slides: {image: string }[];\n+  slides: { image: string }[];\n   topLabel: string;\n   centerLabel: string;\n   bottomLabel: string;\n   title: string;\n@@ -48,8 +48,28 @@\n   description,\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n+  const [isMobile, setIsMobile] = useState(false);\n+\n+  useEffect(() => {\n+    const checkMobile = () => {\n+      setIsMobile(window.innerWidth < Breakpoints.mobile);\n+    };\n+    checkMobile();\n+    window.addEventListener('resize', checkMobile);\n+    return () => window.removeEventListener('resize', checkMobile);\n+  }, []);\n+\n+  const getImageSrc = (src: string) => {\n+    if (!isMobile) return src;\n+\n+    // \"example/image01.jpg\" → \"example/image01_m.jpg\"\n+    const lastDot = src.lastIndexOf('.');\n+    if (lastDot === -1) return src;\n+    return src.slice(0, lastDot) + '_m' + src.slice(lastDot);\n+  };\n+\n   return (\n     <Wrapper>\n       <CustomNavigator\n         topLabel={topLabel}\n@@ -64,10 +84,10 @@\n       <Content>\n         {slides.map((slide, i) => (\n           <ImageBox key={i}>\n             <Image\n-              src={slide.image}\n-              alt={''}\n+              src={getImageSrc(slide.image)}\n+              alt=\"\"\n               width={1200}\n               height={600}\n               style={{ objectFit: 'cover' }}\n             />\n"
                },
                {
                    "date": 1747725677023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,24 @@\n   height: 600px;\n   border-radius: 16px;\n   overflow: hidden;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    width: 100%;\n+    height: auto;\n+    padding: 0 16px;\n+    box-sizing: border-box;\n+\n+    img {\n+      width: 100%;\n+      height: auto;\n+      display: block;\n+    }\n+  }\n `;\n \n+\n export default function EventBlock({\n   slides,\n   topLabel,\n   centerLabel,\n"
                },
                {
                    "date": 1747725786207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,15 @@\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n+\n+  @media (max-width: ${Breakpoints.mobile}px) {\n+    min-width: 0;\n+  }\n `;\n \n+\n const Content = styled.div`\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n"
                },
                {
                    "date": 1747726179750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,25 @@\n   onTopArrowClick?: () => void;\n   onBottomArrowClick?: () => void;\n }\n \n+const LinkButton = styled.a<{ $color: 'white' | 'black' }>`\n+  position: absolute;\n+  bottom: 16px;\n+  right: ${({ $color }) => ($color === 'white' ? '120px' : '16px')};\n+  font-size: 14px;\n+  font-weight: 500;\n+  color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n+  text-decoration: none;\n+  cursor: pointer;\n+  animation: bounceY 1.5s ease-in-out infinite;\n+\n+  @keyframes bounceY {\n+    0%, 100% { transform: translateY(0px); }\n+    50% { transform: translateY(-10px); }\n+  }\n+`;\n+\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n@@ -27,9 +44,8 @@\n     min-width: 0;\n   }\n `;\n \n-\n const Content = styled.div`\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n@@ -40,8 +56,9 @@\n   width: 1200px;\n   height: 600px;\n   border-radius: 16px;\n   overflow: hidden;\n+  position: relative; /* 버튼 위치 기준 */\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     width: 100%;\n@@ -56,9 +73,8 @@\n     }\n   }\n `;\n \n-\n export default function EventBlock({\n   slides,\n   topLabel,\n   centerLabel,\n@@ -81,9 +97,8 @@\n \n   const getImageSrc = (src: string) => {\n     if (!isMobile) return src;\n \n-    // \"example/image01.jpg\" → \"example/image01_m.jpg\"\n     const lastDot = src.lastIndexOf('.');\n     if (lastDot === -1) return src;\n     return src.slice(0, lastDot) + '_m' + src.slice(lastDot);\n   };\n@@ -109,8 +124,28 @@\n               width={1200}\n               height={600}\n               style={{ objectFit: 'cover' }}\n             />\n+\n+            {/* 흰 텍스트 버튼 */}\n+            <LinkButton\n+              $color=\"white\"\n+              href=\"https://aigo.framer.website/\"\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+            >\n+              AIGO\n+            </LinkButton>\n+\n+            {/* 검정 텍스트 버튼 */}\n+            <LinkButton\n+              $color=\"black\"\n+              href=\"https://xn--2e0bw7u.com/\"\n+              target=\"_blank\"\n+              rel=\"noopener noreferrer\"\n+            >\n+              프로젝트닷컴\n+            </LinkButton>\n           </ImageBox>\n         ))}\n       </Content>\n     </Wrapper>\n"
                },
                {
                    "date": 1747726300752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   centerLabel: string;\n   bottomLabel: string;\n   title: string;\n   description: string;\n+  buttonTitle: string;\n   onTopArrowClick?: () => void;\n   onBottomArrowClick?: () => void;\n }\n \n@@ -80,8 +81,9 @@\n   centerLabel,\n   bottomLabel,\n   title,\n   description,\n+  buttonTitle,\n   onTopArrowClick,\n   onBottomArrowClick,\n }: EventBlockProps) {\n   const [isMobile, setIsMobile] = useState(false);\n@@ -132,9 +134,9 @@\n               href=\"https://aigo.framer.website/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n-              AIGO\n+              {buttonTitle}\n             </LinkButton>\n \n             {/* 검정 텍스트 버튼 */}\n             <LinkButton\n@@ -142,9 +144,9 @@\n               href=\"https://xn--2e0bw7u.com/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n-              프로젝트닷컴\n+               {buttonTitle}\n             </LinkButton>\n           </ImageBox>\n         ))}\n       </Content>\n"
                },
                {
                    "date": 1747726321692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,8 @@\n               href=\"https://aigo.framer.website/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n-              {buttonTitle}\n             </LinkButton>\n \n             {/* 검정 텍스트 버튼 */}\n             <LinkButton\n@@ -144,9 +143,8 @@\n               href=\"https://xn--2e0bw7u.com/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n-               {buttonTitle}\n             </LinkButton>\n           </ImageBox>\n         ))}\n       </Content>\n"
                },
                {
                    "date": 1747726338297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n               href=\"https://aigo.framer.website/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n+              {buttonTitle}\n             </LinkButton>\n \n             {/* 검정 텍스트 버튼 */}\n             <LinkButton\n@@ -143,8 +144,9 @@\n               href=\"https://xn--2e0bw7u.com/\"\n               target=\"_blank\"\n               rel=\"noopener noreferrer\"\n             >\n+               {buttonTitle}\n             </LinkButton>\n           </ImageBox>\n         ))}\n       </Content>\n"
                },
                {
                    "date": 1747726442795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \n const LinkButton = styled.a<{ $color: 'white' | 'black' }>`\n   position: absolute;\n   bottom: 16px;\n-  right: ${({ $color }) => ($color === 'white' ? '120px' : '16px')};\n+  right: 16px;\n   font-size: 14px;\n   font-weight: 500;\n   color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n   text-decoration: none;\n@@ -57,9 +57,9 @@\n   width: 1200px;\n   height: 600px;\n   border-radius: 16px;\n   overflow: hidden;\n-  position: relative; /* 버튼 위치 기준 */\n+  position: relative;\n   box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n \n   @media (max-width: ${Breakpoints.mobile}px) {\n     width: 100%;\n@@ -117,39 +117,35 @@\n         onBottomArrowClick={onBottomArrowClick}\n       />\n \n       <Content>\n-        {slides.map((slide, i) => (\n-          <ImageBox key={i}>\n-            <Image\n-              src={getImageSrc(slide.image)}\n-              alt=\"\"\n-              width={1200}\n-              height={600}\n-              style={{ objectFit: 'cover' }}\n-            />\n+        {slides.map((slide, i) => {\n+          const color = i === 0 ? 'white' : 'black';\n+          const href = i === 0\n+            ? 'https://aigo.framer.website/'\n+            : 'https://xn--2e0bw7u.com/';\n \n-            {/* 흰 텍스트 버튼 */}\n-            <LinkButton\n-              $color=\"white\"\n-              href=\"https://aigo.framer.website/\"\n-              target=\"_blank\"\n-              rel=\"noopener noreferrer\"\n-            >\n-              {buttonTitle}\n-            </LinkButton>\n+          return (\n+            <ImageBox key={i}>\n+              <Image\n+                src={getImageSrc(slide.image)}\n+                alt=\"\"\n+                width={1200}\n+                height={600}\n+                style={{ objectFit: 'cover' }}\n+              />\n \n-            {/* 검정 텍스트 버튼 */}\n-            <LinkButton\n-              $color=\"black\"\n-              href=\"https://xn--2e0bw7u.com/\"\n-              target=\"_blank\"\n-              rel=\"noopener noreferrer\"\n-            >\n-               {buttonTitle}\n-            </LinkButton>\n-          </ImageBox>\n-        ))}\n+              <LinkButton\n+                $color={color}\n+                href={href}\n+                target=\"_blank\"\n+                rel=\"noopener noreferrer\"\n+              >\n+                {buttonTitle}\n+              </LinkButton>\n+            </ImageBox>\n+          );\n+        })}\n       </Content>\n     </Wrapper>\n   );\n }\n"
                },
                {
                    "date": 1747726503213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,25 +18,26 @@\n   onTopArrowClick?: () => void;\n   onBottomArrowClick?: () => void;\n }\n \n-const LinkButton = styled.a<{ $color: 'white' | 'black' }>`\n+const LinkButton = styled.div<{ $color: 'white' | 'black' }>`\n   position: absolute;\n   bottom: 16px;\n   right: 16px;\n+  padding-right: 20px; /* ✅ 오른쪽 여백 추가 */\n   font-size: 14px;\n   font-weight: 500;\n   color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n-  text-decoration: none;\n-  cursor: pointer;\n   animation: bounceY 1.5s ease-in-out infinite;\n+  pointer-events: none; /* ✅ 클릭 방지 (이미지가 클릭 대상이므로) */\n \n   @keyframes bounceY {\n     0%, 100% { transform: translateY(0px); }\n     50% { transform: translateY(-10px); }\n   }\n `;\n \n+\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n@@ -125,25 +126,26 @@\n             : 'https://xn--2e0bw7u.com/';\n \n           return (\n             <ImageBox key={i}>\n-              <Image\n-                src={getImageSrc(slide.image)}\n-                alt=\"\"\n-                width={1200}\n-                height={600}\n-                style={{ objectFit: 'cover' }}\n-              />\n+  <a\n+    href={href}\n+    target=\"_blank\"\n+    rel=\"noopener noreferrer\"\n+    style={{ display: 'block', width: '100%', height: '100%' }}\n+  >\n+    <Image\n+      src={getImageSrc(slide.image)}\n+      alt=\"\"\n+      width={1200}\n+      height={600}\n+      style={{ objectFit: 'cover' }}\n+    />\n+  </a>\n \n-              <LinkButton\n-                $color={color}\n-                href={href}\n-                target=\"_blank\"\n-                rel=\"noopener noreferrer\"\n-              >\n-                {buttonTitle}\n-              </LinkButton>\n-            </ImageBox>\n+  <LinkButton $color={color}>{buttonTitle}</LinkButton>\n+</ImageBox>\n+\n           );\n         })}\n       </Content>\n     </Wrapper>\n"
                },
                {
                    "date": 1747726675170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import Image from 'next/image';\n import { Breakpoints } from '@/constants/layoutConstants';\n import { AppColors } from '@/styles/colors';\n import { CustomNavigator } from '@/customComponents/CustomNavigator';\n+import { userStamp } from '@/lib/api/user/api';\n \n interface EventBlockProps {\n   slides: { image: string }[];\n   topLabel: string;\n@@ -22,22 +23,21 @@\n const LinkButton = styled.div<{ $color: 'white' | 'black' }>`\n   position: absolute;\n   bottom: 16px;\n   right: 16px;\n-  padding-right: 20px; /* ✅ 오른쪽 여백 추가 */\n+  padding-right: 20px;\n   font-size: 14px;\n   font-weight: 500;\n   color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n   animation: bounceY 1.5s ease-in-out infinite;\n-  pointer-events: none; /* ✅ 클릭 방지 (이미지가 클릭 대상이므로) */\n+  pointer-events: none;\n \n   @keyframes bounceY {\n     0%, 100% { transform: translateY(0px); }\n     50% { transform: translateY(-10px); }\n   }\n `;\n \n-\n const Wrapper = styled.div`\n   width: 100%;\n   min-width: ${Breakpoints.desktop}px;\n   background-color: ${AppColors.background};\n@@ -105,8 +105,19 @@\n     if (lastDot === -1) return src;\n     return src.slice(0, lastDot) + '_m' + src.slice(lastDot);\n   };\n \n+  const handleImageClick = (href: string) => {\n+    void userStamp({\n+      uuid: localStorage.getItem('logId') ?? 'anonymous',\n+      category: '버튼',\n+      content: 'EventBlock',\n+      memo: `링크 버튼: ${buttonTitle}`,\n+    });\n+\n+    window.open(href, '_blank');\n+  };\n+\n   return (\n     <Wrapper>\n       <CustomNavigator\n         topLabel={topLabel}\n@@ -126,26 +137,23 @@\n             : 'https://xn--2e0bw7u.com/';\n \n           return (\n             <ImageBox key={i}>\n-  <a\n-    href={href}\n-    target=\"_blank\"\n-    rel=\"noopener noreferrer\"\n-    style={{ display: 'block', width: '100%', height: '100%' }}\n-  >\n-    <Image\n-      src={getImageSrc(slide.image)}\n-      alt=\"\"\n-      width={1200}\n-      height={600}\n-      style={{ objectFit: 'cover' }}\n-    />\n-  </a>\n+              <div\n+                onClick={() => handleImageClick(href)}\n+                style={{ display: 'block', width: '100%', height: '100%', cursor: 'pointer' }}\n+              >\n+                <Image\n+                  src={getImageSrc(slide.image)}\n+                  alt=\"\"\n+                  width={1200}\n+                  height={600}\n+                  style={{ objectFit: 'cover' }}\n+                />\n+              </div>\n \n-  <LinkButton $color={color}>{buttonTitle}</LinkButton>\n-</ImageBox>\n-\n+              <LinkButton $color={color}>{buttonTitle}</LinkButton>\n+            </ImageBox>\n           );\n         })}\n       </Content>\n     </Wrapper>\n"
                },
                {
                    "date": 1747726709134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n     void userStamp({\n       uuid: localStorage.getItem('logId') ?? 'anonymous',\n       category: '버튼',\n       content: 'EventBlock',\n-      memo: `링크 버튼: ${buttonTitle}`,\n+      memo: `링크 버튼: ${href}`,\n     });\n \n     window.open(href, '_blank');\n   };\n"
                },
                {
                    "date": 1747726969920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n   position: absolute;\n   bottom: 16px;\n   right: 16px;\n   padding-right: 20px;\n-  font-size: 14px;\n-  font-weight: 500;\n+  font-size: 28px;\n+  font-weight: 700;\n   color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n   animation: bounceY 1.5s ease-in-out infinite;\n   pointer-events: none;\n \n"
                },
                {
                    "date": 1747726981890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n   position: absolute;\n   bottom: 16px;\n   right: 16px;\n   padding-right: 20px;\n-  font-size: 28px;\n-  font-weight: 700;\n+  font-size: 24px;\n+  font-weight: 500;\n   color: ${({ $color }) => ($color === 'white' ? '#ffffff' : '#000000')};\n   animation: bounceY 1.5s ease-in-out infinite;\n   pointer-events: none;\n \n"
                },
                {
                    "date": 1747965469602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,8 @@\n   };\n \n   const handleImageClick = (href: string) => {\n     void userStamp({\n-      uuid: localStorage.getItem('logId') ?? 'anonymous',\n       category: '버튼',\n       content: 'EventBlock',\n       memo: `링크 버튼: ${href}`,\n     });\n"
                }
            ],
            "date": 1747719476073,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport Image from 'next/image';\nimport { Breakpoints } from '@/constants/layoutConstants';\nimport { AppColors } from '@/styles/colors';\n\ninterface EventBlockProps {\n  slides: { title: string; image: string }[];\n}\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-width: ${Breakpoints.desktop}px;\n  background-color: ${AppColors.background};\n`;\n\nconst StickyContainer = styled.div`\n  position: relative;\n  height: 100vh;\n  overflow: hidden;\n`;\n\nconst StackImage = styled(Image)<{ $index: number }>`\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 600px;\n  height: auto;\n  border-radius: 16px;\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  z-index: ${({ $index }) => 100 - $index};\n`;\n\nexport default function EventBlock({ slides }: EventBlockProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const imageRefs = useRef<(HTMLImageElement | null)[]>([]);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const ctx = gsap.context(() => {\n      slides.forEach((_, index) => {\n        if (index === 0) return;\n\n        const image = imageRefs.current[index];\n        const prevImage = imageRefs.current[index - 1];\n        if (!image || !prevImage) return;\n\n        gsap.fromTo(\n          image,\n          { y: '100%', rotateX: 15, opacity: 0 },\n          {\n            y: '0%',\n            rotateX: 0,\n            opacity: 1,\n            ease: 'power2.out',\n            scrollTrigger: {\n              trigger: containerRef.current,\n              start: `top+=${index * 100} top`,\n              end: `top+=${(index + 1) * 100} top`,\n              scrub: true,\n              pin: true,\n              anticipatePin: 1,\n            },\n          }\n        );\n\n        gsap.to(prevImage, {\n          rotateX: -30,\n          transformOrigin: 'bottom center',\n          ease: 'power2.inOut',\n          scrollTrigger: {\n            trigger: containerRef.current,\n            start: `top+=${index * 100} top`,\n            end: `top+=${(index + 1) * 100} top`,\n            scrub: true,\n          },\n        });\n      });\n    }, containerRef);\n\n    return () => ctx.revert();\n  }, [slides]);\n\n  return (\n    <Wrapper>\n      <div ref={containerRef}>\n        <StickyContainer>\n          {slides.map((slide, i) => (\n            <StackImage\n              key={i}\n              src={slide.image}\n              alt={slide.title}\n              width={600}\n              height={800}\n              $index={i}\n              ref={(el) => {\n                imageRefs.current[i] = el;\n              }}\n            />\n          ))}\n        </StickyContainer>\n      </div>\n    </Wrapper>\n  );\n}"
        }
    ]
}