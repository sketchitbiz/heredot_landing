{
    "sourceFile": "src/components/Ai/AiChatMessage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747718468788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747718741070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1079,8 +1079,11 @@\n             </th>\n             <th style={{ ...headerCellStyle, width: '20%' }}>\n               {t.tableHeaders.amount}\n             </th>\n+            <th style={{ ...headerCellStyle, width: '10%' }}>\n+              {t.tableHeaders.actions || '관리'}\n+            </th>\n           </tr>\n         </thead>\n         <tbody>\n           {invoiceData.invoiceGroup?.map((group) => {\n@@ -1132,84 +1135,94 @@\n                 <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n                   {item.note &&\n                   /^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(item.note)\n                     ? item.note\n-                    : formatAmountForPdf(item.amount)}\n+                    : formatAmountForPdf(item.amount, countryCode)}\n                 </td>\n+                <td className=\"col-actions\">\n+                  <ActionButton\n+                    onClick={() =>\n+                      onActionClick('delete_feature_json', {\n+                        featureId: item.id,\n+                      })\n+                    }\n+                  >\n+                    {isActuallyDeleted\n+                      ? t.buttons.cancel\n+                      : t.buttons.delete}\n+                  </ActionButton>\n+                </td>\n               </tr>\n             ));\n           })}\n           <tr>\n             <td colSpan={3} style={{ ...headerCellStyle, textAlign: 'right' }}>\n               <strong>{t.estimateInfo.totalSum}</strong>\n             </td>\n-            <td\n-              style={{\n-                ...valueCellStyle,\n-                textAlign: 'right',\n-              }}\n-            >\n+            <td className=\"col-amount\">\n               <strong>\n                 {invoiceData.total?.totalConvertedDisplay &&\n                 typeof invoiceData.total.totalConvertedDisplay === 'string'\n                   ? invoiceData.total.totalConvertedDisplay\n+                  : calculatedTotalAmount !== undefined\n+                  ? formatAmountForPdf(\n+                      calculatedTotalAmount,\n+                      countryCode\n+                    )\n                   : formatAmountForPdf(\n-                      invoiceDetailsForPdf.currentTotal,\n+                      invoiceData.total?.amount,\n                       countryCode\n                     )}\n               </strong>\n             </td>\n+            <td></td>\n           </tr>\n           <tr>\n             <td colSpan={3} style={{ ...headerCellStyle, textAlign: 'right' }}>\n               <strong>{t.estimateInfo.vatIncluded}</strong>\n             </td>\n-            <td\n-              style={{\n-                ...valueCellStyle,\n-                textAlign: 'right',\n-              }}\n-            >\n+            <td className=\"col-amount\">\n               <strong>\n                 {formatAmountForPdf(\n-                  Math.round((invoiceDetailsForPdf.currentTotal || 0) * 1.1),\n+                  Math.round((calculatedTotalAmount || 0) * 1.1),\n                   countryCode\n                 )}\n               </strong>\n             </td>\n+            <td></td>\n           </tr>\n-          {invoiceDetailsForPdf.currentTotalDuration > 0 && (\n+          {calculatedTotalDuration !== undefined && (\n             <tr>\n               <td\n                 colSpan={3}\n                 style={{ ...headerCellStyle, textAlign: 'right' }}\n               >\n                 {t.estimateInfo.totalDuration}\n               </td>\n-              <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n-                {typeof invoiceDetailsForPdf.currentTotalDuration === 'number'\n-                  ? `${Math.ceil(\n-                      invoiceDetailsForPdf.currentTotalDuration / 5\n-                    )} ${t.estimateInfo.week} (${\n-                      lang === 'ko' ? '약 ' : ''\n-                    }${Math.ceil(\n-                      invoiceDetailsForPdf.currentTotalDuration / 20\n+              <td className=\"col-amount\">\n+                {typeof calculatedTotalDuration === 'number'\n+                  ? `${Math.ceil(calculatedTotalDuration / 5)} ${\n+                      t.estimateInfo.week\n+                    } (${lang === 'ko' ? '약 ' : ''}${Math.ceil(\n+                      calculatedTotalDuration / 20\n                     )} ${t.estimateInfo.monthUnit})`\n-                  : `${invoiceDetailsForPdf.currentTotalDuration} ${t.estimateInfo.day}`}\n+                  : `${calculatedTotalDuration} ${t.estimateInfo.day}`}\n               </td>\n+              <td></td>\n             </tr>\n           )}\n-          {invoiceDetailsForPdf.currentTotalPages > 0 && (\n+          {calculatedTotalPages !== undefined && (\n             <tr>\n               <td\n                 colSpan={3}\n                 style={{ ...headerCellStyle, textAlign: 'right' }}\n               >\n                 {t.estimateInfo.totalPages}\n               </td>\n-              <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n-                {invoiceDetailsForPdf.currentTotalPages} {t.estimateInfo.page}\n+              <td className=\"col-amount\">\n+                {calculatedTotalPages} {t.estimateInfo.page}\n               </td>\n+              <td></td>\n             </tr>\n           )}\n         </tbody>\n       </table>\n@@ -1578,8 +1591,9 @@\n                     <th className=\"col-category\">{t.tableHeaders.category}</th>\n                     <th className=\"col-feature\">{t.tableHeaders.item}</th>\n                     <th className=\"col-description\">{t.tableHeaders.detail}</th>\n                     <th className=\"col-amount\">{t.tableHeaders.amount}</th>\n+                    <th className=\"col-actions\">{t.tableHeaders.actions || '관리'}</th>\n                   </tr>\n                 </thead>\n                 <tbody>\n                   {invoiceData.invoiceGroup?.map((group) => (\n@@ -1669,8 +1683,21 @@\n                               )\n                                 ? item.note\n                                 : formatAmountWithCurrency(item.amount, true)}\n                             </td>\n+                            <td className=\"col-actions\">\n+                              <ActionButton\n+                                onClick={() =>\n+                                  onActionClick('delete_feature_json', {\n+                                    featureId: item.id,\n+                                  })\n+                                }\n+                              >\n+                                {isActuallyDeleted\n+                                  ? t.buttons.cancel\n+                                  : t.buttons.delete}\n+                              </ActionButton>\n+                            </td>\n                           </tr>\n                         );\n                       })}\n                     </React.Fragment>\n"
                },
                {
                    "date": 1747718795562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1145,11 +1145,9 @@\n                         featureId: item.id,\n                       })\n                     }\n                   >\n-                    {isActuallyDeleted\n-                      ? t.buttons.cancel\n-                      : t.buttons.delete}\n+                    {isActuallyDeleted ? t.buttons.cancel : t.buttons.delete}\n                   </ActionButton>\n                 </td>\n               </tr>\n             ));\n@@ -1163,16 +1161,10 @@\n                 {invoiceData.total?.totalConvertedDisplay &&\n                 typeof invoiceData.total.totalConvertedDisplay === 'string'\n                   ? invoiceData.total.totalConvertedDisplay\n                   : calculatedTotalAmount !== undefined\n-                  ? formatAmountForPdf(\n-                      calculatedTotalAmount,\n-                      countryCode\n-                    )\n-                  : formatAmountForPdf(\n-                      invoiceData.total?.amount,\n-                      countryCode\n-                    )}\n+                  ? formatAmountForPdf(calculatedTotalAmount, countryCode)\n+                  : formatAmountForPdf(invoiceData.total?.amount, countryCode)}\n               </strong>\n             </td>\n             <td></td>\n           </tr>\n@@ -1591,9 +1583,11 @@\n                     <th className=\"col-category\">{t.tableHeaders.category}</th>\n                     <th className=\"col-feature\">{t.tableHeaders.item}</th>\n                     <th className=\"col-description\">{t.tableHeaders.detail}</th>\n                     <th className=\"col-amount\">{t.tableHeaders.amount}</th>\n-                    <th className=\"col-actions\">{t.tableHeaders.actions || '관리'}</th>\n+                    <th className=\"col-actions\">\n+                      {t.tableHeaders.actions || '관리'}\n+                    </th>\n                   </tr>\n                 </thead>\n                 <tbody>\n                   {invoiceData.invoiceGroup?.map((group) => (\n@@ -1915,5 +1909,5 @@\n         )}\n       </MessageBox>\n     </MessageWrapper>\n   );\n-}\n\\ No newline at end of file\n+}\n"
                }
            ],
            "date": 1747718468788,
            "name": "Commit-0",
            "content": "'use client';\n\nimport styled, { css } from 'styled-components';\nimport { AppColors } from '@/styles/colors';\nimport { AppTextStyles } from '@/styles/textStyles';\nimport ReactMarkdown, { Options } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport useAuthStore from '@/store/authStore';\nimport { useLang } from '@/contexts/LangContext';\nimport { aiChatDictionary } from '@/lib/i18n/aiChat';\nimport { ChatDictionary } from '@/app/ai/components/StepData'; // ChatDictionary 타입 임포트\n\n/**\n * AiChatMessage 컴포넌트\n *\n * 이 컴포넌트는 채팅 메시지를 표시하는 역할을 합니다.\n * 사용자와 AI의 메시지를 구분하여 다른 스타일로 표시하며,\n * AI가 생성한 견적서를 테이블 형태로 표시합니다.\n */\n\n// 견적서 데이터 타입 정의\n// INVOICE_SCHEMA에 따른 타입 정의 (실제 schema.ts의 구조를 반영해야 함)\n// 이 타입들은 AiPageContent.tsx와 동기화되어야 하며, 한 곳에서 정의하고 공유하는 것이 좋음\nexport interface InvoiceFeatureItem {\n  id: string;\n  feature: string; // 기능 이름\n  description: string; // 기능 설명\n  amount: number | string; // 금액 (숫자 또는 \"별도 문의\" 등의 문자열)\n  duration?: string; // 개발 기간 (선택적)\n  category?: string; // 카테고리 (선택적)\n  pages?: number | string; // 페이지 수 (선택적)\n  note?: string; // 추가 참고사항 (선택적)\n}\n\ninterface InvoiceGroup {\n  category: string; // 그룹 카테고리(구분)\n  items: InvoiceFeatureItem[]; // 해당 카테고리에 속한 기능 항목들\n}\n\ninterface InvoiceTotal {\n  amount: number; // 총 금액\n  duration?: number; // 총 개발 기간 (선택적)\n  pages?: number; // 총 페이지 수 (선택적)\n  totalConvertedDisplay?: string; // AI가 제공하는 변환된 총액 문자열 (추가)\n}\n\nexport interface InvoiceDataType {\n  project: string; // 프로젝트 이름\n  invoiceGroup: InvoiceGroup[]; // 기능 그룹 배열\n  total: InvoiceTotal; // 총계 정보\n}\n\n// 메시지 인터페이스 정의\nexport interface Message {\n  id: number; // 메시지 고유 ID\n  sender: 'user' | 'ai'; // 발신자 구분 (사용자/AI)\n  text: string; // 메시지 텍스트\n  imageUrl?: string; // 이미지 URL (선택적)\n  fileType?: string; // 파일 타입 (선택적)\n  invoiceData?: InvoiceDataType; // AI가 생성한 견적서 JSON 데이터 (선택적)\n}\n\n// MessageProps - 컴포넌트의 속성 인터페이스\ninterface MessageProps extends Omit<Message, 'id'> {\n  onActionClick: (action: string, data?: { featureId?: string }) => void; // 버튼 클릭 핸들러\n  calculatedTotalAmount?: number; // 계산된 총 금액 (삭제된 항목 제외)\n  calculatedTotalDuration?: number; // 계산된 총 기간 (삭제된 항목 제외)\n  calculatedTotalPages?: number; // 계산된 총 페이지 수 (삭제된 항목 제외)\n  currentItems?: Array<\n    InvoiceDataType['invoiceGroup'][number]['items'][number] & {\n      isDeleted: boolean;\n    }\n  >; // 현재 항목 상태\n  lang: string; // lang prop 추가\n}\n\n// 스타일드 컴포넌트의 props 타입\ninterface StyledComponentProps {\n  $sender: 'user' | 'ai'; // 발신자 구분 (스타일 적용용)\n}\n\n// 통화 변환 기능 추가\n// 각 국가 코드별 환율 정보 (2023년 기준)\nconst exchangeRates = {\n  USD: 1350, // 1 USD = 1,350 KRW\n  JPY: 9, // 1 JPY = 9 KRW\n  CNY: 190, // 1 CNY = 190 KRW\n  EUR: 1450, // 1 EUR = 1,450 KRW\n  GBP: 1700, // 1 GBP = 1,700 KRW\n};\n\n// 국가 코드별 통화 기호\nconst currencySymbols = {\n  KR: '₩',\n  US: '$',\n  JP: '¥',\n  CN: '¥',\n  GB: '£',\n  EU: '€',\n  default: '$',\n};\n\n// 국가 코드를 통화 코드로 변환\nconst getCountryCurrency = (countryCode: string | null): string => {\n  if (!countryCode) return 'USD';\n\n  switch (countryCode) {\n    case 'KR':\n      return 'KRW';\n    case 'US':\n      return 'USD';\n    case 'JP':\n      return 'JPY';\n    case 'CN':\n      return 'CNY';\n    case 'GB':\n      return 'GBP';\n    // EU 국가들\n    case 'DE':\n    case 'FR':\n    case 'IT':\n    case 'ES':\n    case 'NL':\n    case 'BE':\n    case 'AT':\n    case 'FI':\n    case 'PT':\n    case 'IE':\n    case 'GR':\n    case 'SK':\n    case 'SI':\n    case 'LU':\n    case 'LV':\n    case 'LT':\n    case 'EE':\n    case 'CY':\n    case 'MT':\n      return 'EUR';\n    default:\n      return 'USD'; // 기본값은 USD\n  }\n};\n\n// 통화 심볼 가져오기\nconst getCurrencySymbol = (countryCode: string | null): string => {\n  if (!countryCode) return currencySymbols.default;\n\n  const code = countryCode as keyof typeof currencySymbols;\n  return currencySymbols[code] || currencySymbols.default;\n};\n\n// 금액 포맷 함수 - 통화 변환 및 표시 기능 추가\nconst formatAmount = (\n  amount: number | string,\n  countryCode: string | null,\n  forceDetailed: boolean = false\n) => {\n  // 금액이 숫자가 아닌 경우 (예: \"별도 문의\") 그대로 반환\n  if (typeof amount !== 'number') {\n    return amount;\n  }\n\n  // forceDetailed가 true이거나 한국이 아닌 경우 (그리고 amount가 숫자일 때)\n  if (forceDetailed || countryCode !== 'KR') {\n    const localCurrency = getCountryCurrency(countryCode);\n    const localSymbol = getCurrencySymbol(countryCode);\n\n    // 항상 KRW를 기준으로 다른 통화와 함께 표시\n    // 만약 사용자가 KR이 아니면, 해당 국가 통화와 KRW를 함께 표시\n    // 만약 사용자가 KR이지만 forceDetailed가 true이면, USD와 KRW를 함께 표시\n\n    let displaySymbol = currencySymbols.US;\n    let convertedAmountForDisplay = Math.round(\n      amount / (exchangeRates['USD'] || 1350)\n    ); // KRW -> USD\n\n    if (countryCode !== 'KR') {\n      // 한국이 아닌 경우, 해당 국가 통화로 표시\n      displaySymbol = localSymbol;\n      if (exchangeRates[localCurrency as keyof typeof exchangeRates]) {\n        convertedAmountForDisplay = Math.round(\n          amount / exchangeRates[localCurrency as keyof typeof exchangeRates]\n        );\n      } else if (localCurrency === 'KRW') {\n        // 혹시 getCountryCurrency가 KRW를 반환하는 경우\n        displaySymbol = currencySymbols.US;\n        convertedAmountForDisplay = Math.round(\n          amount / (exchangeRates['USD'] || 1350)\n        );\n      }\n    }\n    // 한국 사용자이고 forceDetailed=true인 경우, USD (₩...) 형식으로 표시\n    // 그 외 국가 사용자는 LocalCurrency (₩...) 형식으로 표시\n    return `${displaySymbol}${convertedAmountForDisplay.toLocaleString()} (₩${amount.toLocaleString()})`;\n  }\n\n  // 한국이면서 forceDetailed가 false인 경우 원화만 표시\n  return `${amount.toLocaleString()} 원`;\n};\n\n// 테이블 스타일 정의 - 견적서에 사용되는 공통 테이블 스타일\nconst TableStyles = css`\n  width: 100%;\n  border: none;\n  border-spacing: 0;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  font-size: 0.9rem;\n  table-layout: fixed;\n  word-wrap: break-word;\n\n  th,\n  td {\n    border: none;\n    padding: 5px 8px;\n    vertical-align: middle;\n    border: none;\n  }\n\n  tr:first-child th,\n  tr:first-child td {\n    border: none;\n  }\n  tr:last-child td {\n    border: none;\n  }\n  th:first-child,\n  td:first-child {\n    border: none;\n  }\n  th:last-child,\n  td:last-child {\n    border: none;\n  }\n\n  thead {\n    background-color: #1e1e2d;\n    th {\n      color: ${AppColors.onBackground};\n      text-align: left;\n      font-weight: 400;\n      padding: 10px 8px;\n\n      &:nth-child(1) {\n        width: 18%;\n      }\n      &:nth-child(2) {\n        width: 20%;\n      }\n      &:nth-child(3) {\n        width: 32%;\n      }\n      &:nth-child(4) {\n        width: 15%;\n        min-width: 95px;\n        text-align: center;\n      }\n      &:nth-child(5) {\n        width: 20%;\n      }\n      &:nth-child(6) {\n        width: 15%;\n        text-align: center;\n      }\n    }\n  }\n\n  tbody {\n    tr {\n      background-color: #111119;\n      &:nth-child(even) {\n        background-color: #1e1e2d;\n      }\n    }\n    td {\n      color: ${AppColors.onBackground};\n      &:nth-child(4) {\n        text-align: right;\n      }\n    }\n\n    tr:last-child {\n      background-color: transparent;\n      border-top: 1px solid ${AppColors.aiBorder};\n      td {\n        border-bottom: none;\n      }\n      td:first-child {\n        font-weight: bold;\n      }\n      td:nth-child(4) {\n        font-weight: bold;\n        text-align: right;\n        padding-right: 8px;\n      }\n    }\n\n    td:last-child {\n      text-align: center;\n    }\n  }\n`;\n\n// 마크다운 컨테이너 스타일 - AI 메시지 내 마크다운 포맷팅을 위한 컨테이너\nconst StyledMarkdownContainer = styled.div`\n  table {\n    ${TableStyles}\n    border-radius: 8px;\n    overflow: hidden;\n    border: 1px solid ${AppColors.aiBorder};\n    font-weight: 300;\n\n    td button {\n      background-color: ${AppColors.onBackgroundGray};\n      color: #ffffff;\n      border: none;\n      padding: 0.3rem 0.9rem;\n      border-radius: 10px;\n      cursor: pointer;\n      font-size: 0.8rem;\n      transition: background-color 0.2s;\n\n      &:hover {\n        background-color: ${AppColors.primary};\n      }\n    }\n  }\n  //에이닷 텍스트 크기\n  p {\n    margin-bottom: 0.5rem;\n    font-weight: 300;\n  }\n\n  strong {\n    font-weight: 400;\n  }\n`;\n\n// 메시지 래퍼 스타일 - 메시지 전체를 감싸는 컨테이너\nconst MessageWrapper = styled.div<StyledComponentProps>`\n  display: flex;\n  width: 100%;\n  margin-bottom: 1rem;\n\n  // 발신자에 따라 정렬 방향 설정 (사용자: 오른쪽, AI: 왼쪽)\n  justify-content: ${(props) =>\n    props.$sender === 'user' ? 'flex-end' : 'flex-start'};\n`;\n\n// 메시지 박스 스타일 - 실제 메시지 내용을 담는 말풍선\nconst MessageBox = styled.div<StyledComponentProps>`\n  max-width: 100%;\n  padding: 0.3rem 0.3rem;\n  border-radius: 24px;\n  ${AppTextStyles.body1}\n  line-height: 1.7;\n  letter-spacing: normal;\n\n  ${(props) =>\n    props.$sender === 'user'\n      ? css`\n          background-color: ${AppColors.primary};\n          color: ${AppColors.onPrimary};\n          border-bottom-right-radius: 0px;\n          white-space: pre-wrap;\n          padding: 0.25rem 1.25rem 0.5rem 1.25rem; // 사용자 메시지 패딩 (위아래 동일하게 조정)\n        `\n      : css`\n          background-color: ${AppColors.background};\n          color: ${AppColors.onBackground};\n        `};\n`;\n\n// 프로필 이미지 스타일 - AI 프로필 이미지\nconst ProfileImage = styled.img`\n  height: 2.5rem;\n  width: 2.5rem;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 0.75rem;\n`;\n\n// AI 프로필 헤더 (이미지와 이름을 감싸는 컨테이너)\nconst AiProfileHeader = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n`;\n\n// 프로필 이름 스타일 - AI 이름 표시\nconst ProfileName = styled.p`\n  font-size: 20px;\n  color: ${AppColors.onBackground};\n  font-weight: bold;\n  margin: 0;\n`;\n\n// 버튼 스타일 - 마크다운 내부에서 사용되는 버튼\nconst StyledActionButton = styled.button`\n  background-color: ${AppColors.onBackgroundGray};\n  color: white;\n  border: none;\n  padding: 0.3rem 0.6rem;\n  border-radius: 10px;\n  cursor: pointer;\n  font-size: 14px;\n  margin-left: 0.5rem;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: ${AppColors.primary};\n  }\n`;\n\n// 버튼 렌더러의 props 타입 정의\ninterface CustomMarkdownNode {\n  type?: string;\n  properties?: {\n    [key: string]: unknown; // 좀 더 일반적인 속성 타입\n    'data-action'?: string;\n    'data-feature-id'?: string;\n  };\n  children?: Array<CustomMarkdownNode | { value?: string }>; // 자식 노드는 재귀적이거나 텍스트 노드일 수 있음\n  value?: string; // 텍스트 노드의 경우\n}\n\ntype ButtonRendererProps = React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n> & {\n  node?: CustomMarkdownNode; // 수정된 타입 적용\n};\n\n// 견적서 컨테이너 스타일 - 견적서 전체를 감싸는 컨테이너\nconst StyledInvoiceContainer = styled.div`\n  margin-top: 1.5rem;\n  padding: 1rem;\n  border: 1px solid ${AppColors.aiBorder};\n  border-radius: 8px;\n  background-color: #1c1c25;\n  color: ${AppColors.onBackground};\n  font-size: 0.9rem;\n  max-width: 100%; // 컨테이너가 최대 너비를 사용하도록 설정\n  margin-right: 0; // 오른쪽 마진 제거\n`;\n\n// 견적서 프로젝트 제목 스타일\nconst InvoiceProjectTitle = styled.h3`\n  font-size: 1.3em;\n  color: ${AppColors.onBackground};\n  margin-bottom: 1em;\n`;\n\n// 견적서 테이블 스타일\nconst InvoiceTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 1rem;\n\n  th,\n  td {\n    border-bottom: 1px solid ${AppColors.aiBorder};\n\n    height: 4em;\n    text-align: left;\n    vertical-align: top;\n  }\n\n  th {\n    padding: 1em 1em;\n    font-weight: 600;\n    background-color: #2a2a3a;\n    color: ${AppColors.onPrimary};\n    white-space: nowrap;\n    &:nth-child(3) {\n      // \"세부 내용\" 헤더\n      text-align: center;\n    }\n  }\n\n  td {\n    padding: 2em 1em;\n    font-weight: 300;\n  }\n\n  // 각 열의 너비 및 스타일 지정\n  .col-category {\n    width: 18%;\n    text-align: center;\n    font-weight: 500;\n  }\n  .col-feature {\n    width: 25%;\n    text-align: center;\n    font-weight: 500;\n  }\n  .col-description {\n    width: 32%;\n    font-size: 0.9em;\n    line-height: 1.5;\n    vertical-align: middle;\n  }\n  .col-amount {\n    width: 15%;\n    text-align: center;\n    white-space: nowrap;\n  }\n  .col-actions {\n    width: 10%;\n    text-align: center;\n  }\n\n  // 마지막 행(합계) 스타일\n  tbody tr:last-child td {\n    border-bottom: none;\n    font-weight: bold;\n  }\n\n  .total-label {\n    text-align: right;\n    padding-right: 1em;\n  }\n`;\n\n// 액션 버튼 스타일 - 견적서 내 항목 삭제/취소 버튼\nconst ActionButton = styled.button`\n  background-color: ${AppColors.onBackgroundGray};\n  width: 100px;\n  color: #ffffff;\n  border: none;\n  padding: 0.4rem 0.8rem;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.8rem;\n  transition: background-color 0.2s;\n\n  @media (max-width: 750px) {\n    min-width: 70px;\n    width: 70px;\n  }\n\n  &:hover {\n    background-color: ${AppColors.primary};\n  }\n`;\n\n// 모바일 견적서 전체 컨테이너\nconst MobileInvoiceContainer = styled.div`\n  margin-top: 1rem;\n`;\n\n// 모바일 견적서 카드 아이템 스타일\nconst MobileInvoiceCardItem = styled.div`\n  background-color: #1e1e2d;\n  padding: 1rem;\n  border-radius: 6px;\n  margin-bottom: 1rem;\n  color: ${AppColors.onBackground};\n\n  .item-row {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 0.75rem;\n    font-size: 0.9em;\n\n    .label {\n      font-weight: 500;\n      color: ${AppColors.onSurfaceVariant};\n      margin-bottom: 0.25rem;\n    }\n    .value {\n      text-align: left;\n      word-break: break-word;\n    }\n    .deleted {\n      text-decoration: line-through;\n      color: ${AppColors.disabled};\n    }\n  }\n\n  .description-value {\n    text-align: left;\n    margin-bottom: 0.5rem;\n    font-size: 0.9em;\n    line-height: 1.5;\n    word-break: break-word;\n    p {\n      margin-bottom: 0.3em !important;\n      font-size: 1em !important;\n      font-weight: 300 !important;\n      line-height: 1.4 !important;\n    }\n    em {\n      font-size: 0.9em !important;\n      color: ${AppColors.onSurfaceVariant} !important;\n    }\n  }\n\n  .actions-row {\n    margin-top: 1rem;\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\n// PrintableInvoice를 위한 스타일 컴포넌트들\nconst PrintableInvoiceWrapper = styled.div`\n  width: 780px; /* A4 용지에서 양쪽 여백 고려한 너비 (대략) */\n  padding: 20px;\n  background-color: white;\n  color: black;\n  font-family: 'Helvetica', 'Arial', sans-serif;\n  box-sizing: border-box;\n  font-size: 9pt; /* 기본 폰트 크기 조정 */\n\n  h3 {\n    font-size: 1.5em;\n    color: #333333;\n    margin-bottom: 1.2em;\n    text-align: center;\n  }\n\n  .quotation-title {\n    font-size: 2em; /* 이미지와 유사한 크기로 조정 */\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 1.5em; /* 테이블과의 간격 조정 */\n    color: black;\n  }\n\n  table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 1rem;\n    font-size: 9pt; /* PDF용 폰트 크기 */\n\n    th,\n    td {\n      border: 1px solid #cccccc;\n      padding: 8px 10px;\n      text-align: left;\n      vertical-align: top;\n      word-break: break-word;\n    }\n\n    th {\n      background-color: #f0f0f0;\n      font-weight: bold;\n      color: #333333;\n      white-space: nowrap;\n    }\n\n    .col-category {\n      width: 18%;\n      text-align: center;\n    }\n    .col-feature {\n      width: 22%;\n      text-align: center;\n    }\n    .col-description {\n      width: 35%;\n      font-size: 8.5pt;\n      line-height: 1.4;\n      div p {\n        margin: 0 0 5px 0;\n        line-height: 1.4;\n      }\n      div em {\n        font-style: italic;\n        font-size: 0.95em;\n        color: #555;\n      }\n    }\n    .col-amount {\n      width: 25%;\n      text-align: right;\n      white-space: nowrap;\n    }\n\n    tbody tr:last-child td {\n      /* border-bottom: none; */ /* 마지막 줄 하단 테두리 유지 또는 필요시 제거 */\n    }\n    .total-label {\n      text-align: right;\n      font-weight: bold;\n      padding-right: 1em;\n    }\n    .total-amount strong {\n      font-weight: bold;\n    }\n  }\n`;\n\n// PDF용 금액 포맷 함수 (기존 formatAmount와 유사하나, hook 의존성 없이 사용)\nconst formatAmountForPdf = (\n  amount: number | string,\n  countryCodeFromUser: string,\n  forceDetailed: boolean = true\n) => {\n  if (typeof amount !== 'number') return amount;\n\n  const effectiveCountryCode = countryCodeFromUser || 'KR';\n\n  if (forceDetailed || effectiveCountryCode !== 'KR') {\n    const localCurrencyForPdf = getCountryCurrency(effectiveCountryCode);\n    const localSymbolForPdf = getCurrencySymbol(effectiveCountryCode);\n\n    let displaySymbol = currencySymbols.US;\n    let convertedAmountForDisplay = Math.round(\n      amount / (exchangeRates['USD'] || 1350)\n    );\n\n    if (effectiveCountryCode !== 'KR') {\n      displaySymbol = localSymbolForPdf;\n      if (exchangeRates[localCurrencyForPdf as keyof typeof exchangeRates]) {\n        convertedAmountForDisplay = Math.round(\n          amount /\n            exchangeRates[localCurrencyForPdf as keyof typeof exchangeRates]\n        );\n      } else if (localCurrencyForPdf === 'KRW') {\n        displaySymbol = currencySymbols.US; // Should be USD if localCurrency is KRW but not KR user\n        convertedAmountForDisplay = Math.round(\n          amount / (exchangeRates['USD'] || 1350)\n        );\n      }\n    }\n    return `${displaySymbol}${convertedAmountForDisplay.toLocaleString()} (₩${amount.toLocaleString()})`;\n  }\n  return `₩${amount.toLocaleString()}`;\n};\n\ninterface PrintableInvoiceProps {\n  invoiceData: InvoiceDataType;\n  invoiceDetailsForPdf: {\n    items: Array<\n      InvoiceDataType['invoiceGroup'][number]['items'][number] & {\n        isDeleted: boolean;\n      }\n    >;\n    currentTotal: number;\n    currentTotalDuration: number;\n    currentTotalPages: number;\n  };\n  t: ChatDictionary;\n  countryCode: string;\n  lang: string;\n}\n\nexport const PrintableInvoice: React.FC<PrintableInvoiceProps> = ({\n  invoiceData,\n  invoiceDetailsForPdf,\n  t,\n  countryCode,\n  lang,\n}) => {\n  const formatDate = (date: Date) => {\n    return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\n      2,\n      '0'\n    )}-${String(date.getDate()).padStart(2, '0')} ${String(\n      date.getHours()\n    ).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}:${String(\n      date.getSeconds()\n    ).padStart(2, '0')}`;\n  };\n  const currentDate = formatDate(new Date());\n  const user = useAuthStore((state) => state.user);\n\n  const userName = user?.name;\n  const userPhone = user?.cellphone;\n  const userEmail = user?.email;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const recipientName =\n    invoiceData.project || (t as any).recipientName || '역경매 플랫폼 개발';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const companyName = (t as any).companyName || '주식회사 여기닷';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const representativeName =\n    (t as any).representativeName || '강태원 82+031-8039-7981';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const companyAddress = `${\n    (t as any).companyAddressStreet ||\n    '경기도 성남시 수정구 대학판교로 815, 777호'\n  } (${(t as any).companyAddressDetail || '시흥동, 판교창조경제밸리'})`;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const companyPhone = (t as any).companyPhoneForPdf || '031-8039-7981';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const companyRegistrationNumber =\n    (t as any).companyRegistrationNumber || '289-86-03278';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const clientEmail = (t as any).clientEmailForPdf || 'ktw1318@naver.com';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const quoteItemName =\n    invoiceData.project || (t as any).defaultQuoteName || 'IoT 앱';\n  const totalAmountWithVatForPdf = formatAmountForPdf(28600000, 'KR');\n\n  const specialNotes = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    title: (t as any).remarksTitle || '비고란',\n    items: [\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      `${(t as any).inspectionPeriod || '검수기간'}: ${\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (t as any).inspectionPeriodValue ||\n        '개발 완료일 익일부터 1개월 (이후 요청 별도 협의 필요)'\n      }`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      `${(t as any).warrantyPeriod || '하자보수'}: ${\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (t as any).warrantyPeriodValue ||\n        '검수 종료일 익일부터 6개월 (기획과 디자인 변경 별도 협의 필요)'\n      }`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      `${(t as any).techStack || '자사 보유 기술스택'}: ${\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (t as any).techStackValue &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (t as any).techStackValue === 'object'\n          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (\n              (t as any).techStackValue as {\n                app: string;\n                web: string;\n                server: string;\n                db: string;\n              }\n            ).app +\n            ', ' +\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (\n              (t as any).techStackValue as {\n                app: string;\n                web: string;\n                server: string;\n                db: string;\n              }\n            ).web +\n            ', ' +\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (\n              (t as any).techStackValue as {\n                app: string;\n                web: string;\n                server: string;\n                db: string;\n              }\n            ).server +\n            ', ' +\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (\n              (t as any).techStackValue as {\n                app: string;\n                web: string;\n                server: string;\n                db: string;\n              }\n            ).db\n          : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          typeof (t as any).techStackValue === 'string'\n          ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (t as any).techStackValue\n          : '(앱)hybridapp, Flutter, webview, (웹)react.js, express.js, node.js, java spring boot, python (서버) 네이버 클라우드, 카페24클라우드, AWS등 DB: Mysql, Postgre, 몽고DB등'\n      }`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      `${(t as any).crossPlatform || '크로스 플랫폼 및 브라우징'}: ${\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (t as any).crossPlatformValue ||\n        '윈도우10 이상 및 맥 운영체제 / 갤럭시 및 아이폰 출시 5년 이하 기기 / 사파리, 크롬, 엣지 (이외의 브라우저는 대응하지 않음)'\n      }`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (t as any).legalNotice1 ||\n        `* 당 견적서는 단순 견적서가 아닌, 기능 기획이 포함된 (주)여기닷의 무형지식재산으로 견적서를 전달받은 사람이 견적을 조회하는 용도 외에 다른 용도로 사용할 수 없으며, 타인에게 당 견적서의 전체 또는 일부 내용을 구두나 파일 등으로 전달한 경우, 당사에서 주장하는 모든 민형사상의 책임과 배상에 대하여 동의하는 것으로 간주함. 만약 동의하지 않을 경우, 당 견적서는 조회 없이 파기해야 함*`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (t as any).validityNotice || `* 견적서는 작성일로부터 일주일간 유효함*`,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (t as any).additionalCostsNotice ||\n        `* 도메인(URL및SSL등)/서버비용/AOS 및 IOS 개발자 계정/알림 수단/유료API 등에 따라 발생하는 비용은 별도이며, 견적서에 포함되지 않은 기능은 추가 비용이 발생함*`,\n    ],\n    footerNotice:\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (t as any).aiDisclaimer ||\n      'AI 견적은 실제 계약 시 금액과 일부 상이할 수 있으며, 보다 정확한 견적은 담당자와의 최종 협의를 통해 확정됩니다.',\n  };\n\n  const stampImagePath = '/ai/stamp.png';\n\n  // 국제화 키 (임시값, aiChat.ts에 추가 필요)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const quotationTitle = (t as any).quotationTitle || '견적서';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const quoteDateLabel = (t as any).quoteDateLabel || '견적 발행일';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const clientNameLabel = (t as any).clientNameLabel || '고객명';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const clientEmailLabel = (t as any).clientEmailLabel || '메일주소';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const quoteNameLabel = (t as any).quoteNameLabel || '견적명';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const totalAmountLabel = (t as any).totalAmountLabel || '총 금액 (VAT포함)';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierNameLabel = (t as any).supplierNameLabel || '상호명';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierCeoLabel = (t as any).supplierCeoLabel || '대표명';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierBizNumLabel = (t as any).supplierBizNumLabel || '사업자번호';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierIndustryLabel = (t as any).supplierIndustryLabel || '업종·업태';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierAddressLabel = (t as any).supplierAddressLabel || '주소';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const supplierContactLabel = (t as any).supplierContactLabel || '대표 연락처';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const clientContactNumberLabel =\n    (t as any).clientContactNumberLabel || '고객 연락처';\n\n  const industryType = '응용소프트웨어 개발 및 공급업, 서비스업';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const basicSurveyTitle = (t as any).basicSurveyTitle || '기초 조사';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const basicSurveyContentPlaceholder =\n    (t as any).basicSurveyContentPlaceholder ||\n    '기초 조사 내용이 여기에 표시됩니다.';\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const quoteDetailsTitle = (t as any).quoteDetailsTitle || '견적 상세';\n\n  const baseCellStyle = {\n    padding: '6px 8px',\n    border: '1px solid #BFBFBF',\n    fontSize: '9pt',\n    verticalAlign: 'middle' as const,\n    height: '30px',\n  };\n\n  const headerCellStyle = {\n    ...baseCellStyle,\n    backgroundColor: '#F2F2F2',\n    fontWeight: 'bold',\n    textAlign: 'center' as const,\n  };\n\n  const valueCellStyle = {\n    ...baseCellStyle,\n    textAlign: 'left' as const,\n  };\n\n  const clientValueCellStyle = {\n    ...valueCellStyle,\n  };\n\n  const stampContainerStyle = {\n    position: 'relative' as const,\n    backgroundColor: '#ffffff',\n    background: 'white',\n    padding: 0,\n    margin: 0,\n    width: '100%',\n    height: '100%',\n  };\n\n  const stampImageStyle = {\n    position: 'absolute' as const,\n    right: '20px',\n    bottom: '40px',\n    width: '60px',\n    height: '60px',\n  };\n\n  return (\n    <PrintableInvoiceWrapper id=\"printable-invoice-content\">\n      <div\n        className=\"quotation-title\"\n        style={{\n          fontSize: '20pt',\n          fontWeight: 'bold',\n          textAlign: 'center',\n          marginBottom: '20px',\n        }}\n      >\n        {quotationTitle}\n      </div>\n\n      {/* 상단 정보 테이블 (통합) */}\n      <table\n        style={{\n          width: '100%',\n          borderCollapse: 'collapse',\n          marginBottom: '15px',\n        }}\n      >\n        <tbody>\n          {/* Row 1: 견적 발행일, 상호명 */}\n          <tr>\n            <td style={{ ...headerCellStyle, width: '15%' }}>\n              {quoteDateLabel}\n            </td>\n            <td style={{ ...valueCellStyle, width: '25%' }}>{currentDate}</td>\n            <td style={{ ...headerCellStyle, width: '15%' }}>\n              {supplierNameLabel}\n            </td>\n            <td style={{ ...valueCellStyle, width: '30%' }}>{companyName}</td>\n            <td\n              style={{ ...headerCellStyle, width: '15%', borderLeft: 'none' }}\n              rowSpan={5}\n            >\n              <div style={stampContainerStyle}>\n                <img src={stampImagePath} alt=\"직인\" style={stampImageStyle} />\n              </div>\n            </td>\n          </tr>\n          {/* Row 2: 고객명, 대표명 */}\n          <tr>\n            <td style={headerCellStyle}>{clientNameLabel}</td>\n            <td style={clientValueCellStyle}>\n              {userName || 'guest'} {userPhone ? ' 82+' : ''} {userPhone || ''}\n            </td>\n            <td style={headerCellStyle}>{supplierCeoLabel}</td>\n            <td style={valueCellStyle}>{representativeName}</td>\n          </tr>\n\n          {/* Row 3: 메일주소, 사업자번호 */}\n          <tr>\n            <td style={headerCellStyle}>{clientEmailLabel}</td>\n            <td style={valueCellStyle}>{userEmail || 'guest'}</td>\n            <td style={headerCellStyle}>{supplierBizNumLabel}</td>\n            <td style={valueCellStyle}>{companyRegistrationNumber}</td>\n          </tr>\n          {/* Row 4: 견적명, 업종·업태 */}\n          <tr>\n            <td style={headerCellStyle}>{quoteNameLabel}</td>\n            <td style={clientValueCellStyle}>{quoteItemName}</td>\n            <td style={headerCellStyle}>{supplierIndustryLabel}</td>\n            <td style={valueCellStyle}>{industryType}</td>\n          </tr>\n          {/* Row 5: 총 금액(VAT포함), 주소 */}\n          <tr>\n            <td style={{ ...headerCellStyle }}>{totalAmountLabel}</td>\n            <td style={{ ...valueCellStyle }}>{totalAmountWithVatForPdf}</td>\n            <td style={headerCellStyle}>{supplierAddressLabel}</td>\n            <td style={valueCellStyle}>{companyAddress}</td>\n          </tr>\n          <tr>\n            <td style={headerCellStyle}>{basicSurveyTitle}</td>\n            <td style={{ ...valueCellStyle }} colSpan={4}>\n              {basicSurveyContentPlaceholder}{' '}\n              {/* 실제 기초 조사 내용 연동 필요 */}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      {/* 견적 상세 섹션 */}\n      <div\n        style={{\n          fontSize: '12pt',\n          fontWeight: 'bold',\n          marginBottom: '5px',\n          marginTop: '50px',\n        }}\n      >\n        {quoteDetailsTitle}\n      </div>\n      <table\n        style={{ width: '100%', borderCollapse: 'collapse', marginTop: '0rem' }}\n      >\n        <thead>\n          <tr>\n            <th style={{ ...headerCellStyle, width: '20%' }}>\n              {t.tableHeaders.category}\n            </th>\n            <th style={{ ...headerCellStyle, width: '25%' }}>\n              {t.tableHeaders.item}\n            </th>\n            <th style={{ ...headerCellStyle, width: '35%' }}>\n              {t.tableHeaders.detail}\n            </th>\n            <th style={{ ...headerCellStyle, width: '20%' }}>\n              {t.tableHeaders.amount}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {invoiceData.invoiceGroup?.map((group) => {\n            const visibleItems = group.items.filter((item) => {\n              const currentItemDetails = invoiceDetailsForPdf.items.find(\n                (ci) => ci.id === item.id\n              );\n              return !(currentItemDetails && currentItemDetails.isDeleted);\n            });\n\n            if (visibleItems.length === 0) return null;\n\n            return visibleItems.map((item, visibleItemIndex) => (\n              <tr key={`pdf-item-${item.id}`}>\n                {visibleItemIndex === 0 && (\n                  <td\n                    style={{ ...valueCellStyle, textAlign: 'center' }}\n                    rowSpan={visibleItems.length || 1}\n                  >\n                    {group.category}\n                  </td>\n                )}\n                <td style={{ ...valueCellStyle, textAlign: 'center' }}>\n                  {item.feature}\n                </td>\n                <td style={valueCellStyle}>\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html:\n                        item.description?.replace(/\\n|\\r\\n|\\r/g, '<br />') ||\n                        '',\n                    }}\n                  />\n                  {item.note &&\n                    !/^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(item.note) && (\n                      <p\n                        style={{\n                          fontSize: '0.8em',\n                          color: '#555',\n                          marginTop: '5px',\n                        }}\n                      >\n                        <em>\n                          {(t.estimateInfo as any).note}: {item.note}\n                        </em>\n                      </p>\n                    )}\n                </td>\n                <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n                  {item.note &&\n                  /^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(item.note)\n                    ? item.note\n                    : formatAmountForPdf(item.amount)}\n                </td>\n              </tr>\n            ));\n          })}\n          <tr>\n            <td colSpan={3} style={{ ...headerCellStyle, textAlign: 'right' }}>\n              <strong>{t.estimateInfo.totalSum}</strong>\n            </td>\n            <td\n              style={{\n                ...valueCellStyle,\n                textAlign: 'right',\n              }}\n            >\n              <strong>\n                {invoiceData.total?.totalConvertedDisplay &&\n                typeof invoiceData.total.totalConvertedDisplay === 'string'\n                  ? invoiceData.total.totalConvertedDisplay\n                  : formatAmountForPdf(\n                      invoiceDetailsForPdf.currentTotal,\n                      countryCode\n                    )}\n              </strong>\n            </td>\n          </tr>\n          <tr>\n            <td colSpan={3} style={{ ...headerCellStyle, textAlign: 'right' }}>\n              <strong>{t.estimateInfo.vatIncluded}</strong>\n            </td>\n            <td\n              style={{\n                ...valueCellStyle,\n                textAlign: 'right',\n              }}\n            >\n              <strong>\n                {formatAmountForPdf(\n                  Math.round((invoiceDetailsForPdf.currentTotal || 0) * 1.1),\n                  countryCode\n                )}\n              </strong>\n            </td>\n          </tr>\n          {invoiceDetailsForPdf.currentTotalDuration > 0 && (\n            <tr>\n              <td\n                colSpan={3}\n                style={{ ...headerCellStyle, textAlign: 'right' }}\n              >\n                {t.estimateInfo.totalDuration}\n              </td>\n              <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n                {typeof invoiceDetailsForPdf.currentTotalDuration === 'number'\n                  ? `${Math.ceil(\n                      invoiceDetailsForPdf.currentTotalDuration / 5\n                    )} ${t.estimateInfo.week} (${\n                      lang === 'ko' ? '약 ' : ''\n                    }${Math.ceil(\n                      invoiceDetailsForPdf.currentTotalDuration / 20\n                    )} ${t.estimateInfo.monthUnit})`\n                  : `${invoiceDetailsForPdf.currentTotalDuration} ${t.estimateInfo.day}`}\n              </td>\n            </tr>\n          )}\n          {invoiceDetailsForPdf.currentTotalPages > 0 && (\n            <tr>\n              <td\n                colSpan={3}\n                style={{ ...headerCellStyle, textAlign: 'right' }}\n              >\n                {t.estimateInfo.totalPages}\n              </td>\n              <td style={{ ...valueCellStyle, textAlign: 'right' }}>\n                {invoiceDetailsForPdf.currentTotalPages} {t.estimateInfo.page}\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n      {/* 비고란 섹션 */}\n      <div\n        style={{\n          fontSize: '12pt',\n          fontWeight: 'bold',\n          marginBottom: '5px',\n          marginTop: '50px',\n          textAlign: 'left',\n        }}\n      >\n        {specialNotes.title}\n      </div>\n      <table\n        style={{\n          width: '100%',\n          borderCollapse: 'collapse',\n          marginTop: '0px',\n          fontSize: '8pt',\n        }}\n      >\n        <tbody>\n          <tr>\n            <td style={{ border: '1px solid #BFBFBF', padding: '0' }}>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <tbody>\n                  {specialNotes.items.map((note, index) => (\n                    <tr key={`note-${index}`}>\n                      <td\n                        style={{\n                          ...valueCellStyle,\n                          borderBottom:\n                            index === specialNotes.items.length - 1\n                              ? 'none'\n                              : '1px solid #E0E0E0',\n                          lineHeight: '1.4',\n                          textAlign: note.startsWith('*') ? 'center' : 'left',\n                          fontSize: note.startsWith('*') ? '7.5pt' : '8pt',\n                          color: note.startsWith('*') ? '#555555' : '#333333',\n                          padding: '6px 8px',\n                        }}\n                      >\n                        {note}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p\n        style={{\n          marginTop: '20px',\n          textAlign: 'center',\n          fontSize: '8pt',\n          color: '#555555',\n        }}\n      >\n        {specialNotes.footerNotice}\n      </p>\n    </PrintableInvoiceWrapper>\n  );\n};\n\n/**\n * AiChatMessage 컴포넌트 함수\n */\nexport function AiChatMessage({\n  sender,\n  text,\n  imageUrl,\n  fileType,\n  onActionClick,\n  invoiceData,\n  calculatedTotalAmount,\n  calculatedTotalDuration,\n  calculatedTotalPages,\n  currentItems,\n  lang,\n}: MessageProps) {\n  const isAiMessage = sender === 'ai';\n\n  const { lang: contextLang } = useLang();\n  const t =\n    aiChatDictionary[lang as keyof typeof aiChatDictionary] ||\n    aiChatDictionary.ko;\n\n  const user = useAuthStore((state) => state.user);\n  const countryCode = user?.countryCode || 'KR';\n\n  const [isMobileView, setIsMobileView] = useState(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobileView(window.innerWidth < 750);\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const formatAmountWithCurrency = useMemo(\n    () =>\n      (amount: number | string, forceDetailed: boolean = false) =>\n        formatAmount(amount, countryCode, forceDetailed),\n    [countryCode]\n  );\n\n  const customComponents: Options['components'] = {\n    button: ({ node, ...props }: ButtonRendererProps) => {\n      let action: string | undefined;\n      let featureId: string | undefined;\n      let buttonText: string = 'Button';\n\n      // 노드 데이터에서 액션 정보 추출\n      if (node && node.properties) {\n        action = node.properties['data-action'] as string | undefined;\n        featureId = node.properties['data-feature-id'] as string | undefined;\n      }\n      if (\n        node &&\n        node.children &&\n        node.children.length > 0 &&\n        (node.children[0] as CustomMarkdownNode).value\n      ) {\n        buttonText = (node.children[0] as CustomMarkdownNode).value || 'Button';\n      }\n\n      // 액션이 있는 경우 클릭 핸들러 연결\n      if (action) {\n        return (\n          <StyledActionButton\n            onClick={() => {\n              if (action && onActionClick) {\n                onActionClick(action, featureId ? { featureId } : undefined);\n              } else if (featureId && onActionClick) {\n                onActionClick('delete_feature', { featureId });\n              }\n            }}\n            {...props}\n          >\n            {buttonText}\n          </StyledActionButton>\n        );\n      }\n      return <StyledActionButton {...props}>{buttonText}</StyledActionButton>;\n    },\n  };\n\n  return (\n    <MessageWrapper $sender={sender}>\n      <MessageBox $sender={sender}>\n        {isAiMessage && (\n          <AiProfileHeader>\n            <ProfileImage src=\"/ai/pretty.png\" alt=\"AI 프로필\" />\n            <ProfileName>{t.profileName}</ProfileName>\n          </AiProfileHeader>\n        )}\n\n        <StyledMarkdownContainer>\n          <ReactMarkdown\n            remarkPlugins={[remarkGfm]}\n            rehypePlugins={[rehypeRaw]}\n            components={customComponents}\n          >\n            {text}\n          </ReactMarkdown>\n        </StyledMarkdownContainer>\n\n        {isAiMessage && invoiceData && (\n          <StyledInvoiceContainer>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginBottom: '1rem',\n              }}\n            >\n              <div>\n                <InvoiceProjectTitle>\n                  {invoiceData.project || t.invoiceTitle}\n                </InvoiceProjectTitle>\n              </div>\n            </div>\n\n            {isMobileView ? (\n              <MobileInvoiceContainer>\n                {invoiceData.invoiceGroup?.map((group) =>\n                  group.items?.map((item, itemIndex) => {\n                    const currentItemStatus = currentItems?.find(\n                      (ci) => ci.id === item.id\n                    );\n                    const isActuallyDeleted = currentItemStatus\n                      ? currentItemStatus.isDeleted\n                      : false;\n                    return (\n                      <MobileInvoiceCardItem\n                        key={item.id || `mobile-item-${itemIndex}`}\n                      >\n                        <div className=\"item-row\">\n                          <span className=\"label\">\n                            {t.tableHeaders.category}\n                          </span>\n                          <span\n                            className={`value ${\n                              isActuallyDeleted ? 'deleted' : ''\n                            }`}\n                          >\n                            {group.category}\n                          </span>\n                        </div>\n                        <div className=\"item-row\">\n                          <span className=\"label\">{t.tableHeaders.item}</span>\n                          <span\n                            className={`value ${\n                              isActuallyDeleted ? 'deleted' : ''\n                            }`}\n                          >\n                            {item.feature}\n                          </span>\n                        </div>\n                        <div className=\"item-row\">\n                          <span className=\"label\">{t.tableHeaders.detail}</span>\n                          <div\n                            className={`description-value value ${\n                              isActuallyDeleted ? 'deleted' : ''\n                            }`}\n                          >\n                            <ReactMarkdown\n                              remarkPlugins={[remarkGfm]}\n                              rehypePlugins={[rehypeRaw]}\n                            >\n                              {item.description}\n                            </ReactMarkdown>\n                            {item.note &&\n                              !/^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(\n                                item.note\n                              ) && (\n                                <p\n                                  style={{\n                                    fontSize: '0.9em',\n                                    color: AppColors.onSurfaceVariant,\n                                    marginTop: '0.3em',\n                                  }}\n                                >\n                                  <em>\n                                    {t.estimateInfo.note}: {item.note}\n                                  </em>\n                                </p>\n                              )}\n                          </div>\n                        </div>\n                        <div className=\"item-row\">\n                          <span className=\"label\">{t.tableHeaders.amount}</span>\n                          <span\n                            className={`value ${\n                              isActuallyDeleted ? 'deleted' : ''\n                            }`}\n                          >\n                            {item.note &&\n                            /^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(item.note)\n                              ? item.note\n                              : formatAmountWithCurrency(item.amount, true)}\n                          </span>\n                        </div>\n                        <div className=\"actions-row\">\n                          <ActionButton\n                            onClick={() =>\n                              onActionClick('delete_feature_json', {\n                                featureId: item.id,\n                              })\n                            }\n                          >\n                            {isActuallyDeleted\n                              ? t.buttons.cancel\n                              : t.buttons.delete}\n                          </ActionButton>\n                        </div>\n                      </MobileInvoiceCardItem>\n                    );\n                  })\n                )}\n                <MobileInvoiceCardItem\n                  style={{ marginTop: '2rem', backgroundColor: '#2a2a3a' }}\n                >\n                  <div className=\"item-row\">\n                    <span className=\"label\" style={{ fontWeight: 'bold' }}>\n                      {t.estimateInfo.totalSum}\n                    </span>\n                    <span className=\"value\" style={{ fontWeight: 'bold' }}>\n                      {invoiceData.total?.totalConvertedDisplay &&\n                      typeof invoiceData.total.totalConvertedDisplay ===\n                        'string'\n                        ? invoiceData.total.totalConvertedDisplay\n                        : calculatedTotalAmount !== undefined\n                        ? formatAmountWithCurrency(calculatedTotalAmount, true)\n                        : formatAmountWithCurrency(\n                            invoiceData.total?.amount,\n                            true\n                          )}\n                    </span>\n                  </div>\n                  <div className=\"item-row\">\n                    <span className=\"label\" style={{ fontWeight: 'bold' }}>\n                      {t.estimateInfo.vatIncluded}\n                    </span>\n                    <span className=\"value\" style={{ fontWeight: 'bold' }}>\n                      {invoiceData.total?.totalConvertedDisplay &&\n                      typeof invoiceData.total.totalConvertedDisplay ===\n                        'string'\n                        ? formatAmountWithCurrency(\n                            Math.round(\n                              (calculatedTotalAmount ||\n                                invoiceData.total?.amount ||\n                                0) * 1.1\n                            ),\n                            true\n                          )\n                        : calculatedTotalAmount !== undefined\n                        ? formatAmountWithCurrency(\n                            Math.round(calculatedTotalAmount * 1.1),\n                            true\n                          )\n                        : formatAmountWithCurrency(\n                            Math.round((invoiceData.total?.amount || 0) * 1.1),\n                            true\n                          )}\n                    </span>\n                  </div>\n                  {calculatedTotalDuration !== undefined && (\n                    <div className=\"item-row\">\n                      <span className=\"label\">\n                        {t.estimateInfo.totalDuration}\n                      </span>\n                      <span className=\"value\">\n                        {typeof calculatedTotalDuration === 'number'\n                          ? `${Math.ceil(calculatedTotalDuration / 5)} ${\n                              t.estimateInfo.week\n                            } (${lang === 'ko' ? '약 ' : ''}${Math.ceil(\n                              calculatedTotalDuration / 20\n                            )} ${t.estimateInfo.monthUnit})`\n                          : `${calculatedTotalDuration} ${t.estimateInfo.day}`}\n                      </span>\n                    </div>\n                  )}\n                  {calculatedTotalPages !== undefined && (\n                    <div className=\"item-row\">\n                      <span className=\"label\">{t.estimateInfo.totalPages}</span>\n                      <span className=\"value\">\n                        {calculatedTotalPages} {t.estimateInfo.page}\n                      </span>\n                    </div>\n                  )}\n                </MobileInvoiceCardItem>\n              </MobileInvoiceContainer>\n            ) : (\n              <InvoiceTable>\n                <thead>\n                  <tr>\n                    <th className=\"col-category\">{t.tableHeaders.category}</th>\n                    <th className=\"col-feature\">{t.tableHeaders.item}</th>\n                    <th className=\"col-description\">{t.tableHeaders.detail}</th>\n                    <th className=\"col-amount\">{t.tableHeaders.amount}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {invoiceData.invoiceGroup?.map((group) => (\n                    <React.Fragment key={`group-${group.category}`}>\n                      {group.items?.map((item, itemIndex) => {\n                        const currentItemStatus = currentItems?.find(\n                          (ci) => ci.id === item.id\n                        );\n                        const isActuallyDeleted = currentItemStatus\n                          ? currentItemStatus.isDeleted\n                          : false;\n\n                        return (\n                          <tr key={item.id || `feature-${itemIndex}`}>\n                            {itemIndex === 0 ? (\n                              <td\n                                className=\"col-category\"\n                                rowSpan={group.items.length || 1}\n                                style={{\n                                  textDecoration: isActuallyDeleted\n                                    ? 'line-through'\n                                    : 'none',\n                                  color: isActuallyDeleted\n                                    ? AppColors.disabled\n                                    : AppColors.onBackground,\n                                }}\n                              >\n                                {group.category}\n                              </td>\n                            ) : null}\n                            <td\n                              className=\"col-feature\"\n                              style={{\n                                textDecoration: isActuallyDeleted\n                                  ? 'line-through'\n                                  : 'none',\n                                color: isActuallyDeleted\n                                  ? AppColors.disabled\n                                  : AppColors.onBackground,\n                              }}\n                            >\n                              {item.feature}\n                            </td>\n                            <td\n                              className=\"col-description\"\n                              style={{\n                                textDecoration: isActuallyDeleted\n                                  ? 'line-through'\n                                  : 'none',\n                                color: isActuallyDeleted\n                                  ? AppColors.disabled\n                                  : AppColors.onBackground,\n                              }}\n                            >\n                              {item.description}\n                              {item.note &&\n                                !/^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(\n                                  item.note\n                                ) && (\n                                  <p\n                                    style={{\n                                      fontSize: '0.9em',\n                                      color: AppColors.onSurfaceVariant,\n                                      marginTop: '0.3em',\n                                    }}\n                                  >\n                                    <em>\n                                      {t.estimateInfo.note}: {item.note}\n                                    </em>\n                                  </p>\n                                )}\n                            </td>\n                            <td\n                              className=\"col-amount\"\n                              style={{\n                                textDecoration: isActuallyDeleted\n                                  ? 'line-through'\n                                  : 'none',\n                                color: isActuallyDeleted\n                                  ? AppColors.disabled\n                                  : AppColors.onBackground,\n                              }}\n                            >\n                              {item.note &&\n                              /^[A-Z]{3}\\s[\\d,.]+\\s\\(₩[\\d,.]+\\)$/.test(\n                                item.note\n                              )\n                                ? item.note\n                                : formatAmountWithCurrency(item.amount, true)}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </React.Fragment>\n                  ))}\n                  <tr>\n                    <td colSpan={3} className=\"total-label\">\n                      <strong>{t.estimateInfo.totalSum}</strong>\n                    </td>\n                    <td className=\"col-amount\">\n                      <strong>\n                        {invoiceData.total?.totalConvertedDisplay &&\n                        typeof invoiceData.total.totalConvertedDisplay ===\n                          'string'\n                          ? invoiceData.total.totalConvertedDisplay\n                          : calculatedTotalAmount !== undefined\n                          ? formatAmountWithCurrency(\n                              calculatedTotalAmount,\n                              true\n                            )\n                          : formatAmountWithCurrency(\n                              invoiceData.total?.amount,\n                              true\n                            )}\n                      </strong>\n                    </td>\n                    <td></td>\n                  </tr>\n                  <tr>\n                    <td colSpan={3} className=\"total-label\">\n                      <strong>{t.estimateInfo.vatIncluded}</strong>\n                    </td>\n                    <td className=\"col-amount\">\n                      <strong>\n                        {invoiceData.total?.totalConvertedDisplay &&\n                        typeof invoiceData.total.totalConvertedDisplay ===\n                          'string'\n                          ? formatAmountWithCurrency(\n                              Math.round(\n                                (calculatedTotalAmount ||\n                                  invoiceData.total?.amount ||\n                                  0) * 1.1\n                              ),\n                              true\n                            )\n                          : calculatedTotalAmount !== undefined\n                          ? formatAmountWithCurrency(\n                              Math.round(calculatedTotalAmount * 1.1),\n                              true\n                            )\n                          : formatAmountWithCurrency(\n                              Math.round(\n                                (invoiceData.total?.amount || 0) * 1.1\n                              ),\n                              true\n                            )}\n                      </strong>\n                    </td>\n                    <td></td>\n                  </tr>\n                  {calculatedTotalDuration !== undefined && (\n                    <tr>\n                      <td colSpan={3} className=\"total-label\">\n                        {t.estimateInfo.totalDuration}\n                      </td>\n                      <td className=\"col-amount\">\n                        {typeof calculatedTotalDuration === 'number'\n                          ? `${Math.ceil(calculatedTotalDuration / 5)} ${\n                              t.estimateInfo.week\n                            } (${lang === 'ko' ? '약 ' : ''}${Math.ceil(\n                              calculatedTotalDuration / 20\n                            )} ${t.estimateInfo.monthUnit})`\n                          : `${calculatedTotalDuration} ${t.estimateInfo.day}`}\n                      </td>\n                      <td></td>\n                    </tr>\n                  )}\n                  {calculatedTotalPages !== undefined && (\n                    <tr>\n                      <td colSpan={3} className=\"total-label\">\n                        {t.estimateInfo.totalPages}\n                      </td>\n                      <td className=\"col-amount\">\n                        {calculatedTotalPages} {t.estimateInfo.page}\n                      </td>\n                      <td></td>\n                    </tr>\n                  )}\n                </tbody>\n              </InvoiceTable>\n            )}\n\n            {/* 할인 및 PDF 저장 옵션 */}\n            <div\n              style={{\n                marginTop: '1.5rem',\n                paddingTop: '1rem',\n                borderTop: `1px solid ${AppColors.aiBorder}`,\n              }}\n            >\n              <h4 style={{ marginBottom: '0.75rem', fontSize: '1em' }}>\n                {t.discount.title}\n              </h4>\n              <p style={{ marginBottom: '0.5rem', fontSize: '0.9em' }}>\n                {t.discount.description}\n              </p>\n              <ul\n                style={{\n                  listStyle: 'none',\n                  paddingLeft: 0,\n                  marginBottom: '1rem',\n                  display: 'flex',\n                  flexDirection: 'column',\n                }}\n              >\n                {t.discount.options.map((optionText, index) => {\n                  let action = '';\n                  if (index === 0) {\n                    action = 'discount_extend_8w_20p';\n                  } else if (index === 1) {\n                    action = 'discount_remove_features_budget';\n                  } else if (index === 2) {\n                    action = 'discount_ai_suggestion';\n                  }\n\n                  let mainText = optionText;\n                  let subText = '';\n                  if (\n                    index === 2 &&\n                    optionText.includes('(') &&\n                    optionText.includes(')')\n                  ) {\n                    const match = optionText.match(/(.*)\\\\s*\\\\((.*)\\\\)/);\n                    if (match) {\n                      mainText = match[1].trim();\n                      subText = `(${match[2].trim()})`;\n                    }\n                  }\n\n                  return (\n                    <li\n                      key={index}\n                      style={{\n                        marginBottom: '0.5rem',\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                      }}\n                    >\n                      {index === 2 && subText ? (\n                        <span\n                          style={{ display: 'flex', flexDirection: 'column' }}\n                        >\n                          <span>{mainText}</span>\n                          <span\n                            style={{\n                              fontSize: '0.9em',\n                              color: AppColors.onSurfaceVariant,\n                            }}\n                          >\n                            {subText}\n                          </span>\n                        </span>\n                      ) : (\n                        <span>{optionText}</span>\n                      )}\n                      <ActionButton\n                        onClick={() => {\n                          console.log(\n                            `[AiChatMessage] ActionButton clicked. Action: ${action}, Index: ${index}`\n                          );\n                          onActionClick(action);\n                        }}\n                        style={{ marginLeft: '0.5rem' }}\n                      >\n                        {t.discount.optionsButtonTexts[index] ||\n                          t.buttons.select}\n                      </ActionButton>\n                    </li>\n                  );\n                })}\n              </ul>\n              <h4 style={{ marginBottom: '0.75rem', fontSize: '1em' }}>\n                {t.pdf.title}\n              </h4>\n              <ActionButton\n                onClick={() => onActionClick('download_pdf')}\n                style={{\n                  backgroundColor: '#2E7D32',\n                  width: '150px',\n                }}\n              >\n                {t.buttons.downloadPdf}\n              </ActionButton>\n            </div>\n          </StyledInvoiceContainer>\n        )}\n\n        {imageUrl && fileType && fileType.startsWith('image/') && (\n          <div\n            style={{\n              marginTop: '10px',\n              textAlign: sender === 'user' ? 'right' : 'left',\n            }}\n          >\n            <img\n              src={imageUrl}\n              alt=\"첨부 이미지\"\n              style={{\n                maxWidth: '300px',\n                maxHeight: '300px',\n                borderRadius: '8px',\n              }}\n            />\n          </div>\n        )}\n      </MessageBox>\n    </MessageWrapper>\n  );\n}"
        }
    ]
}