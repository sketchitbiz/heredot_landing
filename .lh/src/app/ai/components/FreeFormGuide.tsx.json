{
    "sourceFile": "src/app/ai/components/FreeFormGuide.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1747726164747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747793444724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n import React from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n+import useAiFlowStore from '@/store/aiFlowStore';\n+import { getStepData, ChatDictionary } from '../StepData';\n+import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -25,9 +28,8 @@\n \n   p {\n     margin-bottom: 1rem;\n     color: ${AppColors.onBackground};\n-    font-weight: 400;\n     font-weight: 300;\n   }\n \n   ul {\n@@ -63,8 +65,14 @@\n       margin-top: 0.25rem;\n       font-weight: 300;\n     }\n   }\n+\n+  .survey-section {\n+    margin-top: 1.5rem;\n+    padding-top: 1rem;\n+    border-top: 1px solid ${AppColors.aiBorderLight}; // 구분선 추가\n+  }\n `;\n \n const ProfileContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   display: flex;\n@@ -98,10 +106,28 @@\n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n }) => {\n-  const t = aiChatDictionary[lang];\n+  const tFromDictionary = aiChatDictionary[lang];\n+  const { t: translate } = useTranslation();\n+  const selections = useAiFlowStore((state) => state.selections);\n \n+  const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n+\n+  const selectionStrings = Object.entries(selections)\n+    .map(([stepId, selectedIds]) => {\n+      const step = stepData.find((s) => s.id === stepId);\n+      if (!step) return '';\n+      const labels = selectedIds\n+        .map((id) => step.options.find((opt) => opt.id === id)?.label)\n+        .filter((label): label is string => !!label);\n+      return labels.length > 0\n+        ? `${step.selectionTitle || stepId}: ${labels.join(', ')}`\n+        : '';\n+    })\n+    .filter(Boolean)\n+    .join(' / ');\n+\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n       <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n         <ProfileImage\n@@ -109,28 +135,44 @@\n           src=\"/ai/pretty.png\"\n           alt=\"AI 프로필\"\n         />\n         <ProfileName>\n-          <strong>{t.profileName}</strong>\n+          <strong>{tFromDictionary.profileName}</strong>\n         </ProfileName>\n       </ProfileContainer>\n \n       <div className=\"content\">\n-        <p>{t.fileSupport.title}</p>\n+        <p>{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n-            {t.fileSupport.url}\n+            {tFromDictionary.fileSupport.url}\n             <br />\n-            <span>&quot;{t.fileSupport.urlExample}&quot;</span>\n+            <span>&quot;{tFromDictionary.fileSupport.urlExample}&quot;</span>\n           </li>\n-          <li>{t.fileSupport.image}</li>\n+          <li>{tFromDictionary.fileSupport.image}</li>\n           <li>\n-            {t.fileSupport.pdf}\n+            {tFromDictionary.fileSupport.pdf}\n             <br />\n-            <span>{t.fileSupport.unsupported}</span>\n+            <span>{tFromDictionary.fileSupport.unsupported}</span>\n           </li>\n         </ul>\n-        <p>{t.fileSupport.message}</p>\n+        <p>{tFromDictionary.fileSupport.message}</p>\n+\n+        <div className=\"survey-section\">\n+          <p>\n+            <strong>\n+              {tFromDictionary.basicSurvey?.title ||\n+                (lang === 'ko' ? '기초 조사 내용' : 'Basic Survey Content')}\n+            </strong>\n+          </p>\n+          <p>\n+            {selectionStrings ||\n+              tFromDictionary.basicSurvey?.placeholder ||\n+              (lang === 'ko'\n+                ? '선택된 기초 조사 내용이 없습니다.'\n+                : 'No basic survey content selected.')}\n+          </p>\n+        </div>\n       </div>\n     </FreeFormGuideContainer>\n   );\n };\n"
                },
                {
                    "date": 1747793478583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n-import { getStepData, ChatDictionary } from '../StepData';\n+import { getStepData, ChatDictionary } from ''@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n"
                },
                {
                    "date": 1747793516441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n-import { getStepData, ChatDictionary } from ''@/app/ai/components/StepData';\n+import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n"
                },
                {
                    "date": 1747793954917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,83 +20,99 @@\n     props.$isNarrowScreen ? 'left' : 'left'}; // 항상 왼쪽 정렬\n   color: #9ca3af;\n   line-height: 1.6;\n \n-  .content {\n-    margin-top: ${(props) => (props.$isNarrowScreen ? '0.8rem' : '1.5rem')};\n-    padding-left: 0.5rem;\n+  .profile-section {\n+    margin-bottom: ${(props) => (props.$isNarrowScreen ? '1rem' : '1.5rem')};\n   }\n \n-  p {\n-    margin-bottom: 1rem;\n-    color: ${AppColors.onBackground};\n-    font-weight: 300;\n+  .conversational-intro {\n+    margin-bottom: 2rem;\n+    p {\n+      margin-bottom: 0.75rem;\n+      color: ${AppColors.onBackground};\n+      font-weight: 300;\n+    }\n+    ul {\n+      list-style: disc;\n+      padding-left: 20px;\n+      margin-bottom: 1rem;\n+      li {\n+        margin-bottom: 0.5rem;\n+        color: #ffffff;\n+        &::before {\n+          /* 기본 disc 스타일 사용을 위해 제거 또는 수정 */\n+          content: none;\n+        }\n+      }\n+    }\n   }\n \n-  ul {\n-    list-style: none;\n-    padding-left: 0;\n-    margin-bottom: 1.5rem;\n-    text-align: left; /* 항상 텍스트 왼쪽 정렬 */\n+  .content-title {\n+    font-weight: 400;\n+    color: ${AppColors.onBackground};\n+    margin-bottom: 0.75rem;\n+    font-size: 1.1em;\n   }\n \n-  li {\n-    margin-bottom: 0.75rem;\n-    color: #ffffff; /* 흰색으로 변경 */\n-    padding-left: 1.25rem;\n-    position: relative;\n-    font-weight: 400;\n-\n-    &::before {\n-      content: '•';\n-      position: absolute;\n-      left: 0;\n-      top: 0;\n-      color: ${AppColors.primary}; /* Bullet 색상 유지 */\n+  .file-support-content {\n+    padding-left: 0.5rem; /* 기존 content 클래스의 padding과 유사하게 */\n+    p {\n+      margin-bottom: 1rem;\n+      color: ${AppColors.onBackground};\n+      font-weight: 300;\n     }\n-\n-    strong {\n-      font-weight: 400;\n+    ul {\n+      list-style: none;\n+      padding-left: 0;\n+      margin-bottom: 1.5rem;\n+      text-align: left;\n     }\n+    li {\n+      margin-bottom: 0.75rem;\n+      color: #ffffff;\n+      padding-left: 1.25rem;\n+      position: relative;\n+      font-weight: 300; /* 일관성을 위해 300으로 */\n \n-    span {\n-      color: ${AppColors.onPrimaryGray};\n-      display: block;\n-      margin-left: 0.5rem;\n-      margin-top: 0.25rem;\n-      font-weight: 300;\n+      &::before {\n+        content: '•';\n+        position: absolute;\n+        left: 0;\n+        top: 0;\n+        color: ${AppColors.primary};\n+      }\n+      span {\n+        color: ${AppColors.onPrimaryGray};\n+        display: block;\n+        margin-left: 0.5rem;\n+        margin-top: 0.25rem;\n+        font-weight: 300;\n+      }\n     }\n   }\n-\n-  .survey-section {\n-    margin-top: 1.5rem;\n-    padding-top: 1rem;\n-    border-top: 1px solid ${AppColors.aiBorderLight}; // 구분선 추가\n-  }\n `;\n \n const ProfileContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   display: flex;\n   align-items: center;\n-  margin-bottom: ${(props) => (props.$isNarrowScreen ? '1rem' : '0')};\n   width: ${(props) => (props.$isNarrowScreen ? '100%' : 'auto')};\n-  justify-content: flex-start; // 항상 왼쪽 정렬\n+  justify-content: flex-start;\n `;\n \n const ProfileImage = styled.img<{ $isNarrowScreen?: boolean }>`\n   height: 2.5rem;\n   width: 2.5rem;\n   border-radius: 50%;\n   object-fit: cover;\n-  margin-right: 1rem; /* 항상 오른쪽 여백 유지 */\n+  margin-right: 1rem;\n `;\n \n const ProfileName = styled.p`\n   font-size: 20px;\n   color: ${AppColors.onBackground};\n   font-weight: bold;\n-  margin: 0; /* 마진 제거 */\n-  margin-top: 16px;\n+  margin: 0;\n `;\n \n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n@@ -109,9 +125,8 @@\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n-\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n@@ -119,30 +134,98 @@\n       if (!step) return '';\n       const labels = selectedIds\n         .map((id) => step.options.find((opt) => opt.id === id)?.label)\n         .filter((label): label is string => !!label);\n-      return labels.length > 0\n-        ? `${step.selectionTitle || stepId}: ${labels.join(', ')}`\n-        : '';\n+      return labels.length > 0 ? labels.join(', ') : '';\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n+  const guideText = tFromDictionary.freeFormGuide || {\n+    greeting:\n+      lang === 'ko'\n+        ? '안녕하세요! {profileName}입니다.'\n+        : \"Hello! I'm {profileName}.\",\n+    acknowledgmentCore:\n+      lang === 'ko'\n+        ? '{selections} 프로젝트에 관심을 가져주셔서 감사합니다.'\n+        : 'Thank you for your interest in the {selections} project.',\n+    transitionToQuestions:\n+      lang === 'ko'\n+        ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n+        : 'May I ask a few more questions first?',\n+    followUpQuestions:\n+      lang === 'ko'\n+        ? [\n+            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n+            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n+            '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n+            'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n+            '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n+          ]\n+        : [\n+            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n+            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n+            'Main Content: What are the main products or services for the platform you are envisioning?',\n+            \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n+            'Essential Features: Please tell us if there are any essential features for this platform.',\n+          ],\n+    closing:\n+      lang === 'ko'\n+        ? '그럼, 답변을 기다리겠습니다!'\n+        : 'I look forward to your answers!',\n+    defaultIntro:\n+      lang === 'ko'\n+        ? '어떤 프로젝트를 구상 중이신가요? 자세히 알려주시면 맞춤형 제안을 드리는 데 도움이 됩니다.'\n+        : 'What project are you envisioning? Telling me more will help me make personalized suggestions.',\n+  };\n+\n+  const greeting = guideText.greeting.replace(\n+    '{profileName}',\n+    tFromDictionary.profileName\n+  );\n+  const acknowledgment = guideText.acknowledgmentCore.replace(\n+    '{selections}',\n+    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n+  );\n+\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n-      <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n-        <ProfileImage\n-          $isNarrowScreen={isNarrowScreen}\n-          src=\"/ai/pretty.png\"\n-          alt=\"AI 프로필\"\n-        />\n-        <ProfileName>\n-          <strong>{tFromDictionary.profileName}</strong>\n-        </ProfileName>\n-      </ProfileContainer>\n+      <div className=\"profile-section\">\n+        <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n+          <ProfileImage\n+            $isNarrowScreen={isNarrowScreen}\n+            src=\"/ai/pretty.png\"\n+            alt=\"AI 프로필\"\n+          />\n+          <ProfileName>\n+            <strong>{tFromDictionary.profileName}</strong>\n+          </ProfileName>\n+        </ProfileContainer>\n+      </div>\n \n-      <div className=\"content\">\n-        <p>{tFromDictionary.fileSupport.title}</p>\n+      <div className=\"conversational-intro\">\n+        <p>{greeting}</p>\n+        {selectionStrings ? (\n+          <p>{acknowledgment}</p>\n+        ) : (\n+          <p>{guideText.defaultIntro}</p>\n+        )}\n+        {selectionStrings && (\n+          <>\n+            <p>{guideText.transitionToQuestions}</p>\n+            <ul>\n+              {guideText.followUpQuestions.map((question, index) => (\n+                <li key={index}>{question}</li>\n+              ))}\n+            </ul>\n+            <p>{guideText.closing}</p>\n+          </>\n+        )}\n+      </div>\n+\n+      <div className=\"file-support-content\">\n+        <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n             {tFromDictionary.fileSupport.url}\n             <br />\n@@ -155,24 +238,8 @@\n             <span>{tFromDictionary.fileSupport.unsupported}</span>\n           </li>\n         </ul>\n         <p>{tFromDictionary.fileSupport.message}</p>\n-\n-        <div className=\"survey-section\">\n-          <p>\n-            <strong>\n-              {tFromDictionary.basicSurvey?.title ||\n-                (lang === 'ko' ? '기초 조사 내용' : 'Basic Survey Content')}\n-            </strong>\n-          </p>\n-          <p>\n-            {selectionStrings ||\n-              tFromDictionary.basicSurvey?.placeholder ||\n-              (lang === 'ko'\n-                ? '선택된 기초 조사 내용이 없습니다.'\n-                : 'No basic survey content selected.')}\n-          </p>\n-        </div>\n       </div>\n     </FreeFormGuideContainer>\n   );\n };\n"
                },
                {
                    "date": 1747794629018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n         ? '안녕하세요! {profileName}입니다.'\n         : \"Hello! I'm {profileName}.\",\n     acknowledgmentCore:\n       lang === 'ko'\n-        ? '{selections} 프로젝트에 관심을 가져주셔서 감사합니다.'\n+        ? '{selections} 프로젝트에 견적 요청 주셔서 감사합니다.'\n         : 'Thank you for your interest in the {selections} project.',\n     transitionToQuestions:\n       lang === 'ko'\n         ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n"
                },
                {
                    "date": 1747794882881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,10 +146,10 @@\n         ? '안녕하세요! {profileName}입니다.'\n         : \"Hello! I'm {profileName}.\",\n     acknowledgmentCore:\n       lang === 'ko'\n-        ? '{selections} 프로젝트에 견적 요청 주셔서 감사합니다.'\n-        : 'Thank you for your interest in the {selections} project.',\n+        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n+        : 'Thank you for requesting a quote for the {selections} project.',\n     transitionToQuestions:\n       lang === 'ko'\n         ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n         : 'May I ask a few more questions first?',\n"
                },
                {
                    "date": 1747796207731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n 'use client';\n \n-import React from 'react';\n+import React, { useEffect, useState } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n-import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n@@ -46,8 +45,14 @@\n       }\n     }\n   }\n \n+  .loading-message {\n+    padding: 20px;\n+    text-align: center;\n+    color: ${AppColors.onSurfaceVariant};\n+  }\n+\n   .content-title {\n     font-weight: 400;\n     color: ${AppColors.onBackground};\n     margin-bottom: 0.75rem;\n@@ -113,82 +118,80 @@\n   font-weight: bold;\n   margin: 0;\n `;\n \n+interface AiGeneratedGuide {\n+  profileName: string;\n+  greeting: string;\n+  acknowledgment?: string; // 선택 사항으로 변경 (AI가 selections 없을 때 안 보낼 수 있음)\n+  transitionToQuestions?: string;\n+  followUpQuestions?: string[];\n+  closing?: string;\n+  defaultIntro?: string; // AI가 selections 없을 때 보낼 메시지\n+}\n+\n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n+  // AI 응답을 받을 함수 (AiPageContent에서 구현하여 전달)\n+  getInitialGuideMessage: () => Promise<AiGeneratedGuide | null>;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n+  getInitialGuideMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n-  const selections = useAiFlowStore((state) => state.selections);\n-  const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n+  const [aiGuide, setAiGuide] = useState<AiGeneratedGuide | null>(null);\n+  const [isLoading, setIsLoading] = useState(true);\n \n-  const selectionStrings = Object.entries(selections)\n-    .map(([stepId, selectedIds]) => {\n-      const step = stepData.find((s) => s.id === stepId);\n-      if (!step) return '';\n-      const labels = selectedIds\n-        .map((id) => step.options.find((opt) => opt.id === id)?.label)\n-        .filter((label): label is string => !!label);\n-      return labels.length > 0 ? labels.join(', ') : '';\n-    })\n-    .filter(Boolean)\n-    .join(' / ');\n+  useEffect(() => {\n+    const fetchGuide = async () => {\n+      setIsLoading(true);\n+      const guideMessage = await getInitialGuideMessage();\n+      setAiGuide(guideMessage);\n+      setIsLoading(false);\n+    };\n+    fetchGuide();\n+  }, [getInitialGuideMessage]);\n \n-  const guideText = tFromDictionary.freeFormGuide || {\n-    greeting:\n-      lang === 'ko'\n-        ? '안녕하세요! {profileName}입니다.'\n-        : \"Hello! I'm {profileName}.\",\n-    acknowledgmentCore:\n-      lang === 'ko'\n-        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n-        : 'Thank you for requesting a quote for the {selections} project.',\n-    transitionToQuestions:\n-      lang === 'ko'\n-        ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n-        : 'May I ask a few more questions first?',\n-    followUpQuestions:\n-      lang === 'ko'\n-        ? [\n-            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n-            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n-            '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n-            'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n-            '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n-          ]\n-        : [\n-            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n-            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n-            'Main Content: What are the main products or services for the platform you are envisioning?',\n-            \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n-            'Essential Features: Please tell us if there are any essential features for this platform.',\n-          ],\n-    closing:\n-      lang === 'ko'\n-        ? '그럼, 답변을 기다리겠습니다!'\n-        : 'I look forward to your answers!',\n-    defaultIntro:\n-      lang === 'ko'\n-        ? '어떤 프로젝트를 구상 중이신가요? 자세히 알려주시면 맞춤형 제안을 드리는 데 도움이 됩니다.'\n-        : 'What project are you envisioning? Telling me more will help me make personalized suggestions.',\n-  };\n+  if (isLoading) {\n+    return (\n+      <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n+        <div className=\"loading-message\">\n+          {lang === 'ko'\n+            ? 'AI 가이드 메시지를 불러오는 중입니다...'\n+            : 'Loading AI guide message...'}\n+        </div>\n+      </FreeFormGuideContainer>\n+    );\n+  }\n \n-  const greeting = guideText.greeting.replace(\n-    '{profileName}',\n-    tFromDictionary.profileName\n-  );\n-  const acknowledgment = guideText.acknowledgmentCore.replace(\n-    '{selections}',\n-    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n-  );\n+  if (!aiGuide) {\n+    return (\n+      <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n+        <div className=\"loading-message\">\n+          {lang === 'ko'\n+            ? 'AI 가이드 메시지를 가져오지 못했습니다.'\n+            : 'Failed to load AI guide message.'}\n+        </div>\n+      </FreeFormGuideContainer>\n+    );\n+  }\n \n+  // AI로부터 받은 데이터를 사용\n+  const {\n+    profileName,\n+    greeting,\n+    acknowledgment,\n+    transitionToQuestions,\n+    followUpQuestions,\n+    closing,\n+    defaultIntro,\n+  } = aiGuide;\n+\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n       <div className=\"profile-section\">\n         <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n@@ -197,31 +200,30 @@\n             src=\"/ai/pretty.png\"\n             alt=\"AI 프로필\"\n           />\n           <ProfileName>\n-            <strong>{tFromDictionary.profileName}</strong>\n+            <strong>{profileName || tFromDictionary.profileName}</strong>\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n       <div className=\"conversational-intro\">\n         <p>{greeting}</p>\n-        {selectionStrings ? (\n-          <p>{acknowledgment}</p>\n-        ) : (\n-          <p>{guideText.defaultIntro}</p>\n-        )}\n-        {selectionStrings && (\n-          <>\n-            <p>{guideText.transitionToQuestions}</p>\n-            <ul>\n-              {guideText.followUpQuestions.map((question, index) => (\n-                <li key={index}>{question}</li>\n-              ))}\n-            </ul>\n-            <p>{guideText.closing}</p>\n-          </>\n-        )}\n+        {acknowledgment ? <p>{acknowledgment}</p> : <p>{defaultIntro}</p>}\n+        {acknowledgment &&\n+          transitionToQuestions &&\n+          followUpQuestions &&\n+          closing && (\n+            <>\n+              <p>{transitionToQuestions}</p>\n+              <ul>\n+                {followUpQuestions.map((question, index) => (\n+                  <li key={index}>{question}</li>\n+                ))}\n+              </ul>\n+              <p>{closing}</p>\n+            </>\n+          )}\n       </div>\n \n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n"
                },
                {
                    "date": 1747798549401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n 'use client';\n \n-import React, { useEffect, useState } from 'react';\n+import React from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n+import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n@@ -45,14 +46,8 @@\n       }\n     }\n   }\n \n-  .loading-message {\n-    padding: 20px;\n-    text-align: center;\n-    color: ${AppColors.onSurfaceVariant};\n-  }\n-\n   .content-title {\n     font-weight: 400;\n     color: ${AppColors.onBackground};\n     margin-bottom: 0.75rem;\n@@ -118,80 +113,82 @@\n   font-weight: bold;\n   margin: 0;\n `;\n \n-interface AiGeneratedGuide {\n-  profileName: string;\n-  greeting: string;\n-  acknowledgment?: string; // 선택 사항으로 변경 (AI가 selections 없을 때 안 보낼 수 있음)\n-  transitionToQuestions?: string;\n-  followUpQuestions?: string[];\n-  closing?: string;\n-  defaultIntro?: string; // AI가 selections 없을 때 보낼 메시지\n-}\n-\n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n-  // AI 응답을 받을 함수 (AiPageContent에서 구현하여 전달)\n-  getInitialGuideMessage: () => Promise<AiGeneratedGuide | null>;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n-  getInitialGuideMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n-  const [aiGuide, setAiGuide] = useState<AiGeneratedGuide | null>(null);\n-  const [isLoading, setIsLoading] = useState(true);\n+  const selections = useAiFlowStore((state) => state.selections);\n+  const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n-  useEffect(() => {\n-    const fetchGuide = async () => {\n-      setIsLoading(true);\n-      const guideMessage = await getInitialGuideMessage();\n-      setAiGuide(guideMessage);\n-      setIsLoading(false);\n-    };\n-    fetchGuide();\n-  }, [getInitialGuideMessage]);\n+  const selectionStrings = Object.entries(selections)\n+    .map(([stepId, selectedIds]) => {\n+      const step = stepData.find((s) => s.id === stepId);\n+      if (!step) return '';\n+      const labels = selectedIds\n+        .map((id) => step.options.find((opt) => opt.id === id)?.label)\n+        .filter((label): label is string => !!label);\n+      return labels.length > 0 ? labels.join(', ') : '';\n+    })\n+    .filter(Boolean)\n+    .join(' / ');\n \n-  if (isLoading) {\n-    return (\n-      <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n-        <div className=\"loading-message\">\n-          {lang === 'ko'\n-            ? 'AI 가이드 메시지를 불러오는 중입니다...'\n-            : 'Loading AI guide message...'}\n-        </div>\n-      </FreeFormGuideContainer>\n-    );\n-  }\n+  const guideText = tFromDictionary.freeFormGuide || {\n+    greeting:\n+      lang === 'ko'\n+        ? '안녕하세요! {profileName}입니다.'\n+        : \"Hello! I'm {profileName}.\",\n+    acknowledgmentCore:\n+      lang === 'ko'\n+        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n+        : 'Thank you for requesting a quote for the {selections} project.',\n+    transitionToQuestions:\n+      lang === 'ko'\n+        ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n+        : 'May I ask a few more questions first?',\n+    followUpQuestions:\n+      lang === 'ko'\n+        ? [\n+            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n+            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n+            '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n+            'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n+            '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n+          ]\n+        : [\n+            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n+            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n+            'Main Content: What are the main products or services for the platform you are envisioning?',\n+            \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n+            'Essential Features: Please tell us if there are any essential features for this platform.',\n+          ],\n+    closing:\n+      lang === 'ko'\n+        ? '그럼, 답변을 기다리겠습니다!'\n+        : 'I look forward to your answers!',\n+    defaultIntro:\n+      lang === 'ko'\n+        ? '어떤 프로젝트를 구상 중이신가요? 자세히 알려주시면 맞춤형 제안을 드리는 데 도움이 됩니다.'\n+        : 'What project are you envisioning? Telling me more will help me make personalized suggestions.',\n+  };\n \n-  if (!aiGuide) {\n-    return (\n-      <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n-        <div className=\"loading-message\">\n-          {lang === 'ko'\n-            ? 'AI 가이드 메시지를 가져오지 못했습니다.'\n-            : 'Failed to load AI guide message.'}\n-        </div>\n-      </FreeFormGuideContainer>\n-    );\n-  }\n+  const greeting = guideText.greeting.replace(\n+    '{profileName}',\n+    tFromDictionary.profileName\n+  );\n+  const acknowledgment = guideText.acknowledgmentCore.replace(\n+    '{selections}',\n+    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n+  );\n \n-  // AI로부터 받은 데이터를 사용\n-  const {\n-    profileName,\n-    greeting,\n-    acknowledgment,\n-    transitionToQuestions,\n-    followUpQuestions,\n-    closing,\n-    defaultIntro,\n-  } = aiGuide;\n-\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n       <div className=\"profile-section\">\n         <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n@@ -200,30 +197,31 @@\n             src=\"/ai/pretty.png\"\n             alt=\"AI 프로필\"\n           />\n           <ProfileName>\n-            <strong>{profileName || tFromDictionary.profileName}</strong>\n+            <strong>{tFromDictionary.profileName}</strong>\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n       <div className=\"conversational-intro\">\n         <p>{greeting}</p>\n-        {acknowledgment ? <p>{acknowledgment}</p> : <p>{defaultIntro}</p>}\n-        {acknowledgment &&\n-          transitionToQuestions &&\n-          followUpQuestions &&\n-          closing && (\n-            <>\n-              <p>{transitionToQuestions}</p>\n-              <ul>\n-                {followUpQuestions.map((question, index) => (\n-                  <li key={index}>{question}</li>\n-                ))}\n-              </ul>\n-              <p>{closing}</p>\n-            </>\n-          )}\n+        {selectionStrings ? (\n+          <p>{acknowledgment}</p>\n+        ) : (\n+          <p>{guideText.defaultIntro}</p>\n+        )}\n+        {selectionStrings && (\n+          <>\n+            <p>{guideText.transitionToQuestions}</p>\n+            <ul>\n+              {guideText.followUpQuestions.map((question, index) => (\n+                <li key={index}>{question}</li>\n+              ))}\n+            </ul>\n+            <p>{guideText.closing}</p>\n+          </>\n+        )}\n       </div>\n \n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n"
                },
                {
                    "date": 1747798749633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n 'use client';\n \n-import React from 'react';\n+import React, { useState, useEffect, useCallback } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n-import { useTranslation } from 'react-i18next';\n+import AnimatedLoader from './AnimatedLoader';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -91,8 +91,65 @@\n     }\n   }\n `;\n \n+const FileSupportSection = styled.div`\n+  padding-left: 0.5rem;\n+  margin-bottom: 2rem;\n+  p {\n+    margin-bottom: 1rem;\n+    color: ${AppColors.onBackground};\n+    font-weight: 300;\n+  }\n+  .content-title {\n+    font-weight: 400;\n+    color: ${AppColors.onBackground};\n+    margin-bottom: 0.75rem;\n+    font-size: 1.1em;\n+  }\n+  ul {\n+    list-style: none;\n+    padding-left: 0;\n+    margin-bottom: 1.5rem;\n+    text-align: left;\n+  }\n+  li {\n+    margin-bottom: 0.75rem;\n+    color: #ffffff;\n+    padding-left: 1.25rem;\n+    position: relative;\n+    font-weight: 300;\n+    &::before {\n+      content: '•';\n+      position: absolute;\n+      left: 0;\n+      top: 0;\n+      color: ${AppColors.primary};\n+    }\n+    span {\n+      color: ${AppColors.onPrimaryGray};\n+      display: block;\n+      margin-left: 0.5rem;\n+      margin-top: 0.25rem;\n+      font-weight: 300;\n+    }\n+  }\n+`;\n+\n+const AiMessageSection = styled.div`\n+  .profile-section {\n+    margin-bottom: 1rem;\n+  }\n+  .conversational-intro {\n+    p {\n+      margin-bottom: 0.75rem;\n+      color: ${AppColors.onBackground};\n+      font-weight: 300;\n+      white-space: pre-wrap;\n+    }\n+  }\n+`;\n+\n const ProfileContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   display: flex;\n   align-items: center;\n   width: ${(props) => (props.$isNarrowScreen ? '100%' : 'auto')};\n@@ -116,16 +173,21 @@\n \n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n+  sendInitialMessageToAI: (prompt: string, selections?: string) => void;\n+  aiWelcomeMessage: string | null;\n+  isLoadingAiMessage: boolean;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n+  sendInitialMessageToAI,\n+  aiWelcomeMessage,\n+  isLoadingAiMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n-  const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n   const selectionStrings = Object.entries(selections)\n@@ -139,92 +201,26 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n-  const guideText = tFromDictionary.freeFormGuide || {\n-    greeting:\n-      lang === 'ko'\n-        ? '안녕하세요! {profileName}입니다.'\n-        : \"Hello! I'm {profileName}.\",\n-    acknowledgmentCore:\n-      lang === 'ko'\n-        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n-        : 'Thank you for requesting a quote for the {selections} project.',\n-    transitionToQuestions:\n-      lang === 'ko'\n-        ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n-        : 'May I ask a few more questions first?',\n-    followUpQuestions:\n-      lang === 'ko'\n-        ? [\n-            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n-            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n-            '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n-            'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n-            '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n-          ]\n-        : [\n-            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n-            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n-            'Main Content: What are the main products or services for the platform you are envisioning?',\n-            \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n-            'Essential Features: Please tell us if there are any essential features for this platform.',\n-          ],\n-    closing:\n-      lang === 'ko'\n-        ? '그럼, 답변을 기다리겠습니다!'\n-        : 'I look forward to your answers!',\n-    defaultIntro:\n-      lang === 'ko'\n-        ? '어떤 프로젝트를 구상 중이신가요? 자세히 알려주시면 맞춤형 제안을 드리는 데 도움이 됩니다.'\n-        : 'What project are you envisioning? Telling me more will help me make personalized suggestions.',\n-  };\n+  useEffect(() => {\n+    const timer = setTimeout(() => {\n+      if (!aiWelcomeMessage && !isLoadingAiMessage) {\n+        const initialPrompt = 'AI_WELCOME_GUIDE_PROMPT';\n+        sendInitialMessageToAI(initialPrompt, selectionStrings);\n+      }\n+    }, 1000);\n+    return () => clearTimeout(timer);\n+  }, [\n+    sendInitialMessageToAI,\n+    selectionStrings,\n+    aiWelcomeMessage,\n+    isLoadingAiMessage,\n+  ]);\n \n-  const greeting = guideText.greeting.replace(\n-    '{profileName}',\n-    tFromDictionary.profileName\n-  );\n-  const acknowledgment = guideText.acknowledgmentCore.replace(\n-    '{selections}',\n-    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n-  );\n-\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n-      <div className=\"profile-section\">\n-        <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n-          <ProfileImage\n-            $isNarrowScreen={isNarrowScreen}\n-            src=\"/ai/pretty.png\"\n-            alt=\"AI 프로필\"\n-          />\n-          <ProfileName>\n-            <strong>{tFromDictionary.profileName}</strong>\n-          </ProfileName>\n-        </ProfileContainer>\n-      </div>\n-\n-      <div className=\"conversational-intro\">\n-        <p>{greeting}</p>\n-        {selectionStrings ? (\n-          <p>{acknowledgment}</p>\n-        ) : (\n-          <p>{guideText.defaultIntro}</p>\n-        )}\n-        {selectionStrings && (\n-          <>\n-            <p>{guideText.transitionToQuestions}</p>\n-            <ul>\n-              {guideText.followUpQuestions.map((question, index) => (\n-                <li key={index}>{question}</li>\n-              ))}\n-            </ul>\n-            <p>{guideText.closing}</p>\n-          </>\n-        )}\n-      </div>\n-\n-      <div className=\"file-support-content\">\n+      <FileSupportSection>\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n             {tFromDictionary.fileSupport.url}\n@@ -238,9 +234,35 @@\n             <span>{tFromDictionary.fileSupport.unsupported}</span>\n           </li>\n         </ul>\n         <p>{tFromDictionary.fileSupport.message}</p>\n-      </div>\n+      </FileSupportSection>\n+\n+      <AiMessageSection>\n+        {isLoadingAiMessage && <AnimatedLoader />}\n+        {!isLoadingAiMessage && aiWelcomeMessage && (\n+          <>\n+            <div className=\"profile-section\">\n+              <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n+                <ProfileImage\n+                  $isNarrowScreen={isNarrowScreen}\n+                  src=\"/ai/pretty.png\"\n+                  alt=\"AI 프로필\"\n+                />\n+                <ProfileName>\n+                  <strong>{tFromDictionary.profileName}</strong>\n+                </ProfileName>\n+              </ProfileContainer>\n+            </div>\n+            <div className=\"conversational-intro\">\n+              <p>{aiWelcomeMessage}</p>\n+            </div>\n+          </>\n+        )}\n+        {!isLoadingAiMessage && !aiWelcomeMessage && (\n+          <div style={{ minHeight: '100px' }}></div>\n+        )}\n+      </AiMessageSection>\n     </FreeFormGuideContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1747798797641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useState, useEffect, useCallback } from 'react';\n+import React, { useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n@@ -187,9 +187,9 @@\n   isLoadingAiMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const selections = useAiFlowStore((state) => state.selections);\n-  const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n+  const stepData = getStepData(tFromDictionary as unknown as ChatDictionary);\n \n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n"
                },
                {
                    "date": 1747798978522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n 'use client';\n \n-import React, { useEffect } from 'react';\n+import React from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n-import AnimatedLoader from './AnimatedLoader';\n+import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -91,65 +91,8 @@\n     }\n   }\n `;\n \n-const FileSupportSection = styled.div`\n-  padding-left: 0.5rem;\n-  margin-bottom: 2rem;\n-  p {\n-    margin-bottom: 1rem;\n-    color: ${AppColors.onBackground};\n-    font-weight: 300;\n-  }\n-  .content-title {\n-    font-weight: 400;\n-    color: ${AppColors.onBackground};\n-    margin-bottom: 0.75rem;\n-    font-size: 1.1em;\n-  }\n-  ul {\n-    list-style: none;\n-    padding-left: 0;\n-    margin-bottom: 1.5rem;\n-    text-align: left;\n-  }\n-  li {\n-    margin-bottom: 0.75rem;\n-    color: #ffffff;\n-    padding-left: 1.25rem;\n-    position: relative;\n-    font-weight: 300;\n-    &::before {\n-      content: '•';\n-      position: absolute;\n-      left: 0;\n-      top: 0;\n-      color: ${AppColors.primary};\n-    }\n-    span {\n-      color: ${AppColors.onPrimaryGray};\n-      display: block;\n-      margin-left: 0.5rem;\n-      margin-top: 0.25rem;\n-      font-weight: 300;\n-    }\n-  }\n-`;\n-\n-const AiMessageSection = styled.div`\n-  .profile-section {\n-    margin-bottom: 1rem;\n-  }\n-  .conversational-intro {\n-    p {\n-      margin-bottom: 0.75rem;\n-      color: ${AppColors.onBackground};\n-      font-weight: 300;\n-      white-space: pre-wrap;\n-    }\n-  }\n-`;\n-\n const ProfileContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   display: flex;\n   align-items: center;\n   width: ${(props) => (props.$isNarrowScreen ? '100%' : 'auto')};\n@@ -173,23 +116,18 @@\n \n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n-  sendInitialMessageToAI: (prompt: string, selections?: string) => void;\n-  aiWelcomeMessage: string | null;\n-  isLoadingAiMessage: boolean;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n-  sendInitialMessageToAI,\n-  aiWelcomeMessage,\n-  isLoadingAiMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n+  const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n-  const stepData = getStepData(tFromDictionary as unknown as ChatDictionary);\n+  const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n@@ -201,26 +139,92 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n-  useEffect(() => {\n-    const timer = setTimeout(() => {\n-      if (!aiWelcomeMessage && !isLoadingAiMessage) {\n-        const initialPrompt = 'AI_WELCOME_GUIDE_PROMPT';\n-        sendInitialMessageToAI(initialPrompt, selectionStrings);\n-      }\n-    }, 1000);\n-    return () => clearTimeout(timer);\n-  }, [\n-    sendInitialMessageToAI,\n-    selectionStrings,\n-    aiWelcomeMessage,\n-    isLoadingAiMessage,\n-  ]);\n+  const guideText = tFromDictionary.freeFormGuide || {\n+    greeting:\n+      lang === 'ko'\n+        ? '안녕하세요! {profileName}입니다.'\n+        : \"Hello! I'm {profileName}.\",\n+    acknowledgmentCore:\n+      lang === 'ko'\n+        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n+        : 'Thank you for requesting a quote for the {selections} project.',\n+    transitionToQuestions:\n+      lang === 'ko'\n+        ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n+        : 'May I ask a few more questions first?',\n+    followUpQuestions:\n+      lang === 'ko'\n+        ? [\n+            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n+            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n+            '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n+            'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n+            '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n+          ]\n+        : [\n+            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n+            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n+            'Main Content: What are the main products or services for the platform you are envisioning?',\n+            \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n+            'Essential Features: Please tell us if there are any essential features for this platform.',\n+          ],\n+    closing:\n+      lang === 'ko'\n+        ? '그럼, 답변을 기다리겠습니다!'\n+        : 'I look forward to your answers!',\n+    defaultIntro:\n+      lang === 'ko'\n+        ? '어떤 프로젝트를 구상 중이신가요? 자세히 알려주시면 맞춤형 제안을 드리는 데 도움이 됩니다.'\n+        : 'What project are you envisioning? Telling me more will help me make personalized suggestions.',\n+  };\n \n+  const greeting = guideText.greeting.replace(\n+    '{profileName}',\n+    tFromDictionary.profileName\n+  );\n+  const acknowledgment = guideText.acknowledgmentCore.replace(\n+    '{selections}',\n+    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n+  );\n+\n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n-      <FileSupportSection>\n+      <div className=\"profile-section\">\n+        <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n+          <ProfileImage\n+            $isNarrowScreen={isNarrowScreen}\n+            src=\"/ai/pretty.png\"\n+            alt=\"AI 프로필\"\n+          />\n+          <ProfileName>\n+            <strong>{tFromDictionary.profileName}</strong>\n+          </ProfileName>\n+        </ProfileContainer>\n+      </div>\n+\n+      <div className=\"conversational-intro\">\n+        <p>{greeting}</p>\n+        {selectionStrings ? (\n+          <p>{acknowledgment}</p>\n+        ) : (\n+          <p>{guideText.defaultIntro}</p>\n+        )}\n+        {selectionStrings && (\n+          <>\n+            <p>{guideText.transitionToQuestions}</p>\n+            <ul>\n+              {guideText.followUpQuestions.map((question, index) => (\n+                <li key={index}>{question}</li>\n+              ))}\n+            </ul>\n+            <p>{guideText.closing}</p>\n+          </>\n+        )}\n+      </div>\n+\n+      <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n             {tFromDictionary.fileSupport.url}\n@@ -234,35 +238,9 @@\n             <span>{tFromDictionary.fileSupport.unsupported}</span>\n           </li>\n         </ul>\n         <p>{tFromDictionary.fileSupport.message}</p>\n-      </FileSupportSection>\n-\n-      <AiMessageSection>\n-        {isLoadingAiMessage && <AnimatedLoader />}\n-        {!isLoadingAiMessage && aiWelcomeMessage && (\n-          <>\n-            <div className=\"profile-section\">\n-              <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n-                <ProfileImage\n-                  $isNarrowScreen={isNarrowScreen}\n-                  src=\"/ai/pretty.png\"\n-                  alt=\"AI 프로필\"\n-                />\n-                <ProfileName>\n-                  <strong>{tFromDictionary.profileName}</strong>\n-                </ProfileName>\n-              </ProfileContainer>\n-            </div>\n-            <div className=\"conversational-intro\">\n-              <p>{aiWelcomeMessage}</p>\n-            </div>\n-          </>\n-        )}\n-        {!isLoadingAiMessage && !aiWelcomeMessage && (\n-          <div style={{ minHeight: '100px' }}></div>\n-        )}\n-      </AiMessageSection>\n+      </div>\n     </FreeFormGuideContainer>\n   );\n };\n \n"
                },
                {
                    "date": 1747799419103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React from 'react';\n+import React, { useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n@@ -202,9 +202,9 @@\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n-      <div className=\"conversational-intro\">\n+      {/* <div className=\"conversational-intro\">\n         <p>{greeting}</p>\n         {selectionStrings ? (\n           <p>{acknowledgment}</p>\n         ) : (\n@@ -220,9 +220,9 @@\n             </ul>\n             <p>{guideText.closing}</p>\n           </>\n         )}\n-      </div>\n+      </div> */}\n \n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n"
                },
                {
                    "date": 1747799451354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,13 +116,15 @@\n \n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n+  onSurveyDataReady?: (surveyData: string) => void;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n+  onSurveyDataReady,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n@@ -139,17 +141,23 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n+  useEffect(() => {\n+    if (selectionStrings && onSurveyDataReady) {\n+      onSurveyDataReady(selectionStrings);\n+    }\n+  }, [selectionStrings, onSurveyDataReady]);\n+\n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n         ? '안녕하세요! {profileName}입니다.'\n         : \"Hello! I'm {profileName}.\",\n     acknowledgmentCore:\n       lang === 'ko'\n-        ? '{selections} 프로젝트 견적 요청 주셔서 감사합니다.'\n-        : 'Thank you for requesting a quote for the {selections} project.',\n+        ? '견적 요청 주셔서 감사합니다. 선택하신 내용은 다음과 같습니다: {selections}'\n+        : 'Thank you for your estimate request. Your selected options are: {selections}',\n     transitionToQuestions:\n       lang === 'ko'\n         ? '먼저 몇 가지 추가 질문을 드려도 될까요?'\n         : 'May I ask a few more questions first?',\n@@ -184,9 +192,9 @@\n     tFromDictionary.profileName\n   );\n   const acknowledgment = guideText.acknowledgmentCore.replace(\n     '{selections}',\n-    selectionStrings || (lang === 'ko' ? '선택하신' : 'your selected')\n+    selectionStrings || (lang === 'ko' ? '선택하신 내용 없음' : 'No selections made')\n   );\n \n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n@@ -202,9 +210,9 @@\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n-      {/* <div className=\"conversational-intro\">\n+      <div className=\"conversational-intro\">\n         <p>{greeting}</p>\n         {selectionStrings ? (\n           <p>{acknowledgment}</p>\n         ) : (\n@@ -213,16 +221,16 @@\n         {selectionStrings && (\n           <>\n             <p>{guideText.transitionToQuestions}</p>\n             <ul>\n-              {guideText.followUpQuestions.map((question, index) => (\n+              {guideText.followUpQuestions.map((question: string, index: number) => (\n                 <li key={index}>{question}</li>\n               ))}\n             </ul>\n             <p>{guideText.closing}</p>\n           </>\n         )}\n-      </div> */}\n+      </div>\n \n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n"
                },
                {
                    "date": 1747799460244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,10 @@\n     tFromDictionary.profileName\n   );\n   const acknowledgment = guideText.acknowledgmentCore.replace(\n     '{selections}',\n-    selectionStrings || (lang === 'ko' ? '선택하신 내용 없음' : 'No selections made')\n+    selectionStrings ||\n+      (lang === 'ko' ? '선택하신 내용 없음' : 'No selections made')\n   );\n \n   return (\n     <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n@@ -221,11 +222,13 @@\n         {selectionStrings && (\n           <>\n             <p>{guideText.transitionToQuestions}</p>\n             <ul>\n-              {guideText.followUpQuestions.map((question: string, index: number) => (\n-                <li key={index}>{question}</li>\n-              ))}\n+              {guideText.followUpQuestions.map(\n+                (question: string, index: number) => (\n+                  <li key={index}>{question}</li>\n+                )\n+              )}\n             </ul>\n             <p>{guideText.closing}</p>\n           </>\n         )}\n"
                },
                {
                    "date": 1747969040627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,14 +117,21 @@\n interface FreeFormGuideProps {\n   isNarrowScreen: boolean;\n   lang: 'ko' | 'en';\n   onSurveyDataReady?: (surveyData: string) => void;\n+\n+  handleGeminiSubmit: (\n+    e?: React.FormEvent | null,\n+    actionPrompt?: string,\n+    isSystemInitiatedPrompt?: boolean\n+  ) => void;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n   onSurveyDataReady,\n+  handleGeminiSubmit,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n@@ -142,12 +149,13 @@\n     .filter(Boolean)\n     .join(' / ');\n \n   useEffect(() => {\n-    if (selectionStrings && onSurveyDataReady) {\n-      onSurveyDataReady(selectionStrings);\n-    }\n-  }, [selectionStrings, onSurveyDataReady]);\n+    const timer = setTimeout(() => {\n+      handleGeminiSubmit(null, '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요', true);\n+    }, 1000);\n+    return () => clearTimeout(timer);\n+  }, [onAddMessage]);\n \n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n@@ -163,17 +171,13 @@\n         : 'May I ask a few more questions first?',\n     followUpQuestions:\n       lang === 'ko'\n         ? [\n-            '플랫폼: 현재 선택하신 내용 외에 추가로 고려하시는 플랫폼(예: 앱)이 있으신가요?',\n-            '페이지: 설정하신 페이지 규모 외에, 예상하시는 실제 페이지 수는 어느 정도인가요?',\n             '주요 내용: 구상 중이신 서비스의 주요 상품 또는 내용은 무엇인가요?',\n             'UI 디자인: UI 디자인에 대한 특별한 선호 사항이나 참고하고 싶으신 웹사이트가 있으신가요?',\n             '필수 기능: 해당 플랫폼에 꼭 필요한 기능이 있다면 말씀해주세요.',\n           ]\n         : [\n-            'Platform: Are you considering any additional platforms (e.g., an app) beyond your current selections?',\n-            'Pages: Besides the page range you set, what is the estimated actual number of pages?',\n             'Main Content: What are the main products or services for the platform you are envisioning?',\n             \"UI Design: Do you have any specific preferences for UI design or any websites you'd like to reference?\",\n             'Essential Features: Please tell us if there are any essential features for this platform.',\n           ],\n@@ -211,9 +215,9 @@\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n-      <div className=\"conversational-intro\">\n+      {/* <div className=\"conversational-intro\">\n         <p>{greeting}</p>\n         {selectionStrings ? (\n           <p>{acknowledgment}</p>\n         ) : (\n@@ -231,9 +235,9 @@\n             </ul>\n             <p>{guideText.closing}</p>\n           </>\n         )}\n-      </div>\n+      </div> */}\n \n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n"
                },
                {
                    "date": 1747969102670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,14 @@\n     .join(' / ');\n \n   useEffect(() => {\n     const timer = setTimeout(() => {\n-      handleGeminiSubmit(null, '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요', true);\n+      onAddMessage({\n+        id: Date.now(),\n+        sender: 'ai',\n+        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n+        // 기타 필요한 속성 (예: type: 'guide' 등)\n+      });\n     }, 1000);\n     return () => clearTimeout(timer);\n   }, [onAddMessage]);\n \n"
                },
                {
                    "date": 1747969150355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,15 +123,17 @@\n     e?: React.FormEvent | null,\n     actionPrompt?: string,\n     isSystemInitiatedPrompt?: boolean\n   ) => void;\n+  onAddMessage: (message: Message) => void;\n }\n \n const FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n   isNarrowScreen,\n   lang,\n   onSurveyDataReady,\n   handleGeminiSubmit,\n+  onAddMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n"
                },
                {
                    "date": 1747971579336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n+import { Message } from '@/components/Ai/AiChatMessage';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n"
                },
                {
                    "date": 1747971962008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,14 +153,21 @@\n     .join(' / ');\n \n   useEffect(() => {\n     const timer = setTimeout(() => {\n-      onAddMessage({\n-        id: Date.now(),\n-        sender: 'ai',\n-        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n-        // 기타 필요한 속성 (예: type: 'guide' 등)\n-      });\n+      if (typeof onAddMessage === 'function') {\n+        onAddMessage({\n+          id: Date.now(),\n+          sender: 'ai',\n+          text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n+          // 기타 필요한 속성 (예: type: 'guide' 등)\n+        });\n+      } else {\n+        console.error(\n+          'FreeFormGuide: onAddMessage is not a function at the time of execution. Current value:',\n+          onAddMessage\n+        );\n+      }\n     }, 1000);\n     return () => clearTimeout(timer);\n   }, [onAddMessage]);\n \n"
                },
                {
                    "date": 1747971978411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,15 @@\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n+  console.log(\n+    'FreeFormGuide rendering. onAddMessage type:',\n+    typeof onAddMessage,\n+    'Value:',\n+    onAddMessage\n+  );\n+\n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n       if (!step) return '';\n"
                },
                {
                    "date": 1747972249941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n import { useTranslation } from 'react-i18next';\n-import { Message } from '@/components/Ai/AiChatMessage';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -139,15 +138,8 @@\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n-  console.log(\n-    'FreeFormGuide rendering. onAddMessage type:',\n-    typeof onAddMessage,\n-    'Value:',\n-    onAddMessage\n-  );\n-\n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n       if (!step) return '';\n@@ -160,21 +152,14 @@\n     .join(' / ');\n \n   useEffect(() => {\n     const timer = setTimeout(() => {\n-      if (typeof onAddMessage === 'function') {\n-        onAddMessage({\n-          id: Date.now(),\n-          sender: 'ai',\n-          text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n-          // 기타 필요한 속성 (예: type: 'guide' 등)\n-        });\n-      } else {\n-        console.error(\n-          'FreeFormGuide: onAddMessage is not a function at the time of execution. Current value:',\n-          onAddMessage\n-        );\n-      }\n+      onAddMessage({\n+        id: Date.now(),\n+        sender: 'ai',\n+        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n+        // 기타 필요한 속성 (예: type: 'guide' 등)\n+      });\n     }, 1000);\n     return () => clearTimeout(timer);\n   }, [onAddMessage]);\n \n"
                },
                {
                    "date": 1747972582260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n 'use client';\n \n-import React, { useEffect } from 'react';\n+import React, { useEffect, useRef } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n-import { useTranslation } from 'react-i18next';\n+import { useTranslation } from 'react-i18next'; // 사용하지 않는다면 제거해도 무방합니다.\n+import { Message } from '@/components/Ai/AiChatMessage'; // Message 타입 임포트\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -134,12 +135,15 @@\n   handleGeminiSubmit,\n   onAddMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n-  const { t: translate } = useTranslation();\n+  // const { t: translate } = useTranslation(); // 사용하지 않는다면 제거\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n+  // 메시지가 이미 추가되었는지 추적하기 위한 ref\n+  const hasAddedInitialMessage = useRef(false);\n+\n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n       if (!step) return '';\n@@ -151,19 +155,37 @@\n     .filter(Boolean)\n     .join(' / ');\n \n   useEffect(() => {\n-    const timer = setTimeout(() => {\n-      onAddMessage({\n-        id: Date.now(),\n-        sender: 'ai',\n-        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n-        // 기타 필요한 속성 (예: type: 'guide' 등)\n-      });\n-    }, 1000);\n-    return () => clearTimeout(timer);\n-  }, [onAddMessage]);\n+    // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n+    if (!hasAddedInitialMessage.current) {\n+      hasAddedInitialMessage.current = true;\n \n+      // AI가 사용자에게 먼저 던질 질문 메시지\n+      const aiInitialQuestion =\n+        lang === 'ko'\n+          ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n+          : `Hello! What information should I consider to provide a more detailed project estimate?`;\n+\n+      const timer = setTimeout(async () => {\n+        // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n+        onAddMessage({\n+          id: Date.now(),\n+          sender: 'ai',\n+          text: aiInitialQuestion,\n+        });\n+\n+        // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n+        // 이때 `isSystemInitiatedPrompt`를 `true`로 설정하여\n+        // handleGeminiSubmit 내부에서 사용자 메시지를 UI에 추가하지 않도록 하고,\n+        // 백엔드 API에는 AI 역할로 저장되도록 합니다.\n+        await handleGeminiSubmit(null, aiInitialQuestion, true);\n+      }, 1000); // 1초 지연\n+\n+      return () => clearTimeout(timer);\n+    }\n+  }, [lang, onAddMessage, handleGeminiSubmit]); // selectionStrings는 이제 직접적으로 의존하지 않으므로 제거\n+\n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n         ? '안녕하세요! {profileName}입니다.'\n@@ -222,30 +244,11 @@\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n-      {/* <div className=\"conversational-intro\">\n-        <p>{greeting}</p>\n-        {selectionStrings ? (\n-          <p>{acknowledgment}</p>\n-        ) : (\n-          <p>{guideText.defaultIntro}</p>\n-        )}\n-        {selectionStrings && (\n-          <>\n-            <p>{guideText.transitionToQuestions}</p>\n-            <ul>\n-              {guideText.followUpQuestions.map(\n-                (question: string, index: number) => (\n-                  <li key={index}>{question}</li>\n-                )\n-              )}\n-            </ul>\n-            <p>{guideText.closing}</p>\n-          </>\n-        )}\n-      </div> */}\n-\n+      {/* 여기에 AI가 질문한 후에 사용자가 무엇을 해야 하는지 간략하게 안내할 수 있습니다. */}\n+      {/* 이 섹션은 `conversational-intro` 대신 사용자에게 다음 단계를 안내하는 역할로 사용될 수 있습니다. */}\n+      {/* AI가 보낸 첫 메시지 이후에 사용자에게 필요한 추가적인 안내 (예: 입력창 사용 방법)를 포함할 수 있습니다. */}\n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n@@ -265,5 +268,5 @@\n     </FreeFormGuideContainer>\n   );\n };\n \n-export default FreeFormGuide;\n+export default FreeFormGuide;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747972758979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,13 @@\n 'use client';\n \n-import React, { useEffect, useRef } from 'react';\n+import React, { useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n import { getStepData, ChatDictionary } from '@/app/ai/components/StepData';\n-import { useTranslation } from 'react-i18next'; // 사용하지 않는다면 제거해도 무방합니다.\n-import { Message } from '@/components/Ai/AiChatMessage'; // Message 타입 임포트\n+import { useTranslation } from 'react-i18next';\n \n // 스타일 컴포넌트\n const FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n   width: 100%;\n@@ -135,15 +134,12 @@\n   handleGeminiSubmit,\n   onAddMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n-  // const { t: translate } = useTranslation(); // 사용하지 않는다면 제거\n+  const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n-  // 메시지가 이미 추가되었는지 추적하기 위한 ref\n-  const hasAddedInitialMessage = useRef(false);\n-\n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n       if (!step) return '';\n@@ -155,37 +151,19 @@\n     .filter(Boolean)\n     .join(' / ');\n \n   useEffect(() => {\n-    // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n-    if (!hasAddedInitialMessage.current) {\n-      hasAddedInitialMessage.current = true;\n+    const timer = setTimeout(() => {\n+      onAddMessage({\n+        id: Date.now(),\n+        sender: 'ai',\n+        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n+        // 기타 필요한 속성 (예: type: 'guide' 등)\n+      });\n+    }, 1000);\n+    return () => clearTimeout(timer);\n+  }, [onAddMessage]);\n \n-      // AI가 사용자에게 먼저 던질 질문 메시지\n-      const aiInitialQuestion =\n-        lang === 'ko'\n-          ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n-          : `Hello! What information should I consider to provide a more detailed project estimate?`;\n-\n-      const timer = setTimeout(async () => {\n-        // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n-        onAddMessage({\n-          id: Date.now(),\n-          sender: 'ai',\n-          text: aiInitialQuestion,\n-        });\n-\n-        // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n-        // 이때 `isSystemInitiatedPrompt`를 `true`로 설정하여\n-        // handleGeminiSubmit 내부에서 사용자 메시지를 UI에 추가하지 않도록 하고,\n-        // 백엔드 API에는 AI 역할로 저장되도록 합니다.\n-        await handleGeminiSubmit(null, aiInitialQuestion, true);\n-      }, 1000); // 1초 지연\n-\n-      return () => clearTimeout(timer);\n-    }\n-  }, [lang, onAddMessage, handleGeminiSubmit]); // selectionStrings는 이제 직접적으로 의존하지 않으므로 제거\n-\n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n         ? '안녕하세요! {profileName}입니다.'\n@@ -244,11 +222,30 @@\n           </ProfileName>\n         </ProfileContainer>\n       </div>\n \n-      {/* 여기에 AI가 질문한 후에 사용자가 무엇을 해야 하는지 간략하게 안내할 수 있습니다. */}\n-      {/* 이 섹션은 `conversational-intro` 대신 사용자에게 다음 단계를 안내하는 역할로 사용될 수 있습니다. */}\n-      {/* AI가 보낸 첫 메시지 이후에 사용자에게 필요한 추가적인 안내 (예: 입력창 사용 방법)를 포함할 수 있습니다. */}\n+      {/* <div className=\"conversational-intro\">\n+        <p>{greeting}</p>\n+        {selectionStrings ? (\n+          <p>{acknowledgment}</p>\n+        ) : (\n+          <p>{guideText.defaultIntro}</p>\n+        )}\n+        {selectionStrings && (\n+          <>\n+            <p>{guideText.transitionToQuestions}</p>\n+            <ul>\n+              {guideText.followUpQuestions.map(\n+                (question: string, index: number) => (\n+                  <li key={index}>{question}</li>\n+                )\n+              )}\n+            </ul>\n+            <p>{guideText.closing}</p>\n+          </>\n+        )}\n+      </div> */}\n+\n       <div className=\"file-support-content\">\n         <p className=\"content-title\">{tFromDictionary.fileSupport.title}</p>\n         <ul>\n           <li>\n"
                },
                {
                    "date": 1747972798105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n   useEffect(() => {\n     const timer = setTimeout(() => {\n       onAddMessage({\n         id: Date.now(),\n-        sender: 'ai',\n+        sender: 'user',\n         text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n         // 기타 필요한 속성 (예: type: 'guide' 등)\n       });\n     }, 1000);\n"
                },
                {
                    "date": 1747972990293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,19 +150,36 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n-  useEffect(() => {\n-    const timer = setTimeout(() => {\n-      onAddMessage({\n-        id: Date.now(),\n-        sender: 'user',\n-        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n-        // 기타 필요한 속성 (예: type: 'guide' 등)\n-      });\n-    }, 1000);\n-    return () => clearTimeout(timer);\n-  }, [onAddMessage]);\n+    useEffect(() => {\n+      // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n+      if (!hasAddedInitialMessage.current) {\n+        hasAddedInitialMessage.current = true;\n+    \n+        // AI가 사용자에게 먼저 던질 질문 메시지\n+        const aiInitialQuestion =\n+          lang === 'ko'\n+            ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n+            : `Hello! What information should I consider to provide a more detailed project estimate?`;\n+    \n+        const timer = setTimeout(async () => {\n+          // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n+          onAddMessage({\n+            id: Date.now(),\n+            sender: 'ai',\n+            text: aiInitialQuestion,\n+          });\n+    \n+          // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n+          //    UI에는 사용자 메시지가 표시되지 않지만, AI에게는 텍스트를 보내는 효과를 줍니다.\n+          //    백엔드에는 'AI' 역할로 저장됩니다.\n+          await handleGeminiSubmit(null, aiInitialQuestion, true); // isSystemInitiatedPrompt를 true로 전달\n+        }, 1000); // 1초 지연\n+    \n+        return () => clearTimeout(timer);\n+      }\n+    }, [lang, onAddMessage, handleGeminiSubmit]);\n \n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n"
                },
                {
                    "date": 1747973052594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n   handleGeminiSubmit,\n   onAddMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n+  const hasAddedInitialMessage = useRef(false);\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n"
                },
                {
                    "date": 1747973114222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useEffect } from 'react';\n+import React, { useEffect,useRef } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n@@ -151,37 +151,37 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n-    useEffect(() => {\n-      // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n-      if (!hasAddedInitialMessage.current) {\n-        hasAddedInitialMessage.current = true;\n-    \n-        // AI가 사용자에게 먼저 던질 질문 메시지\n-        const aiInitialQuestion =\n-          lang === 'ko'\n-            ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n-            : `Hello! What information should I consider to provide a more detailed project estimate?`;\n-    \n-        const timer = setTimeout(async () => {\n-          // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n-          onAddMessage({\n-            id: Date.now(),\n-            sender: 'ai',\n-            text: aiInitialQuestion,\n-          });\n-    \n-          // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n-          //    UI에는 사용자 메시지가 표시되지 않지만, AI에게는 텍스트를 보내는 효과를 줍니다.\n-          //    백엔드에는 'AI' 역할로 저장됩니다.\n-          await handleGeminiSubmit(null, aiInitialQuestion, true); // isSystemInitiatedPrompt를 true로 전달\n-        }, 1000); // 1초 지연\n-    \n-        return () => clearTimeout(timer);\n-      }\n-    }, [lang, onAddMessage, handleGeminiSubmit]);\n+  useEffect(() => {\n+    // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n+    if (!hasAddedInitialMessage.current) {\n+      hasAddedInitialMessage.current = true;\n \n+      // AI가 사용자에게 먼저 던질 질문 메시지\n+      const aiInitialQuestion =\n+        lang === 'ko'\n+          ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n+          : `Hello! What information should I consider to provide a more detailed project estimate?`;\n+\n+      const timer = setTimeout(async () => {\n+        // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n+        onAddMessage({\n+          id: Date.now(),\n+          sender: 'ai',\n+          text: aiInitialQuestion,\n+        });\n+\n+        // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n+        //    UI에는 사용자 메시지가 표시되지 않지만, AI에게는 텍스트를 보내는 효과를 줍니다.\n+        //    백엔드에는 'AI' 역할로 저장됩니다.\n+        await handleGeminiSubmit(null, aiInitialQuestion, true); // isSystemInitiatedPrompt를 true로 전달\n+      }, 1000); // 1초 지연\n+\n+      return () => clearTimeout(timer);\n+    }\n+  }, [lang, onAddMessage, handleGeminiSubmit]);\n+\n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n         ? '안녕하세요! {profileName}입니다.'\n@@ -283,5 +283,5 @@\n     </FreeFormGuideContainer>\n   );\n };\n \n-export default FreeFormGuide;\n\\ No newline at end of file\n+export default FreeFormGuide;\n"
                },
                {
                    "date": 1747973137408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useEffect,useRef } from 'react';\n+import React, { useEffect } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n@@ -134,9 +134,8 @@\n   handleGeminiSubmit,\n   onAddMessage,\n }) => {\n   const tFromDictionary = aiChatDictionary[lang];\n-  const hasAddedInitialMessage = useRef(false);\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n \n@@ -152,36 +151,19 @@\n     .filter(Boolean)\n     .join(' / ');\n \n   useEffect(() => {\n-    // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n-    if (!hasAddedInitialMessage.current) {\n-      hasAddedInitialMessage.current = true;\n+    const timer = setTimeout(() => {\n+      onAddMessage({\n+        id: Date.now(),\n+        sender: 'user',\n+        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n+        // 기타 필요한 속성 (예: type: 'guide' 등)\n+      });\n+    }, 1000);\n+    return () => clearTimeout(timer);\n+  }, [onAddMessage]);\n \n-      // AI가 사용자에게 먼저 던질 질문 메시지\n-      const aiInitialQuestion =\n-        lang === 'ko'\n-          ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n-          : `Hello! What information should I consider to provide a more detailed project estimate?`;\n-\n-      const timer = setTimeout(async () => {\n-        // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n-        onAddMessage({\n-          id: Date.now(),\n-          sender: 'ai',\n-          text: aiInitialQuestion,\n-        });\n-\n-        // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n-        //    UI에는 사용자 메시지가 표시되지 않지만, AI에게는 텍스트를 보내는 효과를 줍니다.\n-        //    백엔드에는 'AI' 역할로 저장됩니다.\n-        await handleGeminiSubmit(null, aiInitialQuestion, true); // isSystemInitiatedPrompt를 true로 전달\n-      }, 1000); // 1초 지연\n-\n-      return () => clearTimeout(timer);\n-    }\n-  }, [lang, onAddMessage, handleGeminiSubmit]);\n-\n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n         ? '안녕하세요! {profileName}입니다.'\n"
                },
                {
                    "date": 1747980332461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n         // 기타 필요한 속성 (예: type: 'guide' 등)\n       });\n     }, 1000);\n     return () => clearTimeout(timer);\n-  }, [onAddMessage]);\n+  }, []);\n \n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n"
                },
                {
                    "date": 1747980464941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,19 +150,36 @@\n     })\n     .filter(Boolean)\n     .join(' / ');\n \n-  useEffect(() => {\n-    const timer = setTimeout(() => {\n-      onAddMessage({\n-        id: Date.now(),\n-        sender: 'user',\n-        text: '안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요',\n-        // 기타 필요한 속성 (예: type: 'guide' 등)\n-      });\n-    }, 1000);\n-    return () => clearTimeout(timer);\n-  }, []);\n+    useEffect(() => {\n+      // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n+      if (!hasAddedInitialMessage.current) {\n+        hasAddedInitialMessage.current = true;\n+    \n+        // AI가 사용자에게 먼저 던질 질문 메시지\n+        const aiInitialQuestion =\n+          lang === 'ko'\n+            ? `안녕하세요! 어떤 걸 적어야 더 세심하게 프로젝트 견적서를 짜주나요?`\n+            : `Hello! What information should I consider to provide a more detailed project estimate?`;\n+    \n+        const timer = setTimeout(async () => {\n+          // 1. AI의 첫 질문 메시지를 UI에 AI의 메시지처럼 즉시 추가합니다.\n+          onAddMessage({\n+            id: Date.now(),\n+            sender: 'ai',\n+            text: aiInitialQuestion,\n+          });\n+    \n+          // 2. 이 질문에 대해 AI 스스로 응답을 생성하도록 handleGeminiSubmit을 호출합니다.\n+          //    UI에는 사용자 메시지가 표시되지 않지만, AI에게는 텍스트를 보내는 효과를 줍니다.\n+          //    백엔드에는 'AI' 역할로 저장됩니다.\n+          await handleGeminiSubmit(null, aiInitialQuestion, true); // isSystemInitiatedPrompt를 true로 전달\n+        }, 1000); // 1초 지연\n+    \n+        return () => clearTimeout(timer);\n+      }\n+    }, [lang, onAddMessage, handleGeminiSubmit]);\n \n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n"
                },
                {
                    "date": 1747980539049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n         }, 1000); // 1초 지연\n     \n         return () => clearTimeout(timer);\n       }\n-    }, [lang, onAddMessage, handleGeminiSubmit]);\n+    }, []);\n \n   const guideText = tFromDictionary.freeFormGuide || {\n     greeting:\n       lang === 'ko'\n"
                },
                {
                    "date": 1747980565133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useEffect } from 'react';\n+import React, { useEffect,useRef } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n"
                },
                {
                    "date": 1747980569471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n 'use client';\n \n-import React, { useEffect } from 'react';\n+import React, { useEffect,useRef } from 'react';\n import styled from 'styled-components';\n import { AppColors } from '@/styles/colors';\n import { aiChatDictionary } from '@/lib/i18n/aiChat';\n import useAiFlowStore from '@/store/aiFlowStore';\n@@ -137,8 +137,9 @@\n   const tFromDictionary = aiChatDictionary[lang];\n   const { t: translate } = useTranslation();\n   const selections = useAiFlowStore((state) => state.selections);\n   const stepData = getStepData(tFromDictionary as any as ChatDictionary);\n+  const hasAddedInitialMessage = useRef(false);\n \n   const selectionStrings = Object.entries(selections)\n     .map(([stepId, selectedIds]) => {\n       const step = stepData.find((s) => s.id === stepId);\n"
                },
                {
                    "date": 1747980770629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,8 +152,9 @@\n     .filter(Boolean)\n     .join(' / ');\n \n   useEffect(() => {\n+    console.log('FreeFormGuide useEffect 실행');\n     // 첫 렌더링 시에만 실행되도록, ref를 통해 제어합니다.\n     if (!hasAddedInitialMessage.current) {\n       hasAddedInitialMessage.current = true;\n \n"
                }
            ],
            "date": 1747726164747,
            "name": "Commit-0",
            "content": "'use client';\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { AppColors } from '@/styles/colors';\nimport { aiChatDictionary } from '@/lib/i18n/aiChat';\n\n// 스타일 컴포넌트\nconst FreeFormGuideContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n  width: 100%;\n  /* max-width: 48rem; */\n  font-weight: 300;\n  padding: 0;\n  background-color: ${AppColors.background};\n  border-radius: 8px;\n  text-align: ${(props) =>\n    props.$isNarrowScreen ? 'left' : 'left'}; // 항상 왼쪽 정렬\n  color: #9ca3af;\n  line-height: 1.6;\n\n  .content {\n    margin-top: ${(props) => (props.$isNarrowScreen ? '0.8rem' : '1.5rem')};\n    padding-left: 0.5rem;\n  }\n\n  p {\n    margin-bottom: 1rem;\n    color: ${AppColors.onBackground};\n    font-weight: 400;\n    font-weight: 300;\n  }\n\n  ul {\n    list-style: none;\n    padding-left: 0;\n    margin-bottom: 1.5rem;\n    text-align: left; /* 항상 텍스트 왼쪽 정렬 */\n  }\n\n  li {\n    margin-bottom: 0.75rem;\n    color: #ffffff; /* 흰색으로 변경 */\n    padding-left: 1.25rem;\n    position: relative;\n    font-weight: 400;\n\n    &::before {\n      content: '•';\n      position: absolute;\n      left: 0;\n      top: 0;\n      color: ${AppColors.primary}; /* Bullet 색상 유지 */\n    }\n\n    strong {\n      font-weight: 400;\n    }\n\n    span {\n      color: ${AppColors.onPrimaryGray};\n      display: block;\n      margin-left: 0.5rem;\n      margin-top: 0.25rem;\n      font-weight: 300;\n    }\n  }\n`;\n\nconst ProfileContainer = styled.div<{ $isNarrowScreen?: boolean }>`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${(props) => (props.$isNarrowScreen ? '1rem' : '0')};\n  width: ${(props) => (props.$isNarrowScreen ? '100%' : 'auto')};\n  justify-content: flex-start; // 항상 왼쪽 정렬\n`;\n\nconst ProfileImage = styled.img<{ $isNarrowScreen?: boolean }>`\n  height: 2.5rem;\n  width: 2.5rem;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-right: 1rem; /* 항상 오른쪽 여백 유지 */\n`;\n\nconst ProfileName = styled.p`\n  font-size: 20px;\n  color: ${AppColors.onBackground};\n  font-weight: bold;\n  margin: 0; /* 마진 제거 */\n  margin-top: 16px;\n`;\n\ninterface FreeFormGuideProps {\n  isNarrowScreen: boolean;\n  lang: 'ko' | 'en';\n}\n\nconst FreeFormGuide: React.FC<FreeFormGuideProps> = ({\n  isNarrowScreen,\n  lang,\n}) => {\n  const t = aiChatDictionary[lang];\n\n  return (\n    <FreeFormGuideContainer $isNarrowScreen={isNarrowScreen}>\n      <ProfileContainer $isNarrowScreen={isNarrowScreen}>\n        <ProfileImage\n          $isNarrowScreen={isNarrowScreen}\n          src=\"/ai/pretty.png\"\n          alt=\"AI 프로필\"\n        />\n        <ProfileName>\n          <strong>{t.profileName}</strong>\n        </ProfileName>\n      </ProfileContainer>\n\n      <div className=\"content\">\n        <p>{t.fileSupport.title}</p>\n        <ul>\n          <li>\n            {t.fileSupport.url}\n            <br />\n            <span>&quot;{t.fileSupport.urlExample}&quot;</span>\n          </li>\n          <li>{t.fileSupport.image}</li>\n          <li>\n            {t.fileSupport.pdf}\n            <br />\n            <span>{t.fileSupport.unsupported}</span>\n          </li>\n        </ul>\n        <p>{t.fileSupport.message}</p>\n      </div>\n    </FreeFormGuideContainer>\n  );\n};\n\nexport default FreeFormGuide;\n"
        }
    ]
}