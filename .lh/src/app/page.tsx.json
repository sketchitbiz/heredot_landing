{
    "sourceFile": "src/app/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1747715821566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747716112397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,19 +427,18 @@\n       id: \"ai\",\n       $backgroundColor: AppColors.surface, // 또는 background로도 가능\n       content: (\n         <AIBlock\n-          topLabel={t.reviewSection.title}\n+          topLabel={t.aiBlock.title}\n           centerLabel=\"AI 견적서\"\n           bottomLabel={t.arrival}\n-          title={t.appBlock.title}\n-          description={t.appBlock.description}\n-          sectionTitle={t.appBlock.buttonHeader}\n-          sectionDescription={t.appBlock.buttonDescription}\n-          imageUrl=\"/assets/phone_frame.svg\"\n-          buttonText={t.appBlock.buttonTitle}\n+          title={t.aiBlock.title}\n+          description={t.aiBlock.description}\n+          buttonText={t.aiBlock.buttonTitle}\n+           buttonHeader={t.aiBlock.buttonHeader}\n+          buttonDescription={t.aiBlock.buttonDescription}\n           onButtonClick={() => {\n-            window.open(t.appBlock.buttonLink, \"_blank\");\n+            window.open(t.aiBlock.buttonLink, \"_blank\");\n           }}\n           onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n           onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n         />\n"
                },
                {
                    "date": 1747716143295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,9 +424,9 @@\n       ),\n     },\n     {\n       id: \"ai\",\n-      $backgroundColor: AppColors.surface, // 또는 background로도 가능\n+      $backgroundColor: AppColors.background, // 또는 background로도 가능\n       content: (\n         <AIBlock\n           topLabel={t.aiBlock.title}\n           centerLabel=\"AI 견적서\"\n"
                },
                {
                    "date": 1747716491855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n   community: { content: \"Community\", memo: \"community\" },\n   portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n   members: { content: \"Members\", memo: \"members\" },\n   video: { content: \"Video\", memo: \"video\" },\n+  ai: { content: \"AI\", memo: \"ai\" },\n   contact: { content: \"Contact\", memo: \"contact\" },\n };\n \n const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n@@ -104,8 +105,9 @@\n     portfolio: \"portfolio\",\n     contact: \"contact\",\n     service: \"community\",\n     market: \"market\",\n+    ai_section: \"ai\",  \n   };\n \n   useEffect(() => {\n     const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n"
                },
                {
                    "date": 1747716536065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     portfolio: \"portfolio\",\n     contact: \"contact\",\n     service: \"community\",\n     market: \"market\",\n-    ai_section: \"ai\",  \n+    estimate: \"ai\",  \n   };\n \n   useEffect(() => {\n     const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n"
                },
                {
                    "date": 1747716938259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,9 @@\n       content: (\n         <VideoGrid\n           topLabel={t.customNavigator.member}\n           centerLabel={t.customNavigator.review}\n-          bottomLabel={t.arrival}\n+          bottomLabel={t.customNavigator.ai}\n           title={t.reviewSection.title}\n           description={t.reviewSection.description}\n           onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n           onBottomArrowClick={() => scrollToTargetId(\"contact\", \"video\", \"contact\")}\n@@ -429,10 +429,10 @@\n       id: \"ai\",\n       $backgroundColor: AppColors.background, // 또는 background로도 가능\n       content: (\n         <AIBlock\n-          topLabel={t.aiBlock.title}\n-          centerLabel=\"AI 견적서\"\n+          topLabel={t.customNavigator.review}\n+          centerLabel={t.customNavigator.ai}\n           bottomLabel={t.arrival}\n           title={t.aiBlock.title}\n           description={t.aiBlock.description}\n           buttonText={t.aiBlock.buttonTitle}\n"
                },
                {
                    "date": 1747716948067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,9 +452,9 @@\n       \n       $backgroundColor: AppColors.background,\n       content: (\n         <ContactSection\n-          topLabel={t.customNavigator.review}\n+          topLabel={t.customNavigator.ai}\n           centerLabel={t.arrival}\n           bottomLabel={t.arrival}\n           title={t.contract.title}\n           description={t.contract.description}\n"
                },
                {
                    "date": 1747717009081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,473 @@\n+\"use client\";\n+\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { usePathname } from \"next/navigation\";\n+import { useLang } from \"@/contexts/LangContext\";\n+import { dictionary } from \"@/lib/i18n/lang\";\n+import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n+import ResponsiveView from \"@/layout/ResponsiveView\";\n+import DesignWeb from \"@/block/DesignWeb\";\n+import DesignMobile from \"@/block/DesignMobile\";\n+import LandingAppBar from \"@/components/LandingAppBar\";\n+import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n+\n+import HeaderBlock from \"@/block/HeaderBlock\";\n+import FirstMapBlock from \"@/block/FirstMapBlock\";\n+import Partner from \"@/block/Partner\";\n+import Rolling from \"@/block/Rolling\";\n+import SecondMapBlock from \"@/block/SecondMapBlock\";\n+import { CommunityBlock } from \"@/block/CommunityBlock\";\n+import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n+import { MembersTabSection } from \"@/block/MembersTabSection\";\n+import { VideoGrid } from \"@/block/VideoGrid\";\n+import { ContactSection } from \"@/components/Landing/ContactSection\";\n+import { Footer } from \"@/block/Footer\";\n+\n+import { AppColors } from \"@/styles/colors\";\n+import AppBlock from \"@/block/AppBlock\";\n+import DesignBlock from \"@/block/Design\";\n+import Consulting from \"@/block/Consulting\";\n+import { v4 as uuidv4 } from \"uuid\";\n+import { userStamp } from \"@/lib/api/user/api\";\n+import { AIBlock } from \"@/block/AIBlock\";\n+\n+const getOrCreateLogId = () => {\n+  const logIdKey = \"logId\";\n+  const logId = localStorage.getItem(logIdKey);\n+  if (logId) return logId;\n+  const newLogId = uuidv4();\n+  localStorage.setItem(logIdKey, newLogId);\n+  return newLogId;\n+};\n+\n+const sectionMap: Record<string, { content: string; memo: string }> = {\n+  header: { content: \"Header\", memo: \"header\" },\n+  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n+  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n+  consulting: { content: \"Consulting\", memo: \"consulting\" },\n+  // design: { content: \"Design\", memo: \"design\" },\n+  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n+  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n+  community: { content: \"Community\", memo: \"community\" },\n+  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n+  members: { content: \"Members\", memo: \"members\" },\n+  video: { content: \"Video\", memo: \"video\" },\n+  ai: { content: \"AI\", memo: \"ai\" },\n+  contact: { content: \"Contact\", memo: \"contact\" },\n+};\n+\n+const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"스크롤\",\n+      content,\n+      memo,\n+      ...(firstYn ? { firstYn: \"Y\" } : {}), \n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"버튼\",\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+export default function HomePage() {\n+  const { lang } = useLang();\n+  const t = dictionary[lang];\n+  const pathname = usePathname();\n+  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n+  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n+  const isAutoScrollingRef = useRef(false);\n+\n+  const startAutoScroll = () => {\n+    setIsAutoScrolling(true);\n+    isAutoScrollingRef.current = true;\n+  };\n+\n+  const endAutoScroll = () => {\n+    setIsAutoScrolling(false);\n+    isAutoScrollingRef.current = false;\n+  };\n+\n+  const aliasMap: Record<string, string> = {\n+    about: \"header\",\n+    portfolio: \"portfolio\",\n+    contact: \"contact\",\n+    service: \"community\",\n+    market: \"market\",\n+    estimate: \"ai\",  \n+  };\n+\n+  useEffect(() => {\n+    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n+    const targetId = aliasMap[path];\n+    if (targetId) {\n+      startAutoScroll();\n+      const el = document.getElementById(targetId);\n+      if (el) {\n+        requestAnimationFrame(() => {\n+          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+        });\n+      }\n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+      return () => {\n+        clearTimeout(scrollTimer);\n+        window.removeEventListener(\"scroll\", handleScroll);\n+      };\n+    }\n+  }, []);\n+\n+  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n+    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n+    if (targetId === \"AI Estimate\") {\n+      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n+      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n+      return;\n+    }\n+  \n+    const element = document.getElementById(targetId);\n+    if (element) {\n+      startAutoScroll();\n+      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+  \n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+          window.removeEventListener(\"scroll\", handleScroll);\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+  \n+      void logButtonClick(content, memo);\n+    }\n+  };\n+  \n+  \n+\n+  const firstHeaderLogged = useRef(false);\n+\n+  useEffect(() => {\n+    let lastScrollY = window.scrollY;\n+    let lastLoggedId = \"\";\n+  \n+    const headerObserver = new IntersectionObserver(\n+      (entries) => {\n+        const entry = entries[0];\n+        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n+          setCurrentSection(\"Header\");\n+  \n+          if (!firstHeaderLogged.current) {\n+            firstHeaderLogged.current = true;\n+            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n+          } else {\n+            logSectionView(\"Header\", \"header\");\n+          }\n+        }\n+      },\n+      { threshold: 0 }\n+    );\n+  \n+    // 👇 일반 섹션용 Observer\n+    const generalObserver = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const id = entry.target.id;\n+          const isVisible = entry.isIntersecting;\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY;\n+          lastScrollY = currentScrollY;\n+  \n+          if (\n+            id !== \"header\" &&\n+            isVisible &&\n+            isScrollingDown &&\n+            id !== lastLoggedId &&\n+            !isAutoScrollingRef.current\n+          ) {\n+            lastLoggedId = id;\n+            const section = sectionMap[id];\n+            if (section) {\n+              setCurrentSection(section.content);\n+              logSectionView(section.content, section.memo);\n+            }\n+          }\n+        });\n+      },\n+      { threshold: 0.3 }\n+    );\n+  \n+    const headerEl = document.getElementById(\"header\");\n+    if (headerEl) headerObserver.observe(headerEl);\n+  \n+    const otherEls = Object.keys(sectionMap)\n+      .filter((id) => id !== \"header\")\n+      .map((id) => document.getElementById(id))\n+      .filter(Boolean);\n+  \n+    otherEls.forEach((el) => generalObserver.observe(el!));\n+  \n+    return () => {\n+      if (headerEl) headerObserver.unobserve(headerEl);\n+      otherEls.forEach((el) => generalObserver.unobserve(el!));\n+    };\n+  }, [t]);\n+  ;\n+\n+  const appBar = (\n+    <LandingAppBar\n+      logoSrc=\"/assets/logo.svg\"\n+      logoWidth=\"169px\"\n+      logoHeight=\"64px\"\n+      isShowLanguageSwitcher={true}\n+      navLinks={[\n+        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n+        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n+        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n+        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n+      ]}\n+      onNavigate={scrollToTargetId}\n+    />\n+  );\n+\n+  const sections = [\n+    {\n+      id: \"header\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <HeaderBlock\n+          title={t.headerTitle}\n+          subtitle={t.headerSubtitle}\n+          downloadLabel={t.download}\n+          downloadLink={downloadLinks.companyProfile[lang]}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"firstMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <FirstMapBlock label={t.firstMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"partner\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <>\n+          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n+          <Partner\n+            title1={t.partner.title1}\n+            title2={t.partner.title2}\n+            subtitle={t.partner.subtitle}\n+            tabs={t.partner.tabs}\n+            slides={t.partner.slides}\n+            downloadText={t.partner.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Partner\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"rolling\",\n+      $backgroundColor: AppColors.background,\n+      content: <Rolling />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"consulting\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <Consulting\n+          title={t.consulting.title}\n+          descriptions={t.consulting.descriptions}\n+          downloadText={t.consulting.downloadText}\n+          gridHeaders={t.consulting.gridHeaders}\n+          gridContents={t.consulting.gridContents}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"design\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <>\n+          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n+          <DesignBlock\n+            title={t.design.title}\n+            tabs={t.design.tabs}\n+            tabNumbers={t.design.tabNumbers}\n+            slides={t.design.slides}\n+            downloadText={t.design.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Design\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Design\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+    },\n+    {\n+      id: \"secondMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <SecondMapBlock label={t.secondMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"appblock\",\n+      $backgroundColor: AppColors.primary,\n+      content: (\n+        <AppBlock\n+          title={t.appBlock.title}\n+          description={t.appBlock.description}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"community\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <CommunityBlock\n+          topLabel={t.departure}\n+          centerLabel={t.customNavigator.community}\n+          bottomLabel={t.customNavigator.portpolio}\n+          title={t.community.title}\n+          description={t.community.description}\n+          sectionTitle={t.community.section.title}\n+          sectionDescription={t.community.section.description}\n+          buttonText={t.community.section.buttonText}\n+          imageUrl=\"/assets/community.webp\"\n+          onButtonClick={() => {\n+            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n+          }}\n+          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"portfolio\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <PortfolioGrid\n+          title={t.portfolio.title}\n+          description={t.portfolio.description}\n+          topLabel={t.customNavigator.community}\n+          centerLabel={t.customNavigator.portpolio}\n+          bottomLabel={t.customNavigator.member}\n+          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"members\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <MembersTabSection\n+          title={t.membersSection.title}\n+          description={t.membersSection.description}\n+          memberCards={t.memberCards}\n+          topLabel={t.customNavigator.portpolio}\n+          centerLabel={t.customNavigator.member}\n+          bottomLabel={t.customNavigator.review}\n+          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"video\",\n+      $backgroundColor: AppColors.background,\n+      showFloatingBox: true,\n+       \n+      content: (\n+        <VideoGrid\n+          topLabel={t.customNavigator.member}\n+          centerLabel={t.customNavigator.review}\n+          bottomLabel={t.customNavigator.ai}\n+          title={t.reviewSection.title}\n+          description={t.reviewSection.description}\n+          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"ai\", \"video\", \"ai\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"ai\",\n+      $backgroundColor: AppColors.background, // 또는 background로도 가능\n+      content: (\n+        <AIBlock\n+          topLabel={t.customNavigator.review}\n+          centerLabel={t.customNavigator.ai}\n+          bottomLabel={t.arrival}\n+          title={t.aiBlock.title}\n+          description={t.aiBlock.description}\n+          buttonText={t.aiBlock.buttonTitle}\n+           buttonHeader={t.aiBlock.buttonHeader}\n+          buttonDescription={t.aiBlock.buttonDescription}\n+          onButtonClick={() => {\n+            window.open(t.aiBlock.buttonLink, \"_blank\");\n+          }}\n+          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n+        />\n+      ),\n+    },\n+    \n+    {\n+      id: \"contact\",\n+      \n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <ContactSection\n+          topLabel={t.customNavigator.ai}\n+          centerLabel={t.arrival}\n+          bottomLabel={t.arrival}\n+          title={t.contract.title}\n+          description={t.contract.description}\n+          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"footer\",\n+      $backgroundColor: AppColors.background,\n+      content: <Footer />,\n+    },\n+  ];\n+\n+  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n+}\n"
                },
                {
                    "date": 1747719433027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,480 @@\n+\"use client\";\n+\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { usePathname } from \"next/navigation\";\n+import { useLang } from \"@/contexts/LangContext\";\n+import { dictionary } from \"@/lib/i18n/lang\";\n+import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n+import ResponsiveView from \"@/layout/ResponsiveView\";\n+import DesignWeb from \"@/block/DesignWeb\";\n+import DesignMobile from \"@/block/DesignMobile\";\n+import LandingAppBar from \"@/components/LandingAppBar\";\n+import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n+\n+import HeaderBlock from \"@/block/HeaderBlock\";\n+import FirstMapBlock from \"@/block/FirstMapBlock\";\n+import Partner from \"@/block/Partner\";\n+import Rolling from \"@/block/Rolling\";\n+import SecondMapBlock from \"@/block/SecondMapBlock\";\n+import { CommunityBlock } from \"@/block/CommunityBlock\";\n+import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n+import { MembersTabSection } from \"@/block/MembersTabSection\";\n+import { VideoGrid } from \"@/block/VideoGrid\";\n+import { ContactSection } from \"@/components/Landing/ContactSection\";\n+import { Footer } from \"@/block/Footer\";\n+\n+import { AppColors } from \"@/styles/colors\";\n+import AppBlock from \"@/block/AppBlock\";\n+import DesignBlock from \"@/block/Design\";\n+import Consulting from \"@/block/Consulting\";\n+import { v4 as uuidv4 } from \"uuid\";\n+import { userStamp } from \"@/lib/api/user/api\";\n+import { AIBlock } from \"@/block/AIBlock\";\n+import EventBlock from \"@/block/EventBlock\";\n+\n+const getOrCreateLogId = () => {\n+  const logIdKey = \"logId\";\n+  const logId = localStorage.getItem(logIdKey);\n+  if (logId) return logId;\n+  const newLogId = uuidv4();\n+  localStorage.setItem(logIdKey, newLogId);\n+  return newLogId;\n+};\n+\n+const sectionMap: Record<string, { content: string; memo: string }> = {\n+  header: { content: \"Header\", memo: \"header\" },\n+  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n+  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n+  consulting: { content: \"Consulting\", memo: \"consulting\" },\n+  // design: { content: \"Design\", memo: \"design\" },\n+  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n+  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n+  community: { content: \"Community\", memo: \"community\" },\n+  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n+  members: { content: \"Members\", memo: \"members\" },\n+  video: { content: \"Video\", memo: \"video\" },\n+  ai: { content: \"AI\", memo: \"ai\" },\n+  contact: { content: \"Contact\", memo: \"contact\" },\n+};\n+\n+const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"스크롤\",\n+      content,\n+      memo,\n+      ...(firstYn ? { firstYn: \"Y\" } : {}), \n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"버튼\",\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+export default function HomePage() {\n+  const { lang } = useLang();\n+  const t = dictionary[lang];\n+  const pathname = usePathname();\n+  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n+  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n+  const isAutoScrollingRef = useRef(false);\n+\n+  const startAutoScroll = () => {\n+    setIsAutoScrolling(true);\n+    isAutoScrollingRef.current = true;\n+  };\n+\n+  const endAutoScroll = () => {\n+    setIsAutoScrolling(false);\n+    isAutoScrollingRef.current = false;\n+  };\n+\n+  const aliasMap: Record<string, string> = {\n+    about: \"header\",\n+    portfolio: \"portfolio\",\n+    contact: \"contact\",\n+    service: \"community\",\n+    market: \"market\",\n+    estimate: \"ai\",  \n+  };\n+\n+  useEffect(() => {\n+    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n+    const targetId = aliasMap[path];\n+    if (targetId) {\n+      startAutoScroll();\n+      const el = document.getElementById(targetId);\n+      if (el) {\n+        requestAnimationFrame(() => {\n+          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+        });\n+      }\n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+      return () => {\n+        clearTimeout(scrollTimer);\n+        window.removeEventListener(\"scroll\", handleScroll);\n+      };\n+    }\n+  }, []);\n+\n+  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n+    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n+    if (targetId === \"AI Estimate\") {\n+      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n+      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n+      return;\n+    }\n+  \n+    const element = document.getElementById(targetId);\n+    if (element) {\n+      startAutoScroll();\n+      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+  \n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+          window.removeEventListener(\"scroll\", handleScroll);\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+  \n+      void logButtonClick(content, memo);\n+    }\n+  };\n+  \n+  \n+\n+  const firstHeaderLogged = useRef(false);\n+\n+  useEffect(() => {\n+    let lastScrollY = window.scrollY;\n+    let lastLoggedId = \"\";\n+  \n+    const headerObserver = new IntersectionObserver(\n+      (entries) => {\n+        const entry = entries[0];\n+        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n+          setCurrentSection(\"Header\");\n+  \n+          if (!firstHeaderLogged.current) {\n+            firstHeaderLogged.current = true;\n+            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n+          } else {\n+            logSectionView(\"Header\", \"header\");\n+          }\n+        }\n+      },\n+      { threshold: 0 }\n+    );\n+  \n+    // 👇 일반 섹션용 Observer\n+    const generalObserver = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const id = entry.target.id;\n+          const isVisible = entry.isIntersecting;\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY;\n+          lastScrollY = currentScrollY;\n+  \n+          if (\n+            id !== \"header\" &&\n+            isVisible &&\n+            isScrollingDown &&\n+            id !== lastLoggedId &&\n+            !isAutoScrollingRef.current\n+          ) {\n+            lastLoggedId = id;\n+            const section = sectionMap[id];\n+            if (section) {\n+              setCurrentSection(section.content);\n+              logSectionView(section.content, section.memo);\n+            }\n+          }\n+        });\n+      },\n+      { threshold: 0.3 }\n+    );\n+  \n+    const headerEl = document.getElementById(\"header\");\n+    if (headerEl) headerObserver.observe(headerEl);\n+  \n+    const otherEls = Object.keys(sectionMap)\n+      .filter((id) => id !== \"header\")\n+      .map((id) => document.getElementById(id))\n+      .filter(Boolean);\n+  \n+    otherEls.forEach((el) => generalObserver.observe(el!));\n+  \n+    return () => {\n+      if (headerEl) headerObserver.unobserve(headerEl);\n+      otherEls.forEach((el) => generalObserver.unobserve(el!));\n+    };\n+  }, [t]);\n+  ;\n+\n+  const appBar = (\n+    <LandingAppBar\n+      logoSrc=\"/assets/logo.svg\"\n+      logoWidth=\"169px\"\n+      logoHeight=\"64px\"\n+      isShowLanguageSwitcher={true}\n+      navLinks={[\n+        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n+        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n+        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n+        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n+      ]}\n+      onNavigate={scrollToTargetId}\n+    />\n+  );\n+\n+  const sections = [\n+    {\n+      id: \"header\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <HeaderBlock\n+          title={t.headerTitle}\n+          subtitle={t.headerSubtitle}\n+          downloadLabel={t.download}\n+          downloadLink={downloadLinks.companyProfile[lang]}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"firstMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <FirstMapBlock label={t.firstMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"partner\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <>\n+          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n+          <Partner\n+            title1={t.partner.title1}\n+            title2={t.partner.title2}\n+            subtitle={t.partner.subtitle}\n+            tabs={t.partner.tabs}\n+            slides={t.partner.slides}\n+            downloadText={t.partner.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Partner\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"rolling\",\n+      $backgroundColor: AppColors.background,\n+      content: <Rolling />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"consulting\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <Consulting\n+          title={t.consulting.title}\n+          descriptions={t.consulting.descriptions}\n+          downloadText={t.consulting.downloadText}\n+          gridHeaders={t.consulting.gridHeaders}\n+          gridContents={t.consulting.gridContents}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"design\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <>\n+          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n+          <DesignBlock\n+            title={t.design.title}\n+            tabs={t.design.tabs}\n+            tabNumbers={t.design.tabNumbers}\n+            slides={t.design.slides}\n+            downloadText={t.design.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Design\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Design\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+    },\n+    {\n+      id: \"secondMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <SecondMapBlock label={t.secondMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"appblock\",\n+      $backgroundColor: AppColors.primary,\n+      content: (\n+        <AppBlock\n+          title={t.appBlock.title}\n+          description={t.appBlock.description}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"community\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <CommunityBlock\n+          topLabel={t.departure}\n+          centerLabel={t.customNavigator.community}\n+          bottomLabel={t.customNavigator.portpolio}\n+          title={t.community.title}\n+          description={t.community.description}\n+          sectionTitle={t.community.section.title}\n+          sectionDescription={t.community.section.description}\n+          buttonText={t.community.section.buttonText}\n+          imageUrl=\"/assets/community.webp\"\n+          onButtonClick={() => {\n+            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n+          }}\n+          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"portfolio\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <PortfolioGrid\n+          title={t.portfolio.title}\n+          description={t.portfolio.description}\n+          topLabel={t.customNavigator.community}\n+          centerLabel={t.customNavigator.portpolio}\n+          bottomLabel={t.customNavigator.member}\n+          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"members\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <MembersTabSection\n+          title={t.membersSection.title}\n+          description={t.membersSection.description}\n+          memberCards={t.memberCards}\n+          topLabel={t.customNavigator.portpolio}\n+          centerLabel={t.customNavigator.member}\n+          bottomLabel={t.customNavigator.review}\n+          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"video\",\n+      $backgroundColor: AppColors.background,\n+      showFloatingBox: true,\n+       \n+      content: (\n+        <VideoGrid\n+          topLabel={t.customNavigator.member}\n+          centerLabel={t.customNavigator.review}\n+          bottomLabel={t.customNavigator.ai}\n+          title={t.reviewSection.title}\n+          description={t.reviewSection.description}\n+          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"ai\", \"video\", \"ai\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"event\",\n+      $backgroundColor: AppColors.background,\n+      content: <EventBlock slides={t.design.slides} />,\n+    },\n+    \n+    {\n+      id: \"ai\",\n+      $backgroundColor: AppColors.background, // 또는 background로도 가능\n+      content: (\n+        <AIBlock\n+          topLabel={t.customNavigator.review}\n+          centerLabel={t.customNavigator.ai}\n+          bottomLabel={t.arrival}\n+          title={t.aiBlock.title}\n+          description={t.aiBlock.description}\n+          buttonText={t.aiBlock.buttonTitle}\n+           buttonHeader={t.aiBlock.buttonHeader}\n+          buttonDescription={t.aiBlock.buttonDescription}\n+          onButtonClick={() => {\n+            window.open(t.aiBlock.buttonLink, \"_blank\");\n+          }}\n+          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n+        />\n+      ),\n+    },\n+    \n+    {\n+      id: \"contact\",\n+      \n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <ContactSection\n+          topLabel={t.customNavigator.ai}\n+          centerLabel={t.arrival}\n+          bottomLabel={t.arrival}\n+          title={t.contract.title}\n+          description={t.contract.description}\n+          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"footer\",\n+      $backgroundColor: AppColors.background,\n+      content: <Footer />,\n+    },\n+  ];\n+\n+  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n+}\n"
                },
                {
                    "date": 1747719754774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,958 +428,22 @@\n     },\n     {\n       id: \"event\",\n       $backgroundColor: AppColors.background,\n-      content: <EventBlock slides={t.design.slides} />,\n-    },\n-    \n-    {\n-      id: \"ai\",\n-      $backgroundColor: AppColors.background, // 또는 background로도 가능\n-      content: (\n-        <AIBlock\n-          topLabel={t.customNavigator.review}\n-          centerLabel={t.customNavigator.ai}\n-          bottomLabel={t.arrival}\n-          title={t.aiBlock.title}\n-          description={t.aiBlock.description}\n-          buttonText={t.aiBlock.buttonTitle}\n-           buttonHeader={t.aiBlock.buttonHeader}\n-          buttonDescription={t.aiBlock.buttonDescription}\n-          onButtonClick={() => {\n-            window.open(t.aiBlock.buttonLink, \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n-        />\n-      ),\n-    },\n-    \n-    {\n-      id: \"contact\",\n-      \n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <ContactSection\n-          topLabel={t.customNavigator.ai}\n-          centerLabel={t.arrival}\n-          bottomLabel={t.arrival}\n-          title={t.contract.title}\n-          description={t.contract.description}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"footer\",\n-      $backgroundColor: AppColors.background,\n-      content: <Footer />,\n-    },\n-  ];\n-\n-  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n-}\n-\"use client\";\n-\n-import React, { useEffect, useRef, useState } from \"react\";\n-import { usePathname } from \"next/navigation\";\n-import { useLang } from \"@/contexts/LangContext\";\n-import { dictionary } from \"@/lib/i18n/lang\";\n-import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n-import ResponsiveView from \"@/layout/ResponsiveView\";\n-import DesignWeb from \"@/block/DesignWeb\";\n-import DesignMobile from \"@/block/DesignMobile\";\n-import LandingAppBar from \"@/components/LandingAppBar\";\n-import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n-\n-import HeaderBlock from \"@/block/HeaderBlock\";\n-import FirstMapBlock from \"@/block/FirstMapBlock\";\n-import Partner from \"@/block/Partner\";\n-import Rolling from \"@/block/Rolling\";\n-import SecondMapBlock from \"@/block/SecondMapBlock\";\n-import { CommunityBlock } from \"@/block/CommunityBlock\";\n-import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n-import { MembersTabSection } from \"@/block/MembersTabSection\";\n-import { VideoGrid } from \"@/block/VideoGrid\";\n-import { ContactSection } from \"@/components/Landing/ContactSection\";\n-import { Footer } from \"@/block/Footer\";\n-\n-import { AppColors } from \"@/styles/colors\";\n-import AppBlock from \"@/block/AppBlock\";\n-import DesignBlock from \"@/block/Design\";\n-import Consulting from \"@/block/Consulting\";\n-import { v4 as uuidv4 } from \"uuid\";\n-import { userStamp } from \"@/lib/api/user/api\";\n-import { AIBlock } from \"@/block/AIBlock\";\n-\n-const getOrCreateLogId = () => {\n-  const logIdKey = \"logId\";\n-  const logId = localStorage.getItem(logIdKey);\n-  if (logId) return logId;\n-  const newLogId = uuidv4();\n-  localStorage.setItem(logIdKey, newLogId);\n-  return newLogId;\n-};\n-\n-const sectionMap: Record<string, { content: string; memo: string }> = {\n-  header: { content: \"Header\", memo: \"header\" },\n-  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n-  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n-  consulting: { content: \"Consulting\", memo: \"consulting\" },\n-  // design: { content: \"Design\", memo: \"design\" },\n-  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n-  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n-  community: { content: \"Community\", memo: \"community\" },\n-  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n-  members: { content: \"Members\", memo: \"members\" },\n-  video: { content: \"Video\", memo: \"video\" },\n-  ai: { content: \"AI\", memo: \"ai\" },\n-  contact: { content: \"Contact\", memo: \"contact\" },\n-};\n-\n-const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"스크롤\",\n-      content,\n-      memo,\n-      ...(firstYn ? { firstYn: \"Y\" } : {}), \n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"버튼\",\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-export default function HomePage() {\n-  const { lang } = useLang();\n-  const t = dictionary[lang];\n-  const pathname = usePathname();\n-  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n-  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n-  const isAutoScrollingRef = useRef(false);\n-\n-  const startAutoScroll = () => {\n-    setIsAutoScrolling(true);\n-    isAutoScrollingRef.current = true;\n-  };\n-\n-  const endAutoScroll = () => {\n-    setIsAutoScrolling(false);\n-    isAutoScrollingRef.current = false;\n-  };\n-\n-  const aliasMap: Record<string, string> = {\n-    about: \"header\",\n-    portfolio: \"portfolio\",\n-    contact: \"contact\",\n-    service: \"community\",\n-    market: \"market\",\n-    estimate: \"ai\",  \n-  };\n-\n-  useEffect(() => {\n-    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n-    const targetId = aliasMap[path];\n-    if (targetId) {\n-      startAutoScroll();\n-      const el = document.getElementById(targetId);\n-      if (el) {\n-        requestAnimationFrame(() => {\n-          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-        });\n-      }\n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-      return () => {\n-        clearTimeout(scrollTimer);\n-        window.removeEventListener(\"scroll\", handleScroll);\n-      };\n-    }\n-  }, []);\n-\n-  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n-    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n-    if (targetId === \"AI Estimate\") {\n-      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n-      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n-      return;\n-    }\n-  \n-    const element = document.getElementById(targetId);\n-    if (element) {\n-      startAutoScroll();\n-      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-  \n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-          window.removeEventListener(\"scroll\", handleScroll);\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-  \n-      void logButtonClick(content, memo);\n-    }\n-  };\n-  \n-  \n-\n-  const firstHeaderLogged = useRef(false);\n-\n-  useEffect(() => {\n-    let lastScrollY = window.scrollY;\n-    let lastLoggedId = \"\";\n-  \n-    const headerObserver = new IntersectionObserver(\n-      (entries) => {\n-        const entry = entries[0];\n-        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n-          setCurrentSection(\"Header\");\n-  \n-          if (!firstHeaderLogged.current) {\n-            firstHeaderLogged.current = true;\n-            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n-          } else {\n-            logSectionView(\"Header\", \"header\");\n-          }\n-        }\n-      },\n-      { threshold: 0 }\n-    );\n-  \n-    // 👇 일반 섹션용 Observer\n-    const generalObserver = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const id = entry.target.id;\n-          const isVisible = entry.isIntersecting;\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY;\n-          lastScrollY = currentScrollY;\n-  \n-          if (\n-            id !== \"header\" &&\n-            isVisible &&\n-            isScrollingDown &&\n-            id !== lastLoggedId &&\n-            !isAutoScrollingRef.current\n-          ) {\n-            lastLoggedId = id;\n-            const section = sectionMap[id];\n-            if (section) {\n-              setCurrentSection(section.content);\n-              logSectionView(section.content, section.memo);\n-            }\n-          }\n-        });\n-      },\n-      { threshold: 0.3 }\n-    );\n-  \n-    const headerEl = document.getElementById(\"header\");\n-    if (headerEl) headerObserver.observe(headerEl);\n-  \n-    const otherEls = Object.keys(sectionMap)\n-      .filter((id) => id !== \"header\")\n-      .map((id) => document.getElementById(id))\n-      .filter(Boolean);\n-  \n-    otherEls.forEach((el) => generalObserver.observe(el!));\n-  \n-    return () => {\n-      if (headerEl) headerObserver.unobserve(headerEl);\n-      otherEls.forEach((el) => generalObserver.unobserve(el!));\n-    };\n-  }, [t]);\n-  ;\n-\n-  const appBar = (\n-    <LandingAppBar\n-      logoSrc=\"/assets/logo.svg\"\n-      logoWidth=\"169px\"\n-      logoHeight=\"64px\"\n-      isShowLanguageSwitcher={true}\n-      navLinks={[\n-        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n-        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n-        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n-        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n-      ]}\n-      onNavigate={scrollToTargetId}\n+      content: <EventBlock\n+      slides={t.design.slides}\n+      topLabel={t.customNavigator.review}\n+      centerLabel={t.customNavigator.event}\n+      bottomLabel={t.customNavigator.ai}\n+      title={t.reviewSection.title}\n+      description={t.reviewSection.description}\n+      onTopArrowClick={() => scrollToTargetId(\"video\", \"event\", \"video\")}\n+      onBottomArrowClick={() => scrollToTargetId(\"ai\", \"event\", \"ai\")}\n     />\n-  );\n-\n-  const sections = [\n-    {\n-      id: \"header\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <HeaderBlock\n-          title={t.headerTitle}\n-          subtitle={t.headerSubtitle}\n-          downloadLabel={t.download}\n-          downloadLink={downloadLinks.companyProfile[lang]}\n-        />\n-      ),\n+    ,\n     },\n-    {\n-      id: \"firstMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <FirstMapBlock label={t.firstMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"partner\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <>\n-          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n-          <Partner\n-            title1={t.partner.title1}\n-            title2={t.partner.title2}\n-            subtitle={t.partner.subtitle}\n-            tabs={t.partner.tabs}\n-            slides={t.partner.slides}\n-            downloadText={t.partner.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Partner\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"rolling\",\n-      $backgroundColor: AppColors.background,\n-      content: <Rolling />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"consulting\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <Consulting\n-          title={t.consulting.title}\n-          descriptions={t.consulting.descriptions}\n-          downloadText={t.consulting.downloadText}\n-          gridHeaders={t.consulting.gridHeaders}\n-          gridContents={t.consulting.gridContents}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"design\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <>\n-          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n-          <DesignBlock\n-            title={t.design.title}\n-            tabs={t.design.tabs}\n-            tabNumbers={t.design.tabNumbers}\n-            slides={t.design.slides}\n-            downloadText={t.design.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Design\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Design\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-    },\n-    {\n-      id: \"secondMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <SecondMapBlock label={t.secondMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"appblock\",\n-      $backgroundColor: AppColors.primary,\n-      content: (\n-        <AppBlock\n-          title={t.appBlock.title}\n-          description={t.appBlock.description}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"community\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <CommunityBlock\n-          topLabel={t.departure}\n-          centerLabel={t.customNavigator.community}\n-          bottomLabel={t.customNavigator.portpolio}\n-          title={t.community.title}\n-          description={t.community.description}\n-          sectionTitle={t.community.section.title}\n-          sectionDescription={t.community.section.description}\n-          buttonText={t.community.section.buttonText}\n-          imageUrl=\"/assets/community.webp\"\n-          onButtonClick={() => {\n-            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"portfolio\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <PortfolioGrid\n-          title={t.portfolio.title}\n-          description={t.portfolio.description}\n-          topLabel={t.customNavigator.community}\n-          centerLabel={t.customNavigator.portpolio}\n-          bottomLabel={t.customNavigator.member}\n-          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"members\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <MembersTabSection\n-          title={t.membersSection.title}\n-          description={t.membersSection.description}\n-          memberCards={t.memberCards}\n-          topLabel={t.customNavigator.portpolio}\n-          centerLabel={t.customNavigator.member}\n-          bottomLabel={t.customNavigator.review}\n-          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"video\",\n-      $backgroundColor: AppColors.background,\n-      showFloatingBox: true,\n-       \n-      content: (\n-        <VideoGrid\n-          topLabel={t.customNavigator.member}\n-          centerLabel={t.customNavigator.review}\n-          bottomLabel={t.customNavigator.ai}\n-          title={t.reviewSection.title}\n-          description={t.reviewSection.description}\n-          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"ai\", \"video\", \"ai\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"ai\",\n-      $backgroundColor: AppColors.background, // 또는 background로도 가능\n-      content: (\n-        <AIBlock\n-          topLabel={t.customNavigator.review}\n-          centerLabel={t.customNavigator.ai}\n-          bottomLabel={t.arrival}\n-          title={t.aiBlock.title}\n-          description={t.aiBlock.description}\n-          buttonText={t.aiBlock.buttonTitle}\n-           buttonHeader={t.aiBlock.buttonHeader}\n-          buttonDescription={t.aiBlock.buttonDescription}\n-          onButtonClick={() => {\n-            window.open(t.aiBlock.buttonLink, \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n-        />\n-      ),\n-    },\n     \n     {\n-      id: \"contact\",\n-      \n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <ContactSection\n-          topLabel={t.customNavigator.ai}\n-          centerLabel={t.arrival}\n-          bottomLabel={t.arrival}\n-          title={t.contract.title}\n-          description={t.contract.description}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"footer\",\n-      $backgroundColor: AppColors.background,\n-      content: <Footer />,\n-    },\n-  ];\n-\n-  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n-}\n-\"use client\";\n-\n-import React, { useEffect, useRef, useState } from \"react\";\n-import { usePathname } from \"next/navigation\";\n-import { useLang } from \"@/contexts/LangContext\";\n-import { dictionary } from \"@/lib/i18n/lang\";\n-import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n-import ResponsiveView from \"@/layout/ResponsiveView\";\n-import DesignWeb from \"@/block/DesignWeb\";\n-import DesignMobile from \"@/block/DesignMobile\";\n-import LandingAppBar from \"@/components/LandingAppBar\";\n-import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n-\n-import HeaderBlock from \"@/block/HeaderBlock\";\n-import FirstMapBlock from \"@/block/FirstMapBlock\";\n-import Partner from \"@/block/Partner\";\n-import Rolling from \"@/block/Rolling\";\n-import SecondMapBlock from \"@/block/SecondMapBlock\";\n-import { CommunityBlock } from \"@/block/CommunityBlock\";\n-import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n-import { MembersTabSection } from \"@/block/MembersTabSection\";\n-import { VideoGrid } from \"@/block/VideoGrid\";\n-import { ContactSection } from \"@/components/Landing/ContactSection\";\n-import { Footer } from \"@/block/Footer\";\n-\n-import { AppColors } from \"@/styles/colors\";\n-import AppBlock from \"@/block/AppBlock\";\n-import DesignBlock from \"@/block/Design\";\n-import Consulting from \"@/block/Consulting\";\n-import { v4 as uuidv4 } from \"uuid\";\n-import { userStamp } from \"@/lib/api/user/api\";\n-import { AIBlock } from \"@/block/AIBlock\";\n-\n-const getOrCreateLogId = () => {\n-  const logIdKey = \"logId\";\n-  const logId = localStorage.getItem(logIdKey);\n-  if (logId) return logId;\n-  const newLogId = uuidv4();\n-  localStorage.setItem(logIdKey, newLogId);\n-  return newLogId;\n-};\n-\n-const sectionMap: Record<string, { content: string; memo: string }> = {\n-  header: { content: \"Header\", memo: \"header\" },\n-  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n-  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n-  consulting: { content: \"Consulting\", memo: \"consulting\" },\n-  // design: { content: \"Design\", memo: \"design\" },\n-  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n-  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n-  community: { content: \"Community\", memo: \"community\" },\n-  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n-  members: { content: \"Members\", memo: \"members\" },\n-  video: { content: \"Video\", memo: \"video\" },\n-  ai: { content: \"AI\", memo: \"ai\" },\n-  contact: { content: \"Contact\", memo: \"contact\" },\n-};\n-\n-const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"스크롤\",\n-      content,\n-      memo,\n-      ...(firstYn ? { firstYn: \"Y\" } : {}), \n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"버튼\",\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-export default function HomePage() {\n-  const { lang } = useLang();\n-  const t = dictionary[lang];\n-  const pathname = usePathname();\n-  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n-  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n-  const isAutoScrollingRef = useRef(false);\n-\n-  const startAutoScroll = () => {\n-    setIsAutoScrolling(true);\n-    isAutoScrollingRef.current = true;\n-  };\n-\n-  const endAutoScroll = () => {\n-    setIsAutoScrolling(false);\n-    isAutoScrollingRef.current = false;\n-  };\n-\n-  const aliasMap: Record<string, string> = {\n-    about: \"header\",\n-    portfolio: \"portfolio\",\n-    contact: \"contact\",\n-    service: \"community\",\n-    market: \"market\",\n-    estimate: \"ai\",  \n-  };\n-\n-  useEffect(() => {\n-    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n-    const targetId = aliasMap[path];\n-    if (targetId) {\n-      startAutoScroll();\n-      const el = document.getElementById(targetId);\n-      if (el) {\n-        requestAnimationFrame(() => {\n-          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-        });\n-      }\n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-      return () => {\n-        clearTimeout(scrollTimer);\n-        window.removeEventListener(\"scroll\", handleScroll);\n-      };\n-    }\n-  }, []);\n-\n-  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n-    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n-    if (targetId === \"AI Estimate\") {\n-      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n-      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n-      return;\n-    }\n-  \n-    const element = document.getElementById(targetId);\n-    if (element) {\n-      startAutoScroll();\n-      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-  \n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-          window.removeEventListener(\"scroll\", handleScroll);\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-  \n-      void logButtonClick(content, memo);\n-    }\n-  };\n-  \n-  \n-\n-  const firstHeaderLogged = useRef(false);\n-\n-  useEffect(() => {\n-    let lastScrollY = window.scrollY;\n-    let lastLoggedId = \"\";\n-  \n-    const headerObserver = new IntersectionObserver(\n-      (entries) => {\n-        const entry = entries[0];\n-        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n-          setCurrentSection(\"Header\");\n-  \n-          if (!firstHeaderLogged.current) {\n-            firstHeaderLogged.current = true;\n-            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n-          } else {\n-            logSectionView(\"Header\", \"header\");\n-          }\n-        }\n-      },\n-      { threshold: 0 }\n-    );\n-  \n-    // 👇 일반 섹션용 Observer\n-    const generalObserver = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const id = entry.target.id;\n-          const isVisible = entry.isIntersecting;\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY;\n-          lastScrollY = currentScrollY;\n-  \n-          if (\n-            id !== \"header\" &&\n-            isVisible &&\n-            isScrollingDown &&\n-            id !== lastLoggedId &&\n-            !isAutoScrollingRef.current\n-          ) {\n-            lastLoggedId = id;\n-            const section = sectionMap[id];\n-            if (section) {\n-              setCurrentSection(section.content);\n-              logSectionView(section.content, section.memo);\n-            }\n-          }\n-        });\n-      },\n-      { threshold: 0.3 }\n-    );\n-  \n-    const headerEl = document.getElementById(\"header\");\n-    if (headerEl) headerObserver.observe(headerEl);\n-  \n-    const otherEls = Object.keys(sectionMap)\n-      .filter((id) => id !== \"header\")\n-      .map((id) => document.getElementById(id))\n-      .filter(Boolean);\n-  \n-    otherEls.forEach((el) => generalObserver.observe(el!));\n-  \n-    return () => {\n-      if (headerEl) headerObserver.unobserve(headerEl);\n-      otherEls.forEach((el) => generalObserver.unobserve(el!));\n-    };\n-  }, [t]);\n-  ;\n-\n-  const appBar = (\n-    <LandingAppBar\n-      logoSrc=\"/assets/logo.svg\"\n-      logoWidth=\"169px\"\n-      logoHeight=\"64px\"\n-      isShowLanguageSwitcher={true}\n-      navLinks={[\n-        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n-        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n-        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n-        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n-      ]}\n-      onNavigate={scrollToTargetId}\n-    />\n-  );\n-\n-  const sections = [\n-    {\n-      id: \"header\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <HeaderBlock\n-          title={t.headerTitle}\n-          subtitle={t.headerSubtitle}\n-          downloadLabel={t.download}\n-          downloadLink={downloadLinks.companyProfile[lang]}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"firstMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <FirstMapBlock label={t.firstMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"partner\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <>\n-          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n-          <Partner\n-            title1={t.partner.title1}\n-            title2={t.partner.title2}\n-            subtitle={t.partner.subtitle}\n-            tabs={t.partner.tabs}\n-            slides={t.partner.slides}\n-            downloadText={t.partner.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Partner\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"rolling\",\n-      $backgroundColor: AppColors.background,\n-      content: <Rolling />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"consulting\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <Consulting\n-          title={t.consulting.title}\n-          descriptions={t.consulting.descriptions}\n-          downloadText={t.consulting.downloadText}\n-          gridHeaders={t.consulting.gridHeaders}\n-          gridContents={t.consulting.gridContents}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"design\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <>\n-          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n-          <DesignBlock\n-            title={t.design.title}\n-            tabs={t.design.tabs}\n-            tabNumbers={t.design.tabNumbers}\n-            slides={t.design.slides}\n-            downloadText={t.design.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Design\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Design\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-    },\n-    {\n-      id: \"secondMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <SecondMapBlock label={t.secondMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"appblock\",\n-      $backgroundColor: AppColors.primary,\n-      content: (\n-        <AppBlock\n-          title={t.appBlock.title}\n-          description={t.appBlock.description}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"community\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <CommunityBlock\n-          topLabel={t.departure}\n-          centerLabel={t.customNavigator.community}\n-          bottomLabel={t.customNavigator.portpolio}\n-          title={t.community.title}\n-          description={t.community.description}\n-          sectionTitle={t.community.section.title}\n-          sectionDescription={t.community.section.description}\n-          buttonText={t.community.section.buttonText}\n-          imageUrl=\"/assets/community.webp\"\n-          onButtonClick={() => {\n-            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"portfolio\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <PortfolioGrid\n-          title={t.portfolio.title}\n-          description={t.portfolio.description}\n-          topLabel={t.customNavigator.community}\n-          centerLabel={t.customNavigator.portpolio}\n-          bottomLabel={t.customNavigator.member}\n-          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"members\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <MembersTabSection\n-          title={t.membersSection.title}\n-          description={t.membersSection.description}\n-          memberCards={t.memberCards}\n-          topLabel={t.customNavigator.portpolio}\n-          centerLabel={t.customNavigator.member}\n-          bottomLabel={t.customNavigator.review}\n-          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"video\",\n-      $backgroundColor: AppColors.background,\n-      showFloatingBox: true,\n-       \n-      content: (\n-        <VideoGrid\n-          topLabel={t.customNavigator.member}\n-          centerLabel={t.customNavigator.review}\n-          bottomLabel={t.customNavigator.ai}\n-          title={t.reviewSection.title}\n-          description={t.reviewSection.description}\n-          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"video\", \"contact\")}\n-        />\n-      ),\n-    },\n-    {\n       id: \"ai\",\n       $backgroundColor: AppColors.background, // 또는 background로도 가능\n       content: (\n         <AIBlock\n"
                },
                {
                    "date": 1747721867723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n import { v4 as uuidv4 } from \"uuid\";\n import { userStamp } from \"@/lib/api/user/api\";\n import { AIBlock } from \"@/block/AIBlock\";\n import EventBlock from \"@/block/EventBlock\";\n+import Container3D from \"@/block/Container3D\";\n \n const getOrCreateLogId = () => {\n   const logIdKey = \"logId\";\n   const logId = localStorage.getItem(logIdKey);\n@@ -263,8 +264,16 @@\n         />\n       ),\n     },\n     {\n+      id: '3d',\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <Container3D\n+        />\n+      ),\n+    },\n+    {\n       id: \"firstMap\",\n       $backgroundColor: AppColors.background,\n       content: <FirstMapBlock label={t.firstMap.label} />,\n       $zIndex: 1001,\n"
                },
                {
                    "date": 1747724328585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,17 +263,17 @@\n           downloadLink={downloadLinks.companyProfile[lang]}\n         />\n       ),\n     },\n+    // {\n+    //   id: '3d',\n+    //   $backgroundColor: AppColors.background,\n+    //   content: (\n+    //     <Container3D\n+    //     />\n+    //   ),\n+    // },\n     {\n-      id: '3d',\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <Container3D\n-        />\n-      ),\n-    },\n-    {\n       id: \"firstMap\",\n       $backgroundColor: AppColors.background,\n       content: <FirstMapBlock label={t.firstMap.label} />,\n       $zIndex: 1001,\n"
                },
                {
                    "date": 1747725021552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,9 +438,9 @@\n     {\n       id: \"event\",\n       $backgroundColor: AppColors.background,\n       content: <EventBlock\n-      slides={t.design.slides}\n+      slides={t.event.slides}\n       topLabel={t.customNavigator.review}\n       centerLabel={t.customNavigator.event}\n       bottomLabel={t.customNavigator.ai}\n       title={t.reviewSection.title}\n"
                },
                {
                    "date": 1747725102750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,10 +442,10 @@\n       slides={t.event.slides}\n       topLabel={t.customNavigator.review}\n       centerLabel={t.customNavigator.event}\n       bottomLabel={t.customNavigator.ai}\n-      title={t.reviewSection.title}\n-      description={t.reviewSection.description}\n+      title={''}\n+      description={''}\n       onTopArrowClick={() => scrollToTargetId(\"video\", \"event\", \"video\")}\n       onBottomArrowClick={() => scrollToTargetId(\"ai\", \"event\", \"ai\")}\n     />\n     ,\n"
                },
                {
                    "date": 1747725224054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,9 +430,9 @@\n           bottomLabel={t.customNavigator.ai}\n           title={t.reviewSection.title}\n           description={t.reviewSection.description}\n           onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"ai\", \"video\", \"ai\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"event\", \"video\", \"event\")}\n         />\n       ),\n     },\n     {\n@@ -455,9 +455,9 @@\n       id: \"ai\",\n       $backgroundColor: AppColors.background, // 또는 background로도 가능\n       content: (\n         <AIBlock\n-          topLabel={t.customNavigator.review}\n+          topLabel={t.customNavigator.event}\n           centerLabel={t.customNavigator.ai}\n           bottomLabel={t.arrival}\n           title={t.aiBlock.title}\n           description={t.aiBlock.description}\n@@ -466,9 +466,9 @@\n           buttonDescription={t.aiBlock.buttonDescription}\n           onButtonClick={() => {\n             window.open(t.aiBlock.buttonLink, \"_blank\");\n           }}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n+          onTopArrowClick={() => scrollToTargetId(\"event\", \"ai\", \"event\")}\n           onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n         />\n       ),\n     },\n"
                },
                {
                    "date": 1747726293599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,9 @@\n       id: \"event\",\n       $backgroundColor: AppColors.background,\n       content: <EventBlock\n       slides={t.event.slides}\n+      buttonTitle={t.event.buttonTitle}\n       topLabel={t.customNavigator.review}\n       centerLabel={t.customNavigator.event}\n       bottomLabel={t.customNavigator.ai}\n       title={''}\n"
                },
                {
                    "date": 1747726898129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,497 @@\n+\"use client\";\n+\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { usePathname } from \"next/navigation\";\n+import { useLang } from \"@/contexts/LangContext\";\n+import { dictionary } from \"@/lib/i18n/lang\";\n+import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n+import ResponsiveView from \"@/layout/ResponsiveView\";\n+import DesignWeb from \"@/block/DesignWeb\";\n+import DesignMobile from \"@/block/DesignMobile\";\n+import LandingAppBar from \"@/components/LandingAppBar\";\n+import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n+\n+import HeaderBlock from \"@/block/HeaderBlock\";\n+import FirstMapBlock from \"@/block/FirstMapBlock\";\n+import Partner from \"@/block/Partner\";\n+import Rolling from \"@/block/Rolling\";\n+import SecondMapBlock from \"@/block/SecondMapBlock\";\n+import { CommunityBlock } from \"@/block/CommunityBlock\";\n+import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n+import { MembersTabSection } from \"@/block/MembersTabSection\";\n+import { VideoGrid } from \"@/block/VideoGrid\";\n+import { ContactSection } from \"@/components/Landing/ContactSection\";\n+import { Footer } from \"@/block/Footer\";\n+\n+import { AppColors } from \"@/styles/colors\";\n+import AppBlock from \"@/block/AppBlock\";\n+import DesignBlock from \"@/block/Design\";\n+import Consulting from \"@/block/Consulting\";\n+import { v4 as uuidv4 } from \"uuid\";\n+import { userStamp } from \"@/lib/api/user/api\";\n+import { AIBlock } from \"@/block/AIBlock\";\n+import EventBlock from \"@/block/EventBlock\";\n+import Container3D from \"@/block/Container3D\";\n+\n+const getOrCreateLogId = () => {\n+  const logIdKey = \"logId\";\n+  const logId = localStorage.getItem(logIdKey);\n+  if (logId) return logId;\n+  const newLogId = uuidv4();\n+  localStorage.setItem(logIdKey, newLogId);\n+  return newLogId;\n+};\n+\n+const sectionMap: Record<string, { content: string; memo: string }> = {\n+  header: { content: \"Header\", memo: \"header\" },\n+  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n+  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n+  consulting: { content: \"Consulting\", memo: \"consulting\" },\n+  // design: { content: \"Design\", memo: \"design\" },\n+  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n+  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n+  community: { content: \"Community\", memo: \"community\" },\n+  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n+  members: { content: \"Members\", memo: \"members\" },\n+  video: { content: \"Video\", memo: \"video\" },\n+  ai: { content: \"AI\", memo: \"ai\" },\n+  contact: { content: \"Contact\", memo: \"contact\" },\n+};\n+\n+const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"스크롤\",\n+      content,\n+      memo,\n+      ...(firstYn ? { firstYn: \"Y\" } : {}), \n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+\n+const logButtonClick = async (content: string, memo: string) => {\n+  try {\n+    const res = await userStamp({\n+      uuid: getOrCreateLogId(),\n+      category: \"버튼\",\n+      content,\n+      memo,\n+    });\n+  } catch (e) {\n+  }\n+};\n+\n+export default function HomePage() {\n+  const { lang } = useLang();\n+  const t = dictionary[lang];\n+  const pathname = usePathname();\n+  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n+  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n+  const isAutoScrollingRef = useRef(false);\n+\n+  const startAutoScroll = () => {\n+    setIsAutoScrolling(true);\n+    isAutoScrollingRef.current = true;\n+  };\n+\n+  const endAutoScroll = () => {\n+    setIsAutoScrolling(false);\n+    isAutoScrollingRef.current = false;\n+  };\n+\n+  const aliasMap: Record<string, string> = {\n+    about: \"header\",\n+    portfolio: \"portfolio\",\n+    contact: \"contact\",\n+    service: \"community\",\n+    market: \"market\",\n+    estimate: \"ai\",  \n+  };\n+\n+  useEffect(() => {\n+    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n+    const targetId = aliasMap[path];\n+    if (targetId) {\n+      startAutoScroll();\n+      const el = document.getElementById(targetId);\n+      if (el) {\n+        requestAnimationFrame(() => {\n+          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+        });\n+      }\n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+      return () => {\n+        clearTimeout(scrollTimer);\n+        window.removeEventListener(\"scroll\", handleScroll);\n+      };\n+    }\n+  }, []);\n+\n+  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n+    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n+    if (targetId === \"AI Estimate\") {\n+      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n+      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n+      return;\n+    }\n+  \n+    const element = document.getElementById(targetId);\n+    if (element) {\n+      startAutoScroll();\n+      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n+  \n+      let scrollTimer: ReturnType<typeof setTimeout>;\n+      const handleScroll = () => {\n+        clearTimeout(scrollTimer);\n+        scrollTimer = setTimeout(() => {\n+          endAutoScroll();\n+          window.removeEventListener(\"scroll\", handleScroll);\n+        }, 300);\n+      };\n+      window.addEventListener(\"scroll\", handleScroll);\n+  \n+      void logButtonClick(content, memo);\n+    }\n+  };\n+  \n+  \n+\n+  const firstHeaderLogged = useRef(false);\n+\n+  useEffect(() => {\n+    let lastScrollY = window.scrollY;\n+    let lastLoggedId = \"\";\n+  \n+    const headerObserver = new IntersectionObserver(\n+      (entries) => {\n+        const entry = entries[0];\n+        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n+          setCurrentSection(\"Header\");\n+  \n+          if (!firstHeaderLogged.current) {\n+            firstHeaderLogged.current = true;\n+            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n+          } else {\n+            logSectionView(\"Header\", \"header\");\n+          }\n+        }\n+      },\n+      { threshold: 0 }\n+    );\n+  \n+    // 👇 일반 섹션용 Observer\n+    const generalObserver = new IntersectionObserver(\n+      (entries) => {\n+        entries.forEach((entry) => {\n+          const id = entry.target.id;\n+          const isVisible = entry.isIntersecting;\n+          const currentScrollY = window.scrollY;\n+          const isScrollingDown = currentScrollY > lastScrollY;\n+          lastScrollY = currentScrollY;\n+  \n+          if (\n+            id !== \"header\" &&\n+            isVisible &&\n+            isScrollingDown &&\n+            id !== lastLoggedId &&\n+            !isAutoScrollingRef.current\n+          ) {\n+            lastLoggedId = id;\n+            const section = sectionMap[id];\n+            if (section) {\n+              setCurrentSection(section.content);\n+              logSectionView(section.content, section.memo);\n+            }\n+          }\n+        });\n+      },\n+      { threshold: 0.3 }\n+    );\n+  \n+    const headerEl = document.getElementById(\"header\");\n+    if (headerEl) headerObserver.observe(headerEl);\n+  \n+    const otherEls = Object.keys(sectionMap)\n+      .filter((id) => id !== \"header\")\n+      .map((id) => document.getElementById(id))\n+      .filter(Boolean);\n+  \n+    otherEls.forEach((el) => generalObserver.observe(el!));\n+  \n+    return () => {\n+      if (headerEl) headerObserver.unobserve(headerEl);\n+      otherEls.forEach((el) => generalObserver.unobserve(el!));\n+    };\n+  }, [t]);\n+  ;\n+\n+  const appBar = (\n+    <LandingAppBar\n+      logoSrc=\"/assets/logo.svg\"\n+      logoWidth=\"169px\"\n+      logoHeight=\"64px\"\n+      isShowLanguageSwitcher={true}\n+      navLinks={[\n+        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n+        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n+        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n+        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n+      ]}\n+      onNavigate={scrollToTargetId}\n+    />\n+  );\n+\n+  const sections = [\n+    {\n+      id: \"header\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <HeaderBlock\n+          title={t.headerTitle}\n+          subtitle={t.headerSubtitle}\n+          downloadLabel={t.download}\n+          downloadLink={downloadLinks.companyProfile[lang]}\n+        />\n+      ),\n+    },\n+    // {\n+    //   id: '3d',\n+    //   $backgroundColor: AppColors.background,\n+    //   content: (\n+    //     <Container3D\n+    //     />\n+    //   ),\n+    // },\n+    {\n+      id: \"firstMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <FirstMapBlock label={t.firstMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"partner\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <>\n+          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n+          <Partner\n+            title1={t.partner.title1}\n+            title2={t.partner.title2}\n+            subtitle={t.partner.subtitle}\n+            tabs={t.partner.tabs}\n+            slides={t.partner.slides}\n+            downloadText={t.partner.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Partner\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"rolling\",\n+      $backgroundColor: AppColors.background,\n+      content: <Rolling />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"consulting\",\n+      $backgroundColor: AppColors.surface,\n+      content: (\n+        <Consulting\n+          title={t.consulting.title}\n+          descriptions={t.consulting.descriptions}\n+          downloadText={t.consulting.downloadText}\n+          gridHeaders={t.consulting.gridHeaders}\n+          gridContents={t.consulting.gridContents}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"design\",\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <>\n+          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n+          <DesignBlock\n+            title={t.design.title}\n+            tabs={t.design.tabs}\n+            tabNumbers={t.design.tabNumbers}\n+            slides={t.design.slides}\n+            downloadText={t.design.downloadText}\n+            onEnterSection={(index, tab) => {\n+              setCurrentSection(\"Design\");\n+              if (isAutoScrollingRef.current) return;\n+              void logSectionView(\"Design\", `스크롤: ${tab}`);\n+            }}\n+          />\n+        </>\n+      ),\n+    },\n+    {\n+      id: \"secondMap\",\n+      $backgroundColor: AppColors.background,\n+      content: <SecondMapBlock label={t.secondMap.label} />,\n+      $zIndex: 1001,\n+      $isOverLayout: true,\n+    },\n+    {\n+      id: \"appblock\",\n+      $backgroundColor: AppColors.primary,\n+      content: (\n+        <AppBlock\n+          title={t.appBlock.title}\n+          description={t.appBlock.description}\n+        />\n+      ),\n+      $zIndex: 1001,\n+    },\n+    {\n+      id: \"community\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <CommunityBlock\n+          topLabel={t.departure}\n+          centerLabel={t.customNavigator.community}\n+          bottomLabel={t.customNavigator.portpolio}\n+          title={t.community.title}\n+          description={t.community.description}\n+          sectionTitle={t.community.section.title}\n+          sectionDescription={t.community.section.description}\n+          buttonText={t.community.section.buttonText}\n+          imageUrl=\"/assets/community.webp\"\n+          onButtonClick={() => {\n+            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n+          }}\n+          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"portfolio\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <PortfolioGrid\n+          title={t.portfolio.title}\n+          description={t.portfolio.description}\n+          topLabel={t.customNavigator.community}\n+          centerLabel={t.customNavigator.portpolio}\n+          bottomLabel={t.customNavigator.member}\n+          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"members\",\n+      showFloatingBox: true,\n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <MembersTabSection\n+          title={t.membersSection.title}\n+          description={t.membersSection.description}\n+          memberCards={t.memberCards}\n+          topLabel={t.customNavigator.portpolio}\n+          centerLabel={t.customNavigator.member}\n+          bottomLabel={t.customNavigator.review}\n+          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"video\",\n+      $backgroundColor: AppColors.background,\n+      showFloatingBox: true,\n+       \n+      content: (\n+        <VideoGrid\n+          topLabel={t.customNavigator.member}\n+          centerLabel={t.customNavigator.review}\n+          bottomLabel={t.customNavigator.ai}\n+          title={t.reviewSection.title}\n+          description={t.reviewSection.description}\n+          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"event\", \"video\", \"event\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"event\",\n+      $backgroundColor: AppColors.background,\n+      content: <EventBlock\n+      slides={t.event.slides}\n+      buttonTitle={t.event.buttonTitle}\n+      topLabel={t.customNavigator.review}\n+      centerLabel={t.customNavigator.event}\n+      bottomLabel={t.customNavigator.ai}\n+      title={''}\n+      description={''}\n+      onTopArrowClick={() => scrollToTargetId(\"video\", \"event\", \"video\")}\n+      onBottomArrowClick={() => scrollToTargetId(\"ai\", \"event\", \"ai\")}\n+    />\n+    ,\n+    },\n+    \n+    {\n+      id: \"ai\",\n+      $backgroundColor: AppColors.background, // 또는 background로도 가능\n+      content: (\n+        <AIBlock\n+          topLabel={t.customNavigator.event}\n+          centerLabel={t.customNavigator.ai}\n+          bottomLabel={t.arrival}\n+          title={t.aiBlock.title}\n+          description={t.aiBlock.description}\n+          buttonText={t.aiBlock.buttonTitle}\n+           buttonHeader={t.aiBlock.buttonHeader}\n+          buttonDescription={t.aiBlock.buttonDescription}\n+          onTopArrowClick={() => scrollToTargetId(\"event\", \"ai\", \"event\")}\n+          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n+        />\n+      ),\n+    },\n+    \n+    {\n+      id: \"contact\",\n+      \n+      $backgroundColor: AppColors.background,\n+      content: (\n+        <ContactSection\n+          topLabel={t.customNavigator.ai}\n+          centerLabel={t.arrival}\n+          bottomLabel={t.arrival}\n+          title={t.contract.title}\n+          description={t.contract.description}\n+          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n+        />\n+      ),\n+    },\n+    {\n+      id: \"footer\",\n+      $backgroundColor: AppColors.background,\n+      content: <Footer />,\n+    },\n+  ];\n+\n+  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n+}\n"
                },
                {
                    "date": 1747726907924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -462,8 +462,9 @@\n           bottomLabel={t.arrival}\n           title={t.aiBlock.title}\n           description={t.aiBlock.description}\n           buttonText={t.aiBlock.buttonTitle}\n+          buttonLink={t.aiBlock.buttonLink}\n            buttonHeader={t.aiBlock.buttonHeader}\n           buttonDescription={t.aiBlock.buttonDescription}\n           onTopArrowClick={() => scrollToTargetId(\"event\", \"ai\", \"event\")}\n           onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n@@ -494,504 +495,4 @@\n   ];\n \n   return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n }\n-\"use client\";\n-\n-import React, { useEffect, useRef, useState } from \"react\";\n-import { usePathname } from \"next/navigation\";\n-import { useLang } from \"@/contexts/LangContext\";\n-import { dictionary } from \"@/lib/i18n/lang\";\n-import { downloadLinks } from \"@/lib/i18n/downloadLinks\";\n-import ResponsiveView from \"@/layout/ResponsiveView\";\n-import DesignWeb from \"@/block/DesignWeb\";\n-import DesignMobile from \"@/block/DesignMobile\";\n-import LandingAppBar from \"@/components/LandingAppBar\";\n-import LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n-\n-import HeaderBlock from \"@/block/HeaderBlock\";\n-import FirstMapBlock from \"@/block/FirstMapBlock\";\n-import Partner from \"@/block/Partner\";\n-import Rolling from \"@/block/Rolling\";\n-import SecondMapBlock from \"@/block/SecondMapBlock\";\n-import { CommunityBlock } from \"@/block/CommunityBlock\";\n-import { PortfolioGrid } from \"@/block/PortfolioGrid\";\n-import { MembersTabSection } from \"@/block/MembersTabSection\";\n-import { VideoGrid } from \"@/block/VideoGrid\";\n-import { ContactSection } from \"@/components/Landing/ContactSection\";\n-import { Footer } from \"@/block/Footer\";\n-\n-import { AppColors } from \"@/styles/colors\";\n-import AppBlock from \"@/block/AppBlock\";\n-import DesignBlock from \"@/block/Design\";\n-import Consulting from \"@/block/Consulting\";\n-import { v4 as uuidv4 } from \"uuid\";\n-import { userStamp } from \"@/lib/api/user/api\";\n-import { AIBlock } from \"@/block/AIBlock\";\n-import EventBlock from \"@/block/EventBlock\";\n-import Container3D from \"@/block/Container3D\";\n-\n-const getOrCreateLogId = () => {\n-  const logIdKey = \"logId\";\n-  const logId = localStorage.getItem(logIdKey);\n-  if (logId) return logId;\n-  const newLogId = uuidv4();\n-  localStorage.setItem(logIdKey, newLogId);\n-  return newLogId;\n-};\n-\n-const sectionMap: Record<string, { content: string; memo: string }> = {\n-  header: { content: \"Header\", memo: \"header\" },\n-  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n-  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n-  consulting: { content: \"Consulting\", memo: \"consulting\" },\n-  // design: { content: \"Design\", memo: \"design\" },\n-  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n-  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n-  community: { content: \"Community\", memo: \"community\" },\n-  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n-  members: { content: \"Members\", memo: \"members\" },\n-  video: { content: \"Video\", memo: \"video\" },\n-  ai: { content: \"AI\", memo: \"ai\" },\n-  contact: { content: \"Contact\", memo: \"contact\" },\n-};\n-\n-const logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"스크롤\",\n-      content,\n-      memo,\n-      ...(firstYn ? { firstYn: \"Y\" } : {}), \n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-\n-const logButtonClick = async (content: string, memo: string) => {\n-  try {\n-    const res = await userStamp({\n-      uuid: getOrCreateLogId(),\n-      category: \"버튼\",\n-      content,\n-      memo,\n-    });\n-  } catch (e) {\n-  }\n-};\n-\n-export default function HomePage() {\n-  const { lang } = useLang();\n-  const t = dictionary[lang];\n-  const pathname = usePathname();\n-  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n-  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n-  const isAutoScrollingRef = useRef(false);\n-\n-  const startAutoScroll = () => {\n-    setIsAutoScrolling(true);\n-    isAutoScrollingRef.current = true;\n-  };\n-\n-  const endAutoScroll = () => {\n-    setIsAutoScrolling(false);\n-    isAutoScrollingRef.current = false;\n-  };\n-\n-  const aliasMap: Record<string, string> = {\n-    about: \"header\",\n-    portfolio: \"portfolio\",\n-    contact: \"contact\",\n-    service: \"community\",\n-    market: \"market\",\n-    estimate: \"ai\",  \n-  };\n-\n-  useEffect(() => {\n-    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n-    const targetId = aliasMap[path];\n-    if (targetId) {\n-      startAutoScroll();\n-      const el = document.getElementById(targetId);\n-      if (el) {\n-        requestAnimationFrame(() => {\n-          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-        });\n-      }\n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-      return () => {\n-        clearTimeout(scrollTimer);\n-        window.removeEventListener(\"scroll\", handleScroll);\n-      };\n-    }\n-  }, []);\n-\n-  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n-    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n-    if (targetId === \"AI Estimate\") {\n-      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n-      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n-      return;\n-    }\n-  \n-    const element = document.getElementById(targetId);\n-    if (element) {\n-      startAutoScroll();\n-      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n-  \n-      let scrollTimer: ReturnType<typeof setTimeout>;\n-      const handleScroll = () => {\n-        clearTimeout(scrollTimer);\n-        scrollTimer = setTimeout(() => {\n-          endAutoScroll();\n-          window.removeEventListener(\"scroll\", handleScroll);\n-        }, 300);\n-      };\n-      window.addEventListener(\"scroll\", handleScroll);\n-  \n-      void logButtonClick(content, memo);\n-    }\n-  };\n-  \n-  \n-\n-  const firstHeaderLogged = useRef(false);\n-\n-  useEffect(() => {\n-    let lastScrollY = window.scrollY;\n-    let lastLoggedId = \"\";\n-  \n-    const headerObserver = new IntersectionObserver(\n-      (entries) => {\n-        const entry = entries[0];\n-        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n-          setCurrentSection(\"Header\");\n-  \n-          if (!firstHeaderLogged.current) {\n-            firstHeaderLogged.current = true;\n-            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n-          } else {\n-            logSectionView(\"Header\", \"header\");\n-          }\n-        }\n-      },\n-      { threshold: 0 }\n-    );\n-  \n-    // 👇 일반 섹션용 Observer\n-    const generalObserver = new IntersectionObserver(\n-      (entries) => {\n-        entries.forEach((entry) => {\n-          const id = entry.target.id;\n-          const isVisible = entry.isIntersecting;\n-          const currentScrollY = window.scrollY;\n-          const isScrollingDown = currentScrollY > lastScrollY;\n-          lastScrollY = currentScrollY;\n-  \n-          if (\n-            id !== \"header\" &&\n-            isVisible &&\n-            isScrollingDown &&\n-            id !== lastLoggedId &&\n-            !isAutoScrollingRef.current\n-          ) {\n-            lastLoggedId = id;\n-            const section = sectionMap[id];\n-            if (section) {\n-              setCurrentSection(section.content);\n-              logSectionView(section.content, section.memo);\n-            }\n-          }\n-        });\n-      },\n-      { threshold: 0.3 }\n-    );\n-  \n-    const headerEl = document.getElementById(\"header\");\n-    if (headerEl) headerObserver.observe(headerEl);\n-  \n-    const otherEls = Object.keys(sectionMap)\n-      .filter((id) => id !== \"header\")\n-      .map((id) => document.getElementById(id))\n-      .filter(Boolean);\n-  \n-    otherEls.forEach((el) => generalObserver.observe(el!));\n-  \n-    return () => {\n-      if (headerEl) headerObserver.unobserve(headerEl);\n-      otherEls.forEach((el) => generalObserver.unobserve(el!));\n-    };\n-  }, [t]);\n-  ;\n-\n-  const appBar = (\n-    <LandingAppBar\n-      logoSrc=\"/assets/logo.svg\"\n-      logoWidth=\"169px\"\n-      logoHeight=\"64px\"\n-      isShowLanguageSwitcher={true}\n-      navLinks={[\n-        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n-        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n-        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n-        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n-      ]}\n-      onNavigate={scrollToTargetId}\n-    />\n-  );\n-\n-  const sections = [\n-    {\n-      id: \"header\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <HeaderBlock\n-          title={t.headerTitle}\n-          subtitle={t.headerSubtitle}\n-          downloadLabel={t.download}\n-          downloadLink={downloadLinks.companyProfile[lang]}\n-        />\n-      ),\n-    },\n-    // {\n-    //   id: '3d',\n-    //   $backgroundColor: AppColors.background,\n-    //   content: (\n-    //     <Container3D\n-    //     />\n-    //   ),\n-    // },\n-    {\n-      id: \"firstMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <FirstMapBlock label={t.firstMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"partner\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <>\n-          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n-          <Partner\n-            title1={t.partner.title1}\n-            title2={t.partner.title2}\n-            subtitle={t.partner.subtitle}\n-            tabs={t.partner.tabs}\n-            slides={t.partner.slides}\n-            downloadText={t.partner.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Partner\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"rolling\",\n-      $backgroundColor: AppColors.background,\n-      content: <Rolling />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"consulting\",\n-      $backgroundColor: AppColors.surface,\n-      content: (\n-        <Consulting\n-          title={t.consulting.title}\n-          descriptions={t.consulting.descriptions}\n-          downloadText={t.consulting.downloadText}\n-          gridHeaders={t.consulting.gridHeaders}\n-          gridContents={t.consulting.gridContents}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"design\",\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <>\n-          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n-          <DesignBlock\n-            title={t.design.title}\n-            tabs={t.design.tabs}\n-            tabNumbers={t.design.tabNumbers}\n-            slides={t.design.slides}\n-            downloadText={t.design.downloadText}\n-            onEnterSection={(index, tab) => {\n-              setCurrentSection(\"Design\");\n-              if (isAutoScrollingRef.current) return;\n-              void logSectionView(\"Design\", `스크롤: ${tab}`);\n-            }}\n-          />\n-        </>\n-      ),\n-    },\n-    {\n-      id: \"secondMap\",\n-      $backgroundColor: AppColors.background,\n-      content: <SecondMapBlock label={t.secondMap.label} />,\n-      $zIndex: 1001,\n-      $isOverLayout: true,\n-    },\n-    {\n-      id: \"appblock\",\n-      $backgroundColor: AppColors.primary,\n-      content: (\n-        <AppBlock\n-          title={t.appBlock.title}\n-          description={t.appBlock.description}\n-        />\n-      ),\n-      $zIndex: 1001,\n-    },\n-    {\n-      id: \"community\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <CommunityBlock\n-          topLabel={t.departure}\n-          centerLabel={t.customNavigator.community}\n-          bottomLabel={t.customNavigator.portpolio}\n-          title={t.community.title}\n-          description={t.community.description}\n-          sectionTitle={t.community.section.title}\n-          sectionDescription={t.community.section.description}\n-          buttonText={t.community.section.buttonText}\n-          imageUrl=\"/assets/community.webp\"\n-          onButtonClick={() => {\n-            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"portfolio\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <PortfolioGrid\n-          title={t.portfolio.title}\n-          description={t.portfolio.description}\n-          topLabel={t.customNavigator.community}\n-          centerLabel={t.customNavigator.portpolio}\n-          bottomLabel={t.customNavigator.member}\n-          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"members\",\n-      showFloatingBox: true,\n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <MembersTabSection\n-          title={t.membersSection.title}\n-          description={t.membersSection.description}\n-          memberCards={t.memberCards}\n-          topLabel={t.customNavigator.portpolio}\n-          centerLabel={t.customNavigator.member}\n-          bottomLabel={t.customNavigator.review}\n-          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"video\",\n-      $backgroundColor: AppColors.background,\n-      showFloatingBox: true,\n-       \n-      content: (\n-        <VideoGrid\n-          topLabel={t.customNavigator.member}\n-          centerLabel={t.customNavigator.review}\n-          bottomLabel={t.customNavigator.ai}\n-          title={t.reviewSection.title}\n-          description={t.reviewSection.description}\n-          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"event\", \"video\", \"event\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"event\",\n-      $backgroundColor: AppColors.background,\n-      content: <EventBlock\n-      slides={t.event.slides}\n-      buttonTitle={t.event.buttonTitle}\n-      topLabel={t.customNavigator.review}\n-      centerLabel={t.customNavigator.event}\n-      bottomLabel={t.customNavigator.ai}\n-      title={''}\n-      description={''}\n-      onTopArrowClick={() => scrollToTargetId(\"video\", \"event\", \"video\")}\n-      onBottomArrowClick={() => scrollToTargetId(\"ai\", \"event\", \"ai\")}\n-    />\n-    ,\n-    },\n-    \n-    {\n-      id: \"ai\",\n-      $backgroundColor: AppColors.background, // 또는 background로도 가능\n-      content: (\n-        <AIBlock\n-          topLabel={t.customNavigator.event}\n-          centerLabel={t.customNavigator.ai}\n-          bottomLabel={t.arrival}\n-          title={t.aiBlock.title}\n-          description={t.aiBlock.description}\n-          buttonText={t.aiBlock.buttonTitle}\n-           buttonHeader={t.aiBlock.buttonHeader}\n-          buttonDescription={t.aiBlock.buttonDescription}\n-          onButtonClick={() => {\n-            window.open(t.aiBlock.buttonLink, \"_blank\");\n-          }}\n-          onTopArrowClick={() => scrollToTargetId(\"event\", \"ai\", \"event\")}\n-          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n-        />\n-      ),\n-    },\n-    \n-    {\n-      id: \"contact\",\n-      \n-      $backgroundColor: AppColors.background,\n-      content: (\n-        <ContactSection\n-          topLabel={t.customNavigator.ai}\n-          centerLabel={t.arrival}\n-          bottomLabel={t.arrival}\n-          title={t.contract.title}\n-          description={t.contract.description}\n-          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n-        />\n-      ),\n-    },\n-    {\n-      id: \"footer\",\n-      $backgroundColor: AppColors.background,\n-      content: <Footer />,\n-    },\n-  ];\n-\n-  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n-}\n"
                }
            ],
            "date": 1747715821566,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { usePathname } from \"next/navigation\";\nimport { useLang } from \"@/contexts/LangContext\";\nimport { dictionary } from \"@/lib/i18n/lang\";\nimport { downloadLinks } from \"@/lib/i18n/downloadLinks\";\nimport ResponsiveView from \"@/layout/ResponsiveView\";\nimport DesignWeb from \"@/block/DesignWeb\";\nimport DesignMobile from \"@/block/DesignMobile\";\nimport LandingAppBar from \"@/components/LandingAppBar\";\nimport LandingBaseWrapper from \"@/layout/LandingBaseWrapper\";\n\nimport HeaderBlock from \"@/block/HeaderBlock\";\nimport FirstMapBlock from \"@/block/FirstMapBlock\";\nimport Partner from \"@/block/Partner\";\nimport Rolling from \"@/block/Rolling\";\nimport SecondMapBlock from \"@/block/SecondMapBlock\";\nimport { CommunityBlock } from \"@/block/CommunityBlock\";\nimport { PortfolioGrid } from \"@/block/PortfolioGrid\";\nimport { MembersTabSection } from \"@/block/MembersTabSection\";\nimport { VideoGrid } from \"@/block/VideoGrid\";\nimport { ContactSection } from \"@/components/Landing/ContactSection\";\nimport { Footer } from \"@/block/Footer\";\n\nimport { AppColors } from \"@/styles/colors\";\nimport AppBlock from \"@/block/AppBlock\";\nimport DesignBlock from \"@/block/Design\";\nimport Consulting from \"@/block/Consulting\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { userStamp } from \"@/lib/api/user/api\";\nimport { AIBlock } from \"@/block/AIBlock\";\n\nconst getOrCreateLogId = () => {\n  const logIdKey = \"logId\";\n  const logId = localStorage.getItem(logIdKey);\n  if (logId) return logId;\n  const newLogId = uuidv4();\n  localStorage.setItem(logIdKey, newLogId);\n  return newLogId;\n};\n\nconst sectionMap: Record<string, { content: string; memo: string }> = {\n  header: { content: \"Header\", memo: \"header\" },\n  // partner: { content: \"Partner\", memo: \"anti_drone\" },\n  // \"partner-sensor\": { content: \"Partner\", memo: \"partner\" },\n  consulting: { content: \"Consulting\", memo: \"consulting\" },\n  // design: { content: \"Design\", memo: \"design\" },\n  // \"design-sensor\": { content: \"Design\", memo: \"design\" },\n  appblock: { content: \"AppBlock\", memo: \"appblock\" },\n  community: { content: \"Community\", memo: \"community\" },\n  portfolio: { content: \"Portfolio\", memo: \"portfolio\" },\n  members: { content: \"Members\", memo: \"members\" },\n  video: { content: \"Video\", memo: \"video\" },\n  contact: { content: \"Contact\", memo: \"contact\" },\n};\n\nconst logSectionView = async (content: string, memo: string, firstYn?: boolean) => {\n  try {\n    const res = await userStamp({\n      uuid: getOrCreateLogId(),\n      category: \"스크롤\",\n      content,\n      memo,\n      ...(firstYn ? { firstYn: \"Y\" } : {}), \n    });\n  } catch (e) {\n  }\n};\n\n\nconst logButtonClick = async (content: string, memo: string) => {\n  try {\n    const res = await userStamp({\n      uuid: getOrCreateLogId(),\n      category: \"버튼\",\n      content,\n      memo,\n    });\n  } catch (e) {\n  }\n};\n\nexport default function HomePage() {\n  const { lang } = useLang();\n  const t = dictionary[lang];\n  const pathname = usePathname();\n  const [currentSection, setCurrentSection] = useState(t.nav[0]);\n  const [isAutoScrolling, setIsAutoScrolling] = useState(false);\n  const isAutoScrollingRef = useRef(false);\n\n  const startAutoScroll = () => {\n    setIsAutoScrolling(true);\n    isAutoScrollingRef.current = true;\n  };\n\n  const endAutoScroll = () => {\n    setIsAutoScrolling(false);\n    isAutoScrollingRef.current = false;\n  };\n\n  const aliasMap: Record<string, string> = {\n    about: \"header\",\n    portfolio: \"portfolio\",\n    contact: \"contact\",\n    service: \"community\",\n    market: \"market\",\n  };\n\n  useEffect(() => {\n    const path = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n    const targetId = aliasMap[path];\n    if (targetId) {\n      startAutoScroll();\n      const el = document.getElementById(targetId);\n      if (el) {\n        requestAnimationFrame(() => {\n          el.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        });\n      }\n      let scrollTimer: ReturnType<typeof setTimeout>;\n      const handleScroll = () => {\n        clearTimeout(scrollTimer);\n        scrollTimer = setTimeout(() => {\n          endAutoScroll();\n        }, 300);\n      };\n      window.addEventListener(\"scroll\", handleScroll);\n      return () => {\n        clearTimeout(scrollTimer);\n        window.removeEventListener(\"scroll\", handleScroll);\n      };\n    }\n  }, []);\n\n  const scrollToTargetId = (targetId: string, content: string, memo: string) => {\n    // 🔹 AI Estimate일 때는 스크롤 대신 새 창 열기\n    if (targetId === \"AI Estimate\") {\n      window.open(\"/ai\", \"_blank\", \"noopener,noreferrer\");\n      void logButtonClick(content, memo); // ✅ 스탬프는 동일하게 찍음\n      return;\n    }\n  \n    const element = document.getElementById(targetId);\n    if (element) {\n      startAutoScroll();\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n  \n      let scrollTimer: ReturnType<typeof setTimeout>;\n      const handleScroll = () => {\n        clearTimeout(scrollTimer);\n        scrollTimer = setTimeout(() => {\n          endAutoScroll();\n          window.removeEventListener(\"scroll\", handleScroll);\n        }, 300);\n      };\n      window.addEventListener(\"scroll\", handleScroll);\n  \n      void logButtonClick(content, memo);\n    }\n  };\n  \n  \n\n  const firstHeaderLogged = useRef(false);\n\n  useEffect(() => {\n    let lastScrollY = window.scrollY;\n    let lastLoggedId = \"\";\n  \n    const headerObserver = new IntersectionObserver(\n      (entries) => {\n        const entry = entries[0];\n        if (entry.isIntersecting && !isAutoScrollingRef.current) {\n          setCurrentSection(\"Header\");\n  \n          if (!firstHeaderLogged.current) {\n            firstHeaderLogged.current = true;\n            logSectionView(\"Header\", \"header\", true); // 👈 firstYn: true 전달\n          } else {\n            logSectionView(\"Header\", \"header\");\n          }\n        }\n      },\n      { threshold: 0 }\n    );\n  \n    // 👇 일반 섹션용 Observer\n    const generalObserver = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          const id = entry.target.id;\n          const isVisible = entry.isIntersecting;\n          const currentScrollY = window.scrollY;\n          const isScrollingDown = currentScrollY > lastScrollY;\n          lastScrollY = currentScrollY;\n  \n          if (\n            id !== \"header\" &&\n            isVisible &&\n            isScrollingDown &&\n            id !== lastLoggedId &&\n            !isAutoScrollingRef.current\n          ) {\n            lastLoggedId = id;\n            const section = sectionMap[id];\n            if (section) {\n              setCurrentSection(section.content);\n              logSectionView(section.content, section.memo);\n            }\n          }\n        });\n      },\n      { threshold: 0.3 }\n    );\n  \n    const headerEl = document.getElementById(\"header\");\n    if (headerEl) headerObserver.observe(headerEl);\n  \n    const otherEls = Object.keys(sectionMap)\n      .filter((id) => id !== \"header\")\n      .map((id) => document.getElementById(id))\n      .filter(Boolean);\n  \n    otherEls.forEach((el) => generalObserver.observe(el!));\n  \n    return () => {\n      if (headerEl) headerObserver.unobserve(headerEl);\n      otherEls.forEach((el) => generalObserver.unobserve(el!));\n    };\n  }, [t]);\n  ;\n\n  const appBar = (\n    <LandingAppBar\n      logoSrc=\"/assets/logo.svg\"\n      logoWidth=\"169px\"\n      logoHeight=\"64px\"\n      isShowLanguageSwitcher={true}\n      navLinks={[\n        { label: t.nav[0], targetId: \"partner\", content: \"appbar\", memo: \"partner\" },\n        { label: t.nav[1], targetId: \"portfolio\", content: \"appbar\", memo: \"portfolio\" },\n        { label: t.nav[2], targetId: \"members\", content: \"appbar\", memo: \"members\" },\n        { label: t.nav[3], targetId: \"AI Estimate\", content: \"appbar\", memo: \"ai pae\" },\n      ]}\n      onNavigate={scrollToTargetId}\n    />\n  );\n\n  const sections = [\n    {\n      id: \"header\",\n      $backgroundColor: AppColors.background,\n      content: (\n        <HeaderBlock\n          title={t.headerTitle}\n          subtitle={t.headerSubtitle}\n          downloadLabel={t.download}\n          downloadLink={downloadLinks.companyProfile[lang]}\n        />\n      ),\n    },\n    {\n      id: \"firstMap\",\n      $backgroundColor: AppColors.background,\n      content: <FirstMapBlock label={t.firstMap.label} />,\n      $zIndex: 1001,\n      $isOverLayout: true,\n    },\n    {\n      id: \"partner\",\n      $backgroundColor: AppColors.surface,\n      content: (\n        <>\n          {/* <div id=\"partner-sensor\" style={{ height: \"1px\" }} /> */}\n          <Partner\n            title1={t.partner.title1}\n            title2={t.partner.title2}\n            subtitle={t.partner.subtitle}\n            tabs={t.partner.tabs}\n            slides={t.partner.slides}\n            downloadText={t.partner.downloadText}\n            onEnterSection={(index, tab) => {\n              setCurrentSection(\"Partner\");\n              if (isAutoScrollingRef.current) return;\n              void logSectionView(\"Partner\", `스크롤: ${tab}`);\n            }}\n          />\n        </>\n      ),\n      $zIndex: 1001,\n    },\n    {\n      id: \"rolling\",\n      $backgroundColor: AppColors.background,\n      content: <Rolling />,\n      $zIndex: 1001,\n      $isOverLayout: true,\n    },\n    {\n      id: \"consulting\",\n      $backgroundColor: AppColors.surface,\n      content: (\n        <Consulting\n          title={t.consulting.title}\n          descriptions={t.consulting.descriptions}\n          downloadText={t.consulting.downloadText}\n          gridHeaders={t.consulting.gridHeaders}\n          gridContents={t.consulting.gridContents}\n        />\n      ),\n      $zIndex: 1001,\n    },\n    {\n      id: \"design\",\n      $backgroundColor: AppColors.background,\n      content: (\n        <>\n          <div id=\"design-sensor\" style={{ height: \"1px\" }} />\n          <DesignBlock\n            title={t.design.title}\n            tabs={t.design.tabs}\n            tabNumbers={t.design.tabNumbers}\n            slides={t.design.slides}\n            downloadText={t.design.downloadText}\n            onEnterSection={(index, tab) => {\n              setCurrentSection(\"Design\");\n              if (isAutoScrollingRef.current) return;\n              void logSectionView(\"Design\", `스크롤: ${tab}`);\n            }}\n          />\n        </>\n      ),\n    },\n    {\n      id: \"secondMap\",\n      $backgroundColor: AppColors.background,\n      content: <SecondMapBlock label={t.secondMap.label} />,\n      $zIndex: 1001,\n      $isOverLayout: true,\n    },\n    {\n      id: \"appblock\",\n      $backgroundColor: AppColors.primary,\n      content: (\n        <AppBlock\n          title={t.appBlock.title}\n          description={t.appBlock.description}\n        />\n      ),\n      $zIndex: 1001,\n    },\n    {\n      id: \"community\",\n      showFloatingBox: true,\n      $backgroundColor: AppColors.background,\n      content: (\n        <CommunityBlock\n          topLabel={t.departure}\n          centerLabel={t.customNavigator.community}\n          bottomLabel={t.customNavigator.portpolio}\n          title={t.community.title}\n          description={t.community.description}\n          sectionTitle={t.community.section.title}\n          sectionDescription={t.community.section.description}\n          buttonText={t.community.section.buttonText}\n          imageUrl=\"/assets/community.webp\"\n          onButtonClick={() => {\n            window.open(\"https://open.kakao.com/o/g0u3dOrc\", \"_blank\");\n          }}\n          onTopArrowClick={() => scrollToTargetId(\"header\", \"community\", \"header\")}\n          onBottomArrowClick={() => scrollToTargetId(\"portfolio\", \"community\", \"portfolio\")}\n        />\n      ),\n    },\n    {\n      id: \"portfolio\",\n      showFloatingBox: true,\n      $backgroundColor: AppColors.background,\n      content: (\n        <PortfolioGrid\n          title={t.portfolio.title}\n          description={t.portfolio.description}\n          topLabel={t.customNavigator.community}\n          centerLabel={t.customNavigator.portpolio}\n          bottomLabel={t.customNavigator.member}\n          onTopArrowClick={() => scrollToTargetId(\"community\", \"portfolio\", \"community\")}\n          onBottomArrowClick={() => scrollToTargetId(\"members\", \"portfolio\", \"members\")}\n        />\n      ),\n    },\n    {\n      id: \"members\",\n      showFloatingBox: true,\n      $backgroundColor: AppColors.background,\n      content: (\n        <MembersTabSection\n          title={t.membersSection.title}\n          description={t.membersSection.description}\n          memberCards={t.memberCards}\n          topLabel={t.customNavigator.portpolio}\n          centerLabel={t.customNavigator.member}\n          bottomLabel={t.customNavigator.review}\n          onTopArrowClick={() => scrollToTargetId(\"portfolio\", \"members\", \"portfolio\")}\n          onBottomArrowClick={() => scrollToTargetId(\"video\", \"members\", \"video\")}\n        />\n      ),\n    },\n    {\n      id: \"video\",\n      $backgroundColor: AppColors.background,\n      showFloatingBox: true,\n       \n      content: (\n        <VideoGrid\n          topLabel={t.customNavigator.member}\n          centerLabel={t.customNavigator.review}\n          bottomLabel={t.arrival}\n          title={t.reviewSection.title}\n          description={t.reviewSection.description}\n          onTopArrowClick={() => scrollToTargetId(\"members\", \"video\", \"members\")}\n          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"video\", \"contact\")}\n        />\n      ),\n    },\n    {\n      id: \"ai\",\n      $backgroundColor: AppColors.surface, // 또는 background로도 가능\n      content: (\n        <AIBlock\n          topLabel={t.reviewSection.title}\n          centerLabel=\"AI 견적서\"\n          bottomLabel={t.arrival}\n          title={t.appBlock.title}\n          description={t.appBlock.description}\n          sectionTitle={t.appBlock.buttonHeader}\n          sectionDescription={t.appBlock.buttonDescription}\n          imageUrl=\"/assets/phone_frame.svg\"\n          buttonText={t.appBlock.buttonTitle}\n          onButtonClick={() => {\n            window.open(t.appBlock.buttonLink, \"_blank\");\n          }}\n          onTopArrowClick={() => scrollToTargetId(\"video\", \"ai\", \"video\")}\n          onBottomArrowClick={() => scrollToTargetId(\"contact\", \"ai\", \"contact\")}\n        />\n      ),\n    },\n    \n    {\n      id: \"contact\",\n      \n      $backgroundColor: AppColors.background,\n      content: (\n        <ContactSection\n          topLabel={t.customNavigator.review}\n          centerLabel={t.arrival}\n          bottomLabel={t.arrival}\n          title={t.contract.title}\n          description={t.contract.description}\n          onTopArrowClick={() => scrollToTargetId(\"video\", \"contact\", \"video\")}\n        />\n      ),\n    },\n    {\n      id: \"footer\",\n      $backgroundColor: AppColors.background,\n      content: <Footer />,\n    },\n  ];\n\n  return <LandingBaseWrapper sections={sections} appBar={appBar} />;\n}\n"
        }
    ]
}