{
    "sourceFile": "src/app/cms/adminMng/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
<<<<<<< HEAD
            "activePatchIndex": 3,
=======
            "activePatchIndex": 2,
>>>>>>> f1a9463f68af677081887ca1da9e0fa8025a9cbc
            "patches": [
                {
                    "date": 1747728259867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747728354146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,13 +210,16 @@\n         emailYn,\n         smsYn,\n       });\n   \n-      toast.success('관리자가 성공적으로 등록되었습니다.');\n-      setIsPopupOpen(false); // 팝업 닫기\n-      listRef.current?.refetch();\n-  \n-      // TODO: 목록 리프레시 필요 시 fetchData 다시 호출하거나 상태 갱신\n+      // 성공 메시지 확인\n+      if (response?.[0]?.message === 'success') {\n+        toast.success('관리자가 성공적으로 등록되었습니다.');\n+        setIsPopupOpen(false); // 팝업 닫기\n+        listRef.current?.refetch(); // 목록 리프레시\n+      } else {\n+        toast.error(response?.[0]?.message || '관리자 등록에 실패했습니다.');\n+      }\n     } catch (error: any) {\n       toast.error(error?.message || '관리자 등록에 실패했습니다.');\n     }\n   };\n"
                },
                {
<<<<<<< HEAD
                    "date": 1747730205067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,26 +14,10 @@\n import { AppColors } from '@/styles/colors';\n import { Validators } from '@/lib/utils/validators';\n import { toast, ToastContainer } from 'react-toastify';\n import { adminCreate } from '@/lib/api/admin';\n-import Switch from '@/components/Switch';\n-import { SwitchInput } from '@/components/SwitchInput';\n \n-const SwitchRow = styled.div`\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  margin: 12px 0;\n-`;\n \n-const SwitchLabel = styled.label`\n-  font-size: 16px;\n-  font-weight: 500;\n-  color: black;\n-`;\n-\n-\n-\n type AdminUser = {\n   adminId: string;\n   name: string;\n   email: string;\n@@ -80,38 +64,38 @@\n   justify-content: space-evenly;\n `;\n \n const RegisterButton = styled(ActionButton)<{ $themeMode: 'light' | 'dark' }>`\n-  background: ${({ $themeMode }) => ($themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText)};\n-  color: ${({ $themeMode }) => ($themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary)};\n+  background: ${({ $themeMode }) => ($themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary)};\n+  color: ${({ $themeMode }) => ($themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText)};\n   border: none;\n   &:hover:not(:disabled) {\n     background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#e8e8e8' : '#424451')};\n   }\n `;\n \n-// const SwitchButton = styled.div<{ checked: boolean; readOnly?: boolean }>`\n-//   display: inline-block;\n-//   margin: 0 auto;\n-//   width: 40px;\n-//   height: 20px;\n-//   background-color: ${({ checked }) => (checked ? '#4EFF63' : '#D2D3D7')};\n-//   border-radius: 20px;\n-//   position: relative;\n-//   cursor: ${({ readOnly }) => (readOnly ? 'default' : 'pointer')};\n-//   transition: background-color 0.3s;\n-//   &::before {\n-//     content: '';\n-//     position: absolute;\n-//     top: 2px;\n-//     left: ${({ checked }) => (checked ? '20px' : '2px')};\n-//     width: 16px;\n-//     height: 16px;\n-//     background-color: white;\n-//     border-radius: 50%;\n-//     transition: left 0.3s;\n-//   }\n-// `;\n+const SwitchButton = styled.div<{ checked: boolean; readOnly?: boolean }>`\n+  display: inline-block;\n+  margin: 0 auto;\n+  width: 40px;\n+  height: 20px;\n+  background-color: ${({ checked }) => (checked ? '#4EFF63' : '#D2D3D7')};\n+  border-radius: 20px;\n+  position: relative;\n+  cursor: ${({ readOnly }) => (readOnly ? 'default' : 'pointer')};\n+  transition: background-color 0.3s;\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    top: 2px;\n+    left: ${({ checked }) => (checked ? '20px' : '2px')};\n+    width: 16px;\n+    height: 16px;\n+    background-color: white;\n+    border-radius: 50%;\n+    transition: left 0.3s;\n+  }\n+`;\n \n const AdminMngPage: React.FC = () => {\n   const [selectedUser, setSelectedUser] = useState<Partial<AdminUser> | null>(null);\n \n@@ -121,9 +105,8 @@\n   const [email, setEmail] = useState('');\n   const [cellphone, setCellphone] = useState('');\n   const [emailYn, setEmailYn] = useState<'Y' | 'N'>('Y');\n   const [smsYn, setSmsYn] = useState<'Y' | 'N'>('Y');\n-  const [description, setDescription] = useState('');\n \n   const [idError, setIdError] = useState<string | null>(null);\n   const [pwdError, setPwdError] = useState<string | null>(null);\n   const [nameError, setNameError] = useState<string | null>(null);\n@@ -204,22 +187,19 @@\n         adminId: userId,\n         password,\n         name,\n         cellphone,\n-        description,\n+        description: '', // 필요 시 추후 추가\n         email,\n         emailYn,\n         smsYn,\n       });\n   \n-      // 성공 메시지 확인\n-      if (response?.[0]?.message === 'success') {\n-        toast.success('관리자가 성공적으로 등록되었습니다.');\n-        setIsPopupOpen(false); // 팝업 닫기\n-        listRef.current?.refetch(); // 목록 리프레시\n-      } else {\n-        toast.error(response?.[0]?.message || '관리자 등록에 실패했습니다.');\n-      }\n+      toast.success('관리자가 성공적으로 등록되었습니다.');\n+      setIsPopupOpen(false); // 팝업 닫기\n+      listRef.current?.refetch();\n+  \n+      // TODO: 목록 리프레시 필요 시 fetchData 다시 호출하거나 상태 갱신\n     } catch (error: any) {\n       toast.error(error?.message || '관리자 등록에 실패했습니다.');\n     }\n   };\n@@ -243,51 +223,48 @@\n \n   const columns: ColumnDefinition<AdminUser>[] = useMemo(\n     () => [\n       { header: 'No', accessor: 'no' },\n-      {\n-        header: '가입일',\n-        accessor: 'createdTime',\n-        sortable: true,\n-        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD') : '-',\n-      },\n-      {\n-        header: '최근접속',\n-        accessor: 'lastLoginTime',\n-        sortable: true,\n-        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n-      },\n+      { header: '아이디', accessor: 'adminId' },\n       { header: '이름', accessor: 'name' },\n-      { header: '아이디', accessor: 'adminId' },\n       { header: '이메일', accessor: 'email' },\n-      { header: '전화번호', accessor: 'cellphone' },\n+      { header: '연락처', accessor: 'cellphone' },\n       {\n-        header: 'SMS 수신',\n-        accessor: 'smsYn',\n+        header: '이메일 수신',\n+        accessor: 'emailYn',\n         formatter: (_value, row) => (\n-          <Switch\n-            checked={row.smsYn === 'Y'}\n-            onToggle={() =>\n-              handleDropdownChange(row.adminId, 'smsYn', row.smsYn === 'Y' ? 'N' : 'Y')\n+          <SwitchButton\n+            checked={row.emailYn === 'Y'}\n+            onClick={() =>\n+              handleDropdownChange(row.adminId, 'emailYn', row.emailYn === 'Y' ? 'N' : 'Y')\n             }\n           />\n         ),\n       },\n       {\n-        header: '메일 수신',\n-        accessor: 'emailYn',\n+        header: 'SMS 수신',\n+        accessor: 'smsYn',\n         formatter: (_value, row) => (\n-          <Switch\n-            checked={row.emailYn === 'Y'}\n-            onToggle={() =>\n-              handleDropdownChange(row.adminId, 'emailYn', row.emailYn === 'Y' ? 'N' : 'Y')\n+          <SwitchButton\n+            checked={row.smsYn === 'Y'}\n+            onClick={() =>\n+              handleDropdownChange(row.adminId, 'smsYn', row.smsYn === 'Y' ? 'N' : 'Y')\n             }\n           />\n         ),\n       },\n-      { header: '비고', accessor: 'description' },\n-   \n-\n+      {\n+        header: '마지막 로그인',\n+        accessor: 'lastLoginTime',\n+        sortable: true,\n+        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n+      },\n+      {\n+        header: '등록일',\n+        accessor: 'createdTime',\n+        sortable: true,\n+        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD') : '-',\n+      },\n     ],\n     [handleDropdownChange]\n   );\n \n@@ -314,24 +291,24 @@\n         enableSearch\n         enableDateFilter={false}\n         searchPlaceholder=\"이름, 이메일, 아이디 검색\"\n         onRowClick={handleRowClick}\n+        itemsPerPageOptions={[10, 20, 50]}\n         themeMode=\"light\"\n         renderHeaderActionButton={() => (\n           <RegisterButton $themeMode=\"light\" onClick={handleHeaderButtonClick}>\n             관리자 등록\n           </RegisterButton>\n         )}\n       />\n \n-      <CmsPopup  title='관리자등록' isOpen={isPopupOpen} onClose={closePopup}>\n+      <CmsPopup isOpen={isPopupOpen} onClose={closePopup}>\n         <FormContainer>\n-          <TextField radius='0' value={userId} label=\"* 아이디\" autoComplete='off' $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setUserId(e.target.value)} placeholder=\"영문자와 숫자를 포함한 6~20자\" errorMessage={idError ?? undefined} />\n-          <TextField radius='0' value={password} showSuffixIcon = {true} label=\"* 비밀번호\"  autoComplete=\"new-password\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setPassword(e.target.value)} placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\" isPasswordField ={true} errorMessage={pwdError ?? undefined} />\n-          <TextField radius='0' value={name} label=\"* 이름\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setName(e.target.value)} placeholder=\"이름을 입력하세요\" errorMessage={nameError ?? undefined} />\n-          <TextField radius='0' value={email} label=\"* 이메일\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setEmail(e.target.value)} placeholder=\"이메일 형식으로 입력하세요\" errorMessage={emailError ?? undefined} />\n+          <TextField value={userId} label=\"* 아이디\" autoComplete='off' $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setUserId(e.target.value)} placeholder=\"영문자와 숫자를 포함한 6~20자\" errorMessage={idError ?? undefined} />\n+          <TextField value={password} showSuffixIcon = {true} label=\"* 비밀번호\"  autoComplete=\"new-password\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setPassword(e.target.value)} placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\" isPasswordField ={true} errorMessage={pwdError ?? undefined} />\n+          <TextField value={name} label=\"* 이름\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setName(e.target.value)} placeholder=\"이름을 입력하세요\" errorMessage={nameError ?? undefined} />\n+          <TextField value={email} label=\"* 이메일\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setEmail(e.target.value)} placeholder=\"이메일 형식으로 입력하세요\" errorMessage={emailError ?? undefined} />\n           <TextField\n-          radius='0'\n   value={cellphone}\n   label=\"* 연락처\"\n   $labelPosition=\"horizontal\"\n   labelColor=\"black\"\n@@ -344,39 +321,10 @@\n   }}\n   placeholder=\"- 제외 하고 입력하세요\"\n   errorMessage={cellphoneError ?? undefined}\n />\n-      \n-<SwitchInput\n-  label=\"이메일 수신\"\n-  value={emailYn}\n-  onChange={setEmailYn}\n-  $labelPosition=\"horizontal\"\n-  labelColor=\"black\"\n-/>\n-\n-<SwitchInput\n-  label=\"SMS 수신\"\n-  value={smsYn}\n-  onChange={setSmsYn}\n-  $labelPosition=\"horizontal\"\n-  labelColor=\"black\"\n-/>\n-\n-          <TextField\n-          radius='0'\n-  multiline\n-  minLines={4}\n-  maxLines={10}\n-  height=\"200px\"\n-  value={description}\n-  label=\"비고\"\n-  $labelPosition=\"horizontal\"\n-  labelColor=\"black\"\n-  onChange={(e) => setDescription(e.target.value)}\n-  placeholder=\"비고를 입력하세요\"\n-/>\n-\n+          <SelectionField label=\"이메일 수신\" labelColor=\"black\" leftLabel=\"Y\" rightLabel=\"N\" value={emailYn} onChange={(val) => setEmailYn(val as 'Y' | 'N')} $labelPosition=\"horizontal\" />\n+          <SelectionField label=\"SMS 수신\" labelColor=\"black\" leftLabel=\"Y\" rightLabel=\"N\" value={smsYn} onChange={(val) => setSmsYn(val as 'Y' | 'N')} $labelPosition=\"horizontal\" />\n           <PopupFooter>\n             <CancelButton onClick={closePopup}>닫기</CancelButton>\n             <SaveButton onClick={handleSave}>저장</SaveButton>\n           </PopupFooter>\n"
                },
                {
                    "date": 1747730240153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,337 +0,0 @@\n-'use client';\n-import React, { useCallback, useMemo, useRef, useState } from 'react'; // useRef 추가\n-\n-import GenericListUI, { FetchParams, FetchResult } from '@/components/CustomList/GenericListUI';\n-import { ColumnDefinition } from '@/components/CustomList/GenericDataTable';\n-import { adminGetList } from '@/lib/api/admin/adminApi';\n-import dayjs from 'dayjs';\n-import styled from 'styled-components';\n-import { THEME_COLORS } from '@/styles/theme_colors';\n-import ActionButton from '@/components/ActionButton';\n-import CmsPopup from '@/components/CmsPopup';\n-import { TextField } from '@/components/TextField';\n-import SelectionField from '@/components/selectionField';\n-import { AppColors } from '@/styles/colors';\n-import { Validators } from '@/lib/utils/validators';\n-import { toast, ToastContainer } from 'react-toastify';\n-import { adminCreate } from '@/lib/api/admin';\n-\n-\n-type AdminUser = {\n-  adminId: string;\n-  name: string;\n-  email: string;\n-  cellphone: string;\n-  lastLoginTime: string | null;\n-  createdTime: string | null;\n-  emailYn: 'Y' | 'N';\n-  smsYn: 'Y' | 'N';\n-};\n-\n-const PopupFooter = styled.div`\n-  display: flex;\n-  justify-content: flex-end;\n-  gap: 12px;\n-  margin-top: 24px;\n-`;\n-\n-const FooterButton = styled.button`\n-  width: 120px;\n-  height: 48px;\n-  border-radius: 6px;\n-  font-weight: bold;\n-  font-size: 16px;\n-  cursor: pointer;\n-  border: none;\n-`;\n-\n-const CancelButton = styled(FooterButton)`\n-  background-color: #ffffff;\n-  color: ${AppColors.onSurface};\n-  border: 1px solid ${AppColors.border};\n-`;\n-\n-const SaveButton = styled(FooterButton)`\n-  background-color: ${AppColors.primary};\n-  color: ${AppColors.onPrimary};\n-`;\n-\n-const FormContainer = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  flex-grow: 1;\n-  gap: 22px;\n-  justify-content: space-evenly;\n-`;\n-\n-const RegisterButton = styled(ActionButton)<{ $themeMode: 'light' | 'dark' }>`\n-  background: ${({ $themeMode }) => ($themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary)};\n-  color: ${({ $themeMode }) => ($themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText)};\n-  border: none;\n-  &:hover:not(:disabled) {\n-    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#e8e8e8' : '#424451')};\n-  }\n-`;\n-\n-const SwitchButton = styled.div<{ checked: boolean; readOnly?: boolean }>`\n-  display: inline-block;\n-  margin: 0 auto;\n-  width: 40px;\n-  height: 20px;\n-  background-color: ${({ checked }) => (checked ? '#4EFF63' : '#D2D3D7')};\n-  border-radius: 20px;\n-  position: relative;\n-  cursor: ${({ readOnly }) => (readOnly ? 'default' : 'pointer')};\n-  transition: background-color 0.3s;\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    top: 2px;\n-    left: ${({ checked }) => (checked ? '20px' : '2px')};\n-    width: 16px;\n-    height: 16px;\n-    background-color: white;\n-    border-radius: 50%;\n-    transition: left 0.3s;\n-  }\n-`;\n-\n-const AdminMngPage: React.FC = () => {\n-  const [selectedUser, setSelectedUser] = useState<Partial<AdminUser> | null>(null);\n-\n-  const [userId, setUserId] = useState('');\n-  const [password, setPassword] = useState('');\n-  const [name, setName] = useState('');\n-  const [email, setEmail] = useState('');\n-  const [cellphone, setCellphone] = useState('');\n-  const [emailYn, setEmailYn] = useState<'Y' | 'N'>('Y');\n-  const [smsYn, setSmsYn] = useState<'Y' | 'N'>('Y');\n-\n-  const [idError, setIdError] = useState<string | null>(null);\n-  const [pwdError, setPwdError] = useState<string | null>(null);\n-  const [nameError, setNameError] = useState<string | null>(null);\n-  const [emailError, setEmailError] = useState<string | null>(null);\n-  const [cellphoneError, setCellphoneError] = useState<string | null>(null);\n-\n-  const [isPopupOpen, setIsPopupOpen] = useState(false);\n-\n-  const listRef = useRef<{ refetch: () => void }>(null);\n-\n-\n-  const clearFormErrors = useCallback(() => {\n-    setIdError(null);\n-    setPwdError(null);\n-    setNameError(null);\n-    setEmailError(null);\n-    setCellphoneError(null);\n-  }, []);\n-\n-  const resetForm = useCallback((initial?: Partial<AdminUser>) => {\n-    setSelectedUser(initial ?? null);\n-    setUserId(initial?.adminId ?? '');\n-    setPassword('');\n-    setName(initial?.name ?? '');\n-    setEmail(initial?.email ?? '');\n-    setCellphone(initial?.cellphone ?? '');\n-    setEmailYn(initial?.emailYn ?? 'Y');\n-    setSmsYn(initial?.smsYn ?? 'Y');\n-    clearFormErrors();\n-  }, [clearFormErrors]);\n-\n-  const handleHeaderButtonClick = () => {\n-    resetForm(); // 신규 등록\n-    setIsPopupOpen(true);\n-  };\n-\n-  const handleRowClick = (item: AdminUser) => {\n-    resetForm(item); // 수정\n-    setIsPopupOpen(true);\n-  };\n-\n-  const closePopup = () => {\n-    setIsPopupOpen(false);\n-  };\n-\n-  const handleSave = async () => {\n-    let valid = true;\n-  \n-    if (!Validators.required(userId) || !Validators.id(userId)) {\n-      setIdError('아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.');\n-      valid = false;\n-    } else setIdError(null);\n-  \n-    if (!Validators.password(password)) {\n-      setPwdError('비밀번호는 영문, 숫자, 특수문자를 포함해 8자 이상이어야 합니다.');\n-      valid = false;\n-    } else setPwdError(null);\n-  \n-    if (!Validators.required(name)) {\n-      setNameError('이름을 입력해주세요.');\n-      valid = false;\n-    } else setNameError(null);\n-  \n-    if (!Validators.email(email)) {\n-      setEmailError('올바른 이메일 형식이 아닙니다.');\n-      valid = false;\n-    } else setEmailError(null);\n-  \n-    if (!Validators.phone(cellphone)) {\n-      setCellphoneError('연락처는 숫자 11자리여야 합니다.');\n-      valid = false;\n-    } else setCellphoneError(null);\n-  \n-    if (!valid) return;\n-  \n-    try {\n-      const response = await adminCreate({\n-        adminId: userId,\n-        password,\n-        name,\n-        cellphone,\n-        description: '', // 필요 시 추후 추가\n-        email,\n-        emailYn,\n-        smsYn,\n-      });\n-  \n-      toast.success('관리자가 성공적으로 등록되었습니다.');\n-      setIsPopupOpen(false); // 팝업 닫기\n-      listRef.current?.refetch();\n-  \n-      // TODO: 목록 리프레시 필요 시 fetchData 다시 호출하거나 상태 갱신\n-    } catch (error: any) {\n-      toast.error(error?.message || '관리자 등록에 실패했습니다.');\n-    }\n-  };\n-  \n-\n-  const fetchData = useCallback(async (params: FetchParams): Promise<FetchResult<AdminUser>> => {\n-    const raw = await adminGetList({ keyword: params.keyword ?? '' });\n-    const wrapper = raw?.[0];\n-    const data = wrapper?.data ?? [];\n-    const totalItems = wrapper?.metadata?.totalCnt ?? data.length;\n-    const allItems = wrapper?.metadata?.allCnt ?? totalItems;\n-    return { data, totalItems, allItems };\n-  }, []);\n-\n-  const handleDropdownChange = useCallback(\n-    (adminId: string, type: 'emailYn' | 'smsYn', newValue: 'Y' | 'N') => {\n-      console.log(`Changed ${type} for ${adminId} to ${newValue}`);\n-    },\n-    []\n-  );\n-\n-  const columns: ColumnDefinition<AdminUser>[] = useMemo(\n-    () => [\n-      { header: 'No', accessor: 'no' },\n-      { header: '아이디', accessor: 'adminId' },\n-      { header: '이름', accessor: 'name' },\n-      { header: '이메일', accessor: 'email' },\n-      { header: '연락처', accessor: 'cellphone' },\n-      {\n-        header: '이메일 수신',\n-        accessor: 'emailYn',\n-        formatter: (_value, row) => (\n-          <SwitchButton\n-            checked={row.emailYn === 'Y'}\n-            onClick={() =>\n-              handleDropdownChange(row.adminId, 'emailYn', row.emailYn === 'Y' ? 'N' : 'Y')\n-            }\n-          />\n-        ),\n-      },\n-      {\n-        header: 'SMS 수신',\n-        accessor: 'smsYn',\n-        formatter: (_value, row) => (\n-          <SwitchButton\n-            checked={row.smsYn === 'Y'}\n-            onClick={() =>\n-              handleDropdownChange(row.adminId, 'smsYn', row.smsYn === 'Y' ? 'N' : 'Y')\n-            }\n-          />\n-        ),\n-      },\n-      {\n-        header: '마지막 로그인',\n-        accessor: 'lastLoginTime',\n-        sortable: true,\n-        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n-      },\n-      {\n-        header: '등록일',\n-        accessor: 'createdTime',\n-        sortable: true,\n-        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD') : '-',\n-      },\n-    ],\n-    [handleDropdownChange]\n-  );\n-\n-  return (\n-    <>\n-    <ToastContainer\n-      position=\"top-right\"\n-      autoClose={3000}\n-      hideProgressBar={false}\n-      newestOnTop={false}\n-      closeOnClick\n-      rtl={false}\n-      pauseOnFocusLoss\n-      draggable\n-      pauseOnHover\n-      theme=\"light\"\n-  ></ToastContainer>\n-      <GenericListUI<AdminUser>\n-        ref={listRef}\n-        title=\"관리자회원관리\"\n-        excelFileName=\"AdminList\"\n-        columns={columns}\n-        fetchData={fetchData}\n-        enableSearch\n-        enableDateFilter={false}\n-        searchPlaceholder=\"이름, 이메일, 아이디 검색\"\n-        onRowClick={handleRowClick}\n-        itemsPerPageOptions={[10, 20, 50]}\n-        themeMode=\"light\"\n-        renderHeaderActionButton={() => (\n-          <RegisterButton $themeMode=\"light\" onClick={handleHeaderButtonClick}>\n-            관리자 등록\n-          </RegisterButton>\n-        )}\n-      />\n-\n-      <CmsPopup isOpen={isPopupOpen} onClose={closePopup}>\n-        <FormContainer>\n-          <TextField value={userId} label=\"* 아이디\" autoComplete='off' $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setUserId(e.target.value)} placeholder=\"영문자와 숫자를 포함한 6~20자\" errorMessage={idError ?? undefined} />\n-          <TextField value={password} showSuffixIcon = {true} label=\"* 비밀번호\"  autoComplete=\"new-password\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setPassword(e.target.value)} placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\" isPasswordField ={true} errorMessage={pwdError ?? undefined} />\n-          <TextField value={name} label=\"* 이름\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setName(e.target.value)} placeholder=\"이름을 입력하세요\" errorMessage={nameError ?? undefined} />\n-          <TextField value={email} label=\"* 이메일\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setEmail(e.target.value)} placeholder=\"이메일 형식으로 입력하세요\" errorMessage={emailError ?? undefined} />\n-          <TextField\n-  value={cellphone}\n-  label=\"* 연락처\"\n-  $labelPosition=\"horizontal\"\n-  labelColor=\"black\"\n-  onChange={(e) => {\n-    const input = e.target.value;\n-    // 숫자만 허용\n-    if (/^\\d*$/.test(input)) {\n-      setCellphone(input);\n-    }\n-  }}\n-  placeholder=\"- 제외 하고 입력하세요\"\n-  errorMessage={cellphoneError ?? undefined}\n-/>\n-          <SelectionField label=\"이메일 수신\" labelColor=\"black\" leftLabel=\"Y\" rightLabel=\"N\" value={emailYn} onChange={(val) => setEmailYn(val as 'Y' | 'N')} $labelPosition=\"horizontal\" />\n-          <SelectionField label=\"SMS 수신\" labelColor=\"black\" leftLabel=\"Y\" rightLabel=\"N\" value={smsYn} onChange={(val) => setSmsYn(val as 'Y' | 'N')} $labelPosition=\"horizontal\" />\n-          <PopupFooter>\n-            <CancelButton onClick={closePopup}>닫기</CancelButton>\n-            <SaveButton onClick={handleSave}>저장</SaveButton>\n-          </PopupFooter>\n-        </FormContainer>\n-      </CmsPopup>\n-    </>\n-  );\n-};\n-\n-export default AdminMngPage;\n\\ No newline at end of file\n"
=======
                    "date": 1747735052158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,8 +239,9 @@\n       console.log(`Changed ${type} for ${adminId} to ${newValue}`);\n     },\n     []\n   );\n+  \n \n   const columns: ColumnDefinition<AdminUser>[] = useMemo(\n     () => [\n       { header: 'No', accessor: 'no' },\n"
>>>>>>> f1a9463f68af677081887ca1da9e0fa8025a9cbc
                }
            ],
            "date": 1747728259867,
            "name": "Commit-0",
            "content": "'use client';\nimport React, { useCallback, useMemo, useRef, useState } from 'react'; // useRef 추가\n\nimport GenericListUI, { FetchParams, FetchResult } from '@/components/CustomList/GenericListUI';\nimport { ColumnDefinition } from '@/components/CustomList/GenericDataTable';\nimport { adminGetList } from '@/lib/api/admin/adminApi';\nimport dayjs from 'dayjs';\nimport styled from 'styled-components';\nimport { THEME_COLORS } from '@/styles/theme_colors';\nimport ActionButton from '@/components/ActionButton';\nimport CmsPopup from '@/components/CmsPopup';\nimport { TextField } from '@/components/TextField';\nimport SelectionField from '@/components/selectionField';\nimport { AppColors } from '@/styles/colors';\nimport { Validators } from '@/lib/utils/validators';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { adminCreate } from '@/lib/api/admin';\nimport Switch from '@/components/Switch';\nimport { SwitchInput } from '@/components/SwitchInput';\n\nconst SwitchRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 12px 0;\n`;\n\nconst SwitchLabel = styled.label`\n  font-size: 16px;\n  font-weight: 500;\n  color: black;\n`;\n\n\n\ntype AdminUser = {\n  adminId: string;\n  name: string;\n  email: string;\n  cellphone: string;\n  lastLoginTime: string | null;\n  createdTime: string | null;\n  emailYn: 'Y' | 'N';\n  smsYn: 'Y' | 'N';\n};\n\nconst PopupFooter = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  margin-top: 24px;\n`;\n\nconst FooterButton = styled.button`\n  width: 120px;\n  height: 48px;\n  border-radius: 6px;\n  font-weight: bold;\n  font-size: 16px;\n  cursor: pointer;\n  border: none;\n`;\n\nconst CancelButton = styled(FooterButton)`\n  background-color: #ffffff;\n  color: ${AppColors.onSurface};\n  border: 1px solid ${AppColors.border};\n`;\n\nconst SaveButton = styled(FooterButton)`\n  background-color: ${AppColors.primary};\n  color: ${AppColors.onPrimary};\n`;\n\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  gap: 22px;\n  justify-content: space-evenly;\n`;\n\nconst RegisterButton = styled(ActionButton)<{ $themeMode: 'light' | 'dark' }>`\n  background: ${({ $themeMode }) => ($themeMode === 'light' ? THEME_COLORS.light.primary : THEME_COLORS.dark.buttonText)};\n  color: ${({ $themeMode }) => ($themeMode === 'light' ? '#f8f8f8' : THEME_COLORS.dark.primary)};\n  border: none;\n  &:hover:not(:disabled) {\n    background-color: ${({ $themeMode }) => ($themeMode === 'light' ? '#e8e8e8' : '#424451')};\n  }\n`;\n\n// const SwitchButton = styled.div<{ checked: boolean; readOnly?: boolean }>`\n//   display: inline-block;\n//   margin: 0 auto;\n//   width: 40px;\n//   height: 20px;\n//   background-color: ${({ checked }) => (checked ? '#4EFF63' : '#D2D3D7')};\n//   border-radius: 20px;\n//   position: relative;\n//   cursor: ${({ readOnly }) => (readOnly ? 'default' : 'pointer')};\n//   transition: background-color 0.3s;\n//   &::before {\n//     content: '';\n//     position: absolute;\n//     top: 2px;\n//     left: ${({ checked }) => (checked ? '20px' : '2px')};\n//     width: 16px;\n//     height: 16px;\n//     background-color: white;\n//     border-radius: 50%;\n//     transition: left 0.3s;\n//   }\n// `;\n\nconst AdminMngPage: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<Partial<AdminUser> | null>(null);\n\n  const [userId, setUserId] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [cellphone, setCellphone] = useState('');\n  const [emailYn, setEmailYn] = useState<'Y' | 'N'>('Y');\n  const [smsYn, setSmsYn] = useState<'Y' | 'N'>('Y');\n  const [description, setDescription] = useState('');\n\n  const [idError, setIdError] = useState<string | null>(null);\n  const [pwdError, setPwdError] = useState<string | null>(null);\n  const [nameError, setNameError] = useState<string | null>(null);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [cellphoneError, setCellphoneError] = useState<string | null>(null);\n\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n\n  const listRef = useRef<{ refetch: () => void }>(null);\n\n\n  const clearFormErrors = useCallback(() => {\n    setIdError(null);\n    setPwdError(null);\n    setNameError(null);\n    setEmailError(null);\n    setCellphoneError(null);\n  }, []);\n\n  const resetForm = useCallback((initial?: Partial<AdminUser>) => {\n    setSelectedUser(initial ?? null);\n    setUserId(initial?.adminId ?? '');\n    setPassword('');\n    setName(initial?.name ?? '');\n    setEmail(initial?.email ?? '');\n    setCellphone(initial?.cellphone ?? '');\n    setEmailYn(initial?.emailYn ?? 'Y');\n    setSmsYn(initial?.smsYn ?? 'Y');\n    clearFormErrors();\n  }, [clearFormErrors]);\n\n  const handleHeaderButtonClick = () => {\n    resetForm(); // 신규 등록\n    setIsPopupOpen(true);\n  };\n\n  const handleRowClick = (item: AdminUser) => {\n    resetForm(item); // 수정\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const handleSave = async () => {\n    let valid = true;\n  \n    if (!Validators.required(userId) || !Validators.id(userId)) {\n      setIdError('아이디는 영문자와 숫자를 포함한 6~20자여야 합니다.');\n      valid = false;\n    } else setIdError(null);\n  \n    if (!Validators.password(password)) {\n      setPwdError('비밀번호는 영문, 숫자, 특수문자를 포함해 8자 이상이어야 합니다.');\n      valid = false;\n    } else setPwdError(null);\n  \n    if (!Validators.required(name)) {\n      setNameError('이름을 입력해주세요.');\n      valid = false;\n    } else setNameError(null);\n  \n    if (!Validators.email(email)) {\n      setEmailError('올바른 이메일 형식이 아닙니다.');\n      valid = false;\n    } else setEmailError(null);\n  \n    if (!Validators.phone(cellphone)) {\n      setCellphoneError('연락처는 숫자 11자리여야 합니다.');\n      valid = false;\n    } else setCellphoneError(null);\n  \n    if (!valid) return;\n  \n    try {\n      const response = await adminCreate({\n        adminId: userId,\n        password,\n        name,\n        cellphone,\n        description,\n        email,\n        emailYn,\n        smsYn,\n      });\n  \n      toast.success('관리자가 성공적으로 등록되었습니다.');\n      setIsPopupOpen(false); // 팝업 닫기\n      listRef.current?.refetch();\n  \n      // TODO: 목록 리프레시 필요 시 fetchData 다시 호출하거나 상태 갱신\n    } catch (error: any) {\n      toast.error(error?.message || '관리자 등록에 실패했습니다.');\n    }\n  };\n  \n\n  const fetchData = useCallback(async (params: FetchParams): Promise<FetchResult<AdminUser>> => {\n    const raw = await adminGetList({ keyword: params.keyword ?? '' });\n    const wrapper = raw?.[0];\n    const data = wrapper?.data ?? [];\n    const totalItems = wrapper?.metadata?.totalCnt ?? data.length;\n    const allItems = wrapper?.metadata?.allCnt ?? totalItems;\n    return { data, totalItems, allItems };\n  }, []);\n\n  const handleDropdownChange = useCallback(\n    (adminId: string, type: 'emailYn' | 'smsYn', newValue: 'Y' | 'N') => {\n      console.log(`Changed ${type} for ${adminId} to ${newValue}`);\n    },\n    []\n  );\n\n  const columns: ColumnDefinition<AdminUser>[] = useMemo(\n    () => [\n      { header: 'No', accessor: 'no' },\n      {\n        header: '가입일',\n        accessor: 'createdTime',\n        sortable: true,\n        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD') : '-',\n      },\n      {\n        header: '최근접속',\n        accessor: 'lastLoginTime',\n        sortable: true,\n        formatter: (value) => value ? dayjs(value).format('YYYY-MM-DD HH:mm:ss') : '-',\n      },\n      { header: '이름', accessor: 'name' },\n      { header: '아이디', accessor: 'adminId' },\n      { header: '이메일', accessor: 'email' },\n      { header: '전화번호', accessor: 'cellphone' },\n      {\n        header: 'SMS 수신',\n        accessor: 'smsYn',\n        formatter: (_value, row) => (\n          <Switch\n            checked={row.smsYn === 'Y'}\n            onToggle={() =>\n              handleDropdownChange(row.adminId, 'smsYn', row.smsYn === 'Y' ? 'N' : 'Y')\n            }\n          />\n        ),\n      },\n      {\n        header: '메일 수신',\n        accessor: 'emailYn',\n        formatter: (_value, row) => (\n          <Switch\n            checked={row.emailYn === 'Y'}\n            onToggle={() =>\n              handleDropdownChange(row.adminId, 'emailYn', row.emailYn === 'Y' ? 'N' : 'Y')\n            }\n          />\n        ),\n      },\n      { header: '비고', accessor: 'description' },\n   \n\n    ],\n    [handleDropdownChange]\n  );\n\n  return (\n    <>\n    <ToastContainer\n      position=\"top-right\"\n      autoClose={3000}\n      hideProgressBar={false}\n      newestOnTop={false}\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable\n      pauseOnHover\n      theme=\"light\"\n  ></ToastContainer>\n      <GenericListUI<AdminUser>\n        ref={listRef}\n        title=\"관리자회원관리\"\n        excelFileName=\"AdminList\"\n        columns={columns}\n        fetchData={fetchData}\n        enableSearch\n        enableDateFilter={false}\n        searchPlaceholder=\"이름, 이메일, 아이디 검색\"\n        onRowClick={handleRowClick}\n        themeMode=\"light\"\n        renderHeaderActionButton={() => (\n          <RegisterButton $themeMode=\"light\" onClick={handleHeaderButtonClick}>\n            관리자 등록\n          </RegisterButton>\n        )}\n      />\n\n      <CmsPopup  title='관리자등록' isOpen={isPopupOpen} onClose={closePopup}>\n        <FormContainer>\n          <TextField radius='0' value={userId} label=\"* 아이디\" autoComplete='off' $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setUserId(e.target.value)} placeholder=\"영문자와 숫자를 포함한 6~20자\" errorMessage={idError ?? undefined} />\n          <TextField radius='0' value={password} showSuffixIcon = {true} label=\"* 비밀번호\"  autoComplete=\"new-password\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setPassword(e.target.value)} placeholder=\"영문 + 숫자 + 특수문자 1개 포함 8자리 이상\" isPasswordField ={true} errorMessage={pwdError ?? undefined} />\n          <TextField radius='0' value={name} label=\"* 이름\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setName(e.target.value)} placeholder=\"이름을 입력하세요\" errorMessage={nameError ?? undefined} />\n          <TextField radius='0' value={email} label=\"* 이메일\" $labelPosition=\"horizontal\" labelColor=\"black\" onChange={(e) => setEmail(e.target.value)} placeholder=\"이메일 형식으로 입력하세요\" errorMessage={emailError ?? undefined} />\n          <TextField\n          radius='0'\n  value={cellphone}\n  label=\"* 연락처\"\n  $labelPosition=\"horizontal\"\n  labelColor=\"black\"\n  onChange={(e) => {\n    const input = e.target.value;\n    // 숫자만 허용\n    if (/^\\d*$/.test(input)) {\n      setCellphone(input);\n    }\n  }}\n  placeholder=\"- 제외 하고 입력하세요\"\n  errorMessage={cellphoneError ?? undefined}\n/>\n      \n<SwitchInput\n  label=\"이메일 수신\"\n  value={emailYn}\n  onChange={setEmailYn}\n  $labelPosition=\"horizontal\"\n  labelColor=\"black\"\n/>\n\n<SwitchInput\n  label=\"SMS 수신\"\n  value={smsYn}\n  onChange={setSmsYn}\n  $labelPosition=\"horizontal\"\n  labelColor=\"black\"\n/>\n\n          <TextField\n          radius='0'\n  multiline\n  minLines={4}\n  maxLines={10}\n  height=\"200px\"\n  value={description}\n  label=\"비고\"\n  $labelPosition=\"horizontal\"\n  labelColor=\"black\"\n  onChange={(e) => setDescription(e.target.value)}\n  placeholder=\"비고를 입력하세요\"\n/>\n\n          <PopupFooter>\n            <CancelButton onClick={closePopup}>닫기</CancelButton>\n            <SaveButton onClick={handleSave}>저장</SaveButton>\n          </PopupFooter>\n        </FormContainer>\n      </CmsPopup>\n    </>\n  );\n};\n\nexport default AdminMngPage;\n"
        }
    ]
}